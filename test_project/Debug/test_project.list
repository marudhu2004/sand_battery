
test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c14c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800c3a0  0800c3a0  0000d3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c798  0800c798  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c798  0800c798  0000d798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7a0  0800c7a0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7a4  0800c7a4  0000d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c7a8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  0800c97c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800c97c  0000e468  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010537  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e24  00000000  00000000  0001e741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00020568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000930  00000000  00000000  00021160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000319f9  00000000  00000000  00021a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ef  00000000  00000000  00053489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00136e8a  00000000  00000000  00064878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019b702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004360  00000000  00000000  0019b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0019faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001d4 	.word	0x200001d4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800c384 	.word	0x0800c384

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001d8 	.word	0x200001d8
 800028c:	0800c384 	.word	0x0800c384

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b97e 	b.w	8000edc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14d      	bne.n	8000ca0 <__udivmoddi4+0xa8>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	460f      	mov	r7, r1
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4696      	mov	lr, r2
 8000c0c:	fab2 f382 	clz	r3, r2
 8000c10:	d960      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c12:	b14b      	cbz	r3, 8000c28 <__udivmoddi4+0x30>
 8000c14:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c2c:	fa1f f48e 	uxth.w	r4, lr
 8000c30:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c34:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c38:	fb06 7711 	mls	r7, r6, r1, r7
 8000c3c:	fb01 f004 	mul.w	r0, r1, r4
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c48:	eb1e 0202 	adds.w	r2, lr, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x60>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f200 812d 	bhi.w	8000eb2 <__udivmoddi4+0x2ba>
 8000c58:	4639      	mov	r1, r7
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	fa1f fc8c 	uxth.w	ip, ip
 8000c60:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c64:	fb06 2210 	mls	r2, r6, r0, r2
 8000c68:	fb00 f404 	mul.w	r4, r0, r4
 8000c6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c70:	4564      	cmp	r4, ip
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7c:	d202      	bcs.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	4564      	cmp	r4, ip
 8000c80:	f200 811a 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000c84:	4610      	mov	r0, r2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	ebac 0c04 	sub.w	ip, ip, r4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b125      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c92:	fa2c f303 	lsr.w	r3, ip, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d905      	bls.n	8000cb0 <__udivmoddi4+0xb8>
 8000ca4:	b10d      	cbz	r5, 8000caa <__udivmoddi4+0xb2>
 8000ca6:	e9c5 0100 	strd	r0, r1, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	4608      	mov	r0, r1
 8000cae:	e7f5      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cb0:	fab3 f183 	clz	r1, r3
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d14d      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	f0c0 80f2 	bcc.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f080 80ef 	bcs.w	8000ea2 <__udivmoddi4+0x2aa>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	4608      	mov	r0, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e6      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cce:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd2:	e7e3      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80a2 	bne.w	8000e1e <__udivmoddi4+0x226>
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ce0:	fa1f f68e 	uxth.w	r6, lr
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cea:	fb07 2014 	mls	r0, r7, r4, r2
 8000cee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb06 f004 	mul.w	r0, r6, r4
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d90f      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000cfe:	eb1e 0202 	adds.w	r2, lr, r2
 8000d02:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80c8 	beq.w	8000eac <__udivmoddi4+0x2b4>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	fa1f fc8c 	uxth.w	ip, ip
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	fb00 f606 	mul.w	r6, r0, r6
 8000d30:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d34:	4566      	cmp	r6, ip
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d38:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x150>
 8000d42:	4566      	cmp	r6, ip
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	ebac 0c06 	sub.w	ip, ip, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d66:	40f4      	lsrs	r4, r6
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	ea4e 030c 	orr.w	r3, lr, ip
 8000d70:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fa1f fc87 	uxth.w	ip, r7
 8000d80:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d84:	fb08 4410 	mls	r4, r8, r0, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb00 f90c 	mul.w	r9, r0, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d90e      	bls.n	8000db2 <__udivmoddi4+0x1ba>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	bf2c      	ite	cs
 8000d9c:	f04f 0b01 	movcs.w	fp, #1
 8000da0:	f04f 0b00 	movcc.w	fp, #0
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	d903      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000da8:	f1bb 0f00 	cmp.w	fp, #0
 8000dac:	f000 8093 	beq.w	8000ed6 <__udivmoddi4+0x2de>
 8000db0:	4650      	mov	r0, sl
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dbe:	fb08 4413 	mls	r4, r8, r3, r4
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d906      	bls.n	8000ddc <__udivmoddi4+0x1e4>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd4:	d201      	bcs.n	8000dda <__udivmoddi4+0x1e2>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d87a      	bhi.n	8000ed0 <__udivmoddi4+0x2d8>
 8000dda:	4643      	mov	r3, r8
 8000ddc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000de0:	eba4 040c 	sub.w	r4, r4, ip
 8000de4:	fba0 9802 	umull	r9, r8, r0, r2
 8000de8:	4544      	cmp	r4, r8
 8000dea:	46cc      	mov	ip, r9
 8000dec:	4643      	mov	r3, r8
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0x1fe>
 8000df0:	d106      	bne.n	8000e00 <__udivmoddi4+0x208>
 8000df2:	45ce      	cmp	lr, r9
 8000df4:	d204      	bcs.n	8000e00 <__udivmoddi4+0x208>
 8000df6:	3801      	subs	r0, #1
 8000df8:	ebb9 0c02 	subs.w	ip, r9, r2
 8000dfc:	eb68 0307 	sbc.w	r3, r8, r7
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x222>
 8000e02:	ebbe 020c 	subs.w	r2, lr, ip
 8000e06:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e73e      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e1e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e22:	f1c3 0120 	rsb	r1, r3, #32
 8000e26:	fa04 f203 	lsl.w	r2, r4, r3
 8000e2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa20 f101 	lsr.w	r1, r0, r1
 8000e38:	fa1f f68e 	uxth.w	r6, lr
 8000e3c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fb07 4410 	mls	r4, r7, r0, r4
 8000e46:	0c11      	lsrs	r1, r2, #16
 8000e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e4c:	fb00 f406 	mul.w	r4, r0, r6
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d90e      	bls.n	8000e72 <__udivmoddi4+0x27a>
 8000e54:	eb1e 0101 	adds.w	r1, lr, r1
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	bf2c      	ite	cs
 8000e5e:	f04f 0901 	movcs.w	r9, #1
 8000e62:	f04f 0900 	movcc.w	r9, #0
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d902      	bls.n	8000e70 <__udivmoddi4+0x278>
 8000e6a:	f1b9 0f00 	cmp.w	r9, #0
 8000e6e:	d02c      	beq.n	8000eca <__udivmoddi4+0x2d2>
 8000e70:	4640      	mov	r0, r8
 8000e72:	1b09      	subs	r1, r1, r4
 8000e74:	b292      	uxth	r2, r2
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x2a2>
 8000e8a:	eb1e 0202 	adds.w	r2, lr, r2
 8000e8e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e92:	d201      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d815      	bhi.n	8000ec4 <__udivmoddi4+0x2cc>
 8000e98:	4644      	mov	r4, r8
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ea0:	e721      	b.n	8000ce6 <__udivmoddi4+0xee>
 8000ea2:	1a86      	subs	r6, r0, r2
 8000ea4:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e70e      	b.n	8000cca <__udivmoddi4+0xd2>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e735      	b.n	8000d1e <__udivmoddi4+0x126>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4472      	add	r2, lr
 8000eb6:	e6d0      	b.n	8000c5a <__udivmoddi4+0x62>
 8000eb8:	44f4      	add	ip, lr
 8000eba:	3802      	subs	r0, #2
 8000ebc:	e6e3      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000ebe:	44f4      	add	ip, lr
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x152>
 8000ec4:	3c02      	subs	r4, #2
 8000ec6:	4472      	add	r2, lr
 8000ec8:	e7e7      	b.n	8000e9a <__udivmoddi4+0x2a2>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4471      	add	r1, lr
 8000ece:	e7d0      	b.n	8000e72 <__udivmoddi4+0x27a>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e782      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	e76a      	b.n	8000db2 <__udivmoddi4+0x1ba>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ee4:	b0aa      	sub	sp, #168	@ 0xa8
 8000ee6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fe9a 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f95c 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fa6e 	bl	80013d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ef4:	f000 f9c8 	bl	8001288 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ef8:	f000 fa1e 	bl	8001338 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float Temp[5];
  _Bool TCF=0;                                          // Thermocouple Connection acknowledge Flag
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  uint8_t DATARX[2];

  while (1)
  {
	// Reading sensor 1 data
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_11,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f08:	48a3      	ldr	r0, [pc, #652]	@ (8001198 <main+0x2b8>)
 8000f0a:	f001 fa21 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 8000f0e:	f107 0108 	add.w	r1, r7, #8
 8000f12:	2332      	movs	r3, #50	@ 0x32
 8000f14:	2201      	movs	r2, #1
 8000f16:	48a1      	ldr	r0, [pc, #644]	@ (800119c <main+0x2bc>)
 8000f18:	f007 fb6e 	bl	80085f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_11,GPIO_PIN_SET);         // High State for SPI Communication
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f22:	489d      	ldr	r0, [pc, #628]	@ (8001198 <main+0x2b8>)
 8000f24:	f001 fa14 	bl	8002350 <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8000f28:	7a3b      	ldrb	r3, [r7, #8]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7a7b      	ldrb	r3, [r7, #9]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	4313      	orrs	r3, r2
 8000f32:	109b      	asrs	r3, r3, #2
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	Temp[0]=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8000f44:	7a3b      	ldrb	r3, [r7, #8]
 8000f46:	461a      	mov	r2, r3
 8000f48:	7a7b      	ldrb	r3, [r7, #9]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	10db      	asrs	r3, r3, #3
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f58:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	Temp[0]*=0.25;
 8000f5c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000f60:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f68:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

	// Reading sensor 2 data
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_12,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f72:	4889      	ldr	r0, [pc, #548]	@ (8001198 <main+0x2b8>)
 8000f74:	f001 f9ec 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 8000f78:	f107 0108 	add.w	r1, r7, #8
 8000f7c:	2332      	movs	r3, #50	@ 0x32
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4886      	ldr	r0, [pc, #536]	@ (800119c <main+0x2bc>)
 8000f82:	f007 fb39 	bl	80085f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_12,GPIO_PIN_SET);         // High State for SPI Communication
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f8c:	4882      	ldr	r0, [pc, #520]	@ (8001198 <main+0x2b8>)
 8000f8e:	f001 f9df 	bl	8002350 <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8000f92:	7a3b      	ldrb	r3, [r7, #8]
 8000f94:	461a      	mov	r2, r3
 8000f96:	7a7b      	ldrb	r3, [r7, #9]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	109b      	asrs	r3, r3, #2
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	Temp[1]=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8000fae:	7a3b      	ldrb	r3, [r7, #8]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	7a7b      	ldrb	r3, [r7, #9]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	10db      	asrs	r3, r3, #3
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	Temp[1]*=0.25;
 8000fc6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000fca:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	// Reading sensor 3 data
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_13,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fdc:	486e      	ldr	r0, [pc, #440]	@ (8001198 <main+0x2b8>)
 8000fde:	f001 f9b7 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 8000fe2:	f107 0108 	add.w	r1, r7, #8
 8000fe6:	2332      	movs	r3, #50	@ 0x32
 8000fe8:	2201      	movs	r2, #1
 8000fea:	486c      	ldr	r0, [pc, #432]	@ (800119c <main+0x2bc>)
 8000fec:	f007 fb04 	bl	80085f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_13,GPIO_PIN_SET);         // High State for SPI Communication
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff6:	4868      	ldr	r0, [pc, #416]	@ (8001198 <main+0x2b8>)
 8000ff8:	f001 f9aa 	bl	8002350 <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8000ffc:	7a3b      	ldrb	r3, [r7, #8]
 8000ffe:	461a      	mov	r2, r3
 8001000:	7a7b      	ldrb	r3, [r7, #9]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	4313      	orrs	r3, r2
 8001006:	109b      	asrs	r3, r3, #2
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	Temp[2]=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001018:	7a3b      	ldrb	r3, [r7, #8]
 800101a:	461a      	mov	r2, r3
 800101c:	7a7b      	ldrb	r3, [r7, #9]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	4313      	orrs	r3, r2
 8001022:	10db      	asrs	r3, r3, #3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	Temp[2]*=0.25;
 8001030:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001034:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

	// Reading sensor 4 data
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_RESET);       // Low State for SPI Communication
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001046:	4854      	ldr	r0, [pc, #336]	@ (8001198 <main+0x2b8>)
 8001048:	f001 f982 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 800104c:	f107 0108 	add.w	r1, r7, #8
 8001050:	2332      	movs	r3, #50	@ 0x32
 8001052:	2201      	movs	r2, #1
 8001054:	4851      	ldr	r0, [pc, #324]	@ (800119c <main+0x2bc>)
 8001056:	f007 facf 	bl	80085f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_SET);         // High State for SPI Communication
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001060:	484d      	ldr	r0, [pc, #308]	@ (8001198 <main+0x2b8>)
 8001062:	f001 f975 	bl	8002350 <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8001066:	7a3b      	ldrb	r3, [r7, #8]
 8001068:	461a      	mov	r2, r3
 800106a:	7a7b      	ldrb	r3, [r7, #9]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	4313      	orrs	r3, r2
 8001070:	109b      	asrs	r3, r3, #2
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	Temp[3]=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8001082:	7a3b      	ldrb	r3, [r7, #8]
 8001084:	461a      	mov	r2, r3
 8001086:	7a7b      	ldrb	r3, [r7, #9]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	4313      	orrs	r3, r2
 800108c:	10db      	asrs	r3, r3, #3
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001096:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	Temp[3]*=0.25;
 800109a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800109e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

	// Reading sensor 5 data
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_15,GPIO_PIN_RESET);       // Low State for SPI Communication
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b0:	4839      	ldr	r0, [pc, #228]	@ (8001198 <main+0x2b8>)
 80010b2:	f001 f94d 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 80010b6:	f107 0108 	add.w	r1, r7, #8
 80010ba:	2332      	movs	r3, #50	@ 0x32
 80010bc:	2201      	movs	r2, #1
 80010be:	4837      	ldr	r0, [pc, #220]	@ (800119c <main+0x2bc>)
 80010c0:	f007 fa9a 	bl	80085f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_15,GPIO_PIN_SET);         // High State for SPI Communication
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ca:	4833      	ldr	r0, [pc, #204]	@ (8001198 <main+0x2b8>)
 80010cc:	f001 f940 	bl	8002350 <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 80010d0:	7a3b      	ldrb	r3, [r7, #8]
 80010d2:	461a      	mov	r2, r3
 80010d4:	7a7b      	ldrb	r3, [r7, #9]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	4313      	orrs	r3, r2
 80010da:	109b      	asrs	r3, r3, #2
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	Temp[4]=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 80010ec:	7a3b      	ldrb	r3, [r7, #8]
 80010ee:	461a      	mov	r2, r3
 80010f0:	7a7b      	ldrb	r3, [r7, #9]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	4313      	orrs	r3, r2
 80010f6:	10db      	asrs	r3, r3, #3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	Temp[4]*=0.25;
 8001104:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001108:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

	// Sending data to esp
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
		Temp[0], Temp[1],Temp[2],Temp[3],Temp[4]);
 8001114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa26 	bl	8000568 <__aeabi_f2d>
 800111c:	e9c7 0100 	strd	r0, r1, [r7]
		Temp[0], Temp[1],Temp[2],Temp[3],Temp[4]);
 8001120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa20 	bl	8000568 <__aeabi_f2d>
 8001128:	4604      	mov	r4, r0
 800112a:	460d      	mov	r5, r1
		Temp[0], Temp[1],Temp[2],Temp[3],Temp[4]);
 800112c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa1a 	bl	8000568 <__aeabi_f2d>
 8001134:	4680      	mov	r8, r0
 8001136:	4689      	mov	r9, r1
		Temp[0], Temp[1],Temp[2],Temp[3],Temp[4]);
 8001138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa14 	bl	8000568 <__aeabi_f2d>
 8001140:	4682      	mov	sl, r0
 8001142:	468b      	mov	fp, r1
		Temp[0], Temp[1],Temp[2],Temp[3],Temp[4]);
 8001144:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
	sprintf(print_data, "{\"sen1\": %.2f, \"sen2\": %.2f, \"sen3\": %.2f, \"sen4\": %.2f, \"sen5\": %.2f}\n",
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa0d 	bl	8000568 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f107 000c 	add.w	r0, r7, #12
 8001156:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800115a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800115e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001162:	e9cd 4500 	strd	r4, r5, [sp]
 8001166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <main+0x2c0>)
 800116c:	f008 ffc4 	bl	800a0f8 <siprintf>
	HAL_UART_Transmit(&huart3, print_data, strlen(print_data), 100);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f88b 	bl	8000290 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f107 010c 	add.w	r1, r7, #12
 8001182:	2364      	movs	r3, #100	@ 0x64
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <main+0x2c4>)
 8001186:	f007 fcec 	bl	8008b62 <HAL_UART_Transmit>

	HAL_Delay(5000);
 800118a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800118e:	f000 fe05 	bl	8001d9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_11,GPIO_PIN_RESET);       // Low State for SPI Communication
 8001192:	bf00      	nop
 8001194:	e6b5      	b.n	8000f02 <main+0x22>
 8001196:	bf00      	nop
 8001198:	42021400 	.word	0x42021400
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	0800c3a0 	.word	0x0800c3a0
 80011a4:	20000280 	.word	0x20000280

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b09c      	sub	sp, #112	@ 0x70
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2250      	movs	r2, #80	@ 0x50
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f009 f801 	bl	800a1be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <SystemClock_Config+0xd8>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001280 <SystemClock_Config+0xd8>)
 80011d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011d8:	6113      	str	r3, [r2, #16]
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <SystemClock_Config+0xd8>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e6:	bf00      	nop
 80011e8:	4b25      	ldr	r3, [pc, #148]	@ (8001280 <SystemClock_Config+0xd8>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d1f9      	bne.n	80011e8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001202:	2303      	movs	r3, #3
 8001204:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800120a:	2310      	movs	r3, #16
 800120c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800121a:	230c      	movs	r3, #12
 800121c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800121e:	2300      	movs	r3, #0
 8001220:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f8a8 	bl	8002380 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001236:	f000 f9fd 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	231f      	movs	r3, #31
 800123c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2303      	movs	r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2103      	movs	r1, #3
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fcc9 	bl	8002bf0 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001264:	f000 f9e6 	bl	8001634 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <SystemClock_Config+0xdc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <SystemClock_Config+0xdc>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	3770      	adds	r7, #112	@ 0x70
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	44020800 	.word	0x44020800
 8001284:	40022000 	.word	0x40022000

08001288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <MX_SPI1_Init+0xa8>)
 800128e:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <MX_SPI1_Init+0xac>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_SPI1_Init+0xa8>)
 8001294:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <MX_SPI1_Init+0xa8>)
 800129c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012a4:	220f      	movs	r2, #15
 80012a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012be:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012d8:	2207      	movs	r2, #7
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_SPI1_Init+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_SPI1_Init+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_SPI1_Init+0xa8>)
 800130a:	2200      	movs	r2, #0
 800130c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <MX_SPI1_Init+0xa8>)
 8001310:	2200      	movs	r2, #0
 8001312:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_SPI1_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_SPI1_Init+0xa8>)
 800131c:	f006 fffc 	bl	8008318 <HAL_SPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001326:	f000 f985 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001f0 	.word	0x200001f0
 8001334:	40013000 	.word	0x40013000

08001338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <MX_USART3_UART_Init+0x94>)
 8001340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001344:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001380:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001382:	f007 fb9e 	bl	8008ac2 <HAL_UART_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 f952 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 8001394:	f008 f8ca 	bl	800952c <HAL_UARTEx_SetTxFifoThreshold>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800139e:	f000 f949 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 80013a6:	f008 f8ff 	bl	80095a8 <HAL_UARTEx_SetRxFifoThreshold>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013b0:	f000 f940 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_USART3_UART_Init+0x90>)
 80013b6:	f008 f880 	bl	80094ba <HAL_UARTEx_DisableFifoMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 f938 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000280 	.word	0x20000280
 80013cc:	40004800 	.word	0x40004800

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	@ 0x38
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001618 <MX_GPIO_Init+0x248>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001618 <MX_GPIO_Init+0x248>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f6:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <MX_GPIO_Init+0x248>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	4b84      	ldr	r3, [pc, #528]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140a:	4a83      	ldr	r2, [pc, #524]	@ (8001618 <MX_GPIO_Init+0x248>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001414:	4b80      	ldr	r3, [pc, #512]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b7d      	ldr	r3, [pc, #500]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	4a7b      	ldr	r2, [pc, #492]	@ (8001618 <MX_GPIO_Init+0x248>)
 800142a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800142e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001432:	4b79      	ldr	r3, [pc, #484]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b75      	ldr	r3, [pc, #468]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001446:	4a74      	ldr	r2, [pc, #464]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001450:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	4b6e      	ldr	r3, [pc, #440]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001464:	4a6c      	ldr	r2, [pc, #432]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800146e:	4b6a      	ldr	r3, [pc, #424]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <MX_GPIO_Init+0x248>)
 800147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001482:	4a65      	ldr	r2, [pc, #404]	@ (8001618 <MX_GPIO_Init+0x248>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800148c:	4b62      	ldr	r3, [pc, #392]	@ (8001618 <MX_GPIO_Init+0x248>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <MX_GPIO_Init+0x248>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001618 <MX_GPIO_Init+0x248>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001618 <MX_GPIO_Init+0x248>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b8:	4b57      	ldr	r3, [pc, #348]	@ (8001618 <MX_GPIO_Init+0x248>)
 80014ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014be:	4a56      	ldr	r2, [pc, #344]	@ (8001618 <MX_GPIO_Init+0x248>)
 80014c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c8:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <MX_GPIO_Init+0x248>)
 80014ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80014dc:	484f      	ldr	r0, [pc, #316]	@ (800161c <MX_GPIO_Init+0x24c>)
 80014de:	f000 ff37 	bl	8002350 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014e2:	2332      	movs	r3, #50	@ 0x32
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ee:	2302      	movs	r3, #2
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f2:	230b      	movs	r3, #11
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4848      	ldr	r0, [pc, #288]	@ (8001620 <MX_GPIO_Init+0x250>)
 80014fe:	f000 fdd5 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001502:	2386      	movs	r3, #134	@ 0x86
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001512:	230b      	movs	r3, #11
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	4841      	ldr	r0, [pc, #260]	@ (8001624 <MX_GPIO_Init+0x254>)
 800151e:	f000 fdc5 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001522:	2310      	movs	r3, #16
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	483b      	ldr	r0, [pc, #236]	@ (8001624 <MX_GPIO_Init+0x254>)
 8001536:	f000 fdb9 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800153a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	4832      	ldr	r0, [pc, #200]	@ (800161c <MX_GPIO_Init+0x24c>)
 8001554:	f000 fdaa 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001558:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	482e      	ldr	r0, [pc, #184]	@ (8001628 <MX_GPIO_Init+0x258>)
 800156e:	f000 fd9d 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2302      	movs	r3, #2
 8001582:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4826      	ldr	r0, [pc, #152]	@ (8001628 <MX_GPIO_Init+0x258>)
 8001590:	f000 fd8c 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <MX_GPIO_Init+0x25c>)
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4822      	ldr	r0, [pc, #136]	@ (8001630 <MX_GPIO_Init+0x260>)
 80015a8:	f000 fd80 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80015ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80015be:	230a      	movs	r3, #10
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4816      	ldr	r0, [pc, #88]	@ (8001624 <MX_GPIO_Init+0x254>)
 80015ca:	f000 fd6f 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80015ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2302      	movs	r3, #2
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e0:	230b      	movs	r3, #11
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4811      	ldr	r0, [pc, #68]	@ (8001630 <MX_GPIO_Init+0x260>)
 80015ec:	f000 fd5e 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80015f0:	23c0      	movs	r3, #192	@ 0xc0
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001600:	2308      	movs	r3, #8
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <MX_GPIO_Init+0x258>)
 800160c:	f000 fd4e 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001610:	bf00      	nop
 8001612:	3738      	adds	r7, #56	@ 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	44020c00 	.word	0x44020c00
 800161c:	42021400 	.word	0x42021400
 8001620:	42020800 	.word	0x42020800
 8001624:	42020000 	.word	0x42020000
 8001628:	42020400 	.word	0x42020400
 800162c:	10110000 	.word	0x10110000
 8001630:	42021800 	.word	0x42021800

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <Error_Handler+0x8>

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0cc      	sub	sp, #304	@ 0x130
 8001654:	af00      	add	r7, sp, #0
 8001656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800165a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800165e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001678:	4618      	mov	r0, r3
 800167a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800167e:	461a      	mov	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f008 fd9c 	bl	800a1be <memset>
  if(hspi->Instance==SPI1)
 8001686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800168a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a33      	ldr	r2, [pc, #204]	@ (8001760 <HAL_SPI_MspInit+0x110>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d15d      	bne.n	8001754 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001698:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800169c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80016a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80016ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fdd8 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80016ca:	f7ff ffb3 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ce:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 80016d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016d4:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 80016d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 80016e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016e4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80016e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016fa:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001702:	4a18      	ldr	r2, [pc, #96]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_SPI_MspInit+0x114>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800171a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001724:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001728:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001742:	2305      	movs	r3, #5
 8001744:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <HAL_SPI_MspInit+0x118>)
 8001750:	f000 fcac 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001754:	bf00      	nop
 8001756:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40013000 	.word	0x40013000
 8001764:	44020c00 	.word	0x44020c00
 8001768:	42020000 	.word	0x42020000

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ce      	sub	sp, #312	@ 0x138
 8001770:	af00      	add	r7, sp, #0
 8001772:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001776:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800177a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001790:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001794:	4618      	mov	r0, r3
 8001796:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800179a:	461a      	mov	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	f008 fd0e 	bl	800a1be <memset>
  if(huart->Instance==USART3)
 80017a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a4a      	ldr	r2, [pc, #296]	@ (80018d8 <HAL_UART_MspInit+0x16c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f040 808b 	bne.w	80018cc <HAL_UART_MspInit+0x160>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017ba:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80017be:	f04f 0204 	mov.w	r2, #4
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017d2:	2200      	movs	r2, #0
 80017d4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fd4a 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80017e6:	f7ff ff25 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ea:	4b3c      	ldr	r3, [pc, #240]	@ (80018dc <HAL_UART_MspInit+0x170>)
 80017ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017f0:	4a3a      	ldr	r2, [pc, #232]	@ (80018dc <HAL_UART_MspInit+0x170>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_UART_MspInit+0x170>)
 80017fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001800:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001808:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001812:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001816:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_UART_MspInit+0x170>)
 800181a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181e:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_UART_MspInit+0x170>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <HAL_UART_MspInit+0x170>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800182e:	f003 0202 	and.w	r2, r3, #2
 8001832:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001836:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001840:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001844:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_UART_MspInit+0x170>)
 8001848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184c:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <HAL_UART_MspInit+0x170>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <HAL_UART_MspInit+0x170>)
 8001858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185c:	f003 0208 	and.w	r2, r3, #8
 8001860:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800186e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001872:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001878:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800188e:	2307      	movs	r3, #7
 8001890:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001898:	4619      	mov	r1, r3
 800189a:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <HAL_UART_MspInit+0x174>)
 800189c:	f000 fc06 	bl	80020ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ba:	2307      	movs	r3, #7
 80018bc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <HAL_UART_MspInit+0x178>)
 80018c8:	f000 fbf0 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018cc:	bf00      	nop
 80018ce:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40004800 	.word	0x40004800
 80018dc:	44020c00 	.word	0x44020c00
 80018e0:	42020400 	.word	0x42020400
 80018e4:	42020c00 	.word	0x42020c00

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 fa0d 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_kill>:

int _kill(int pid, int sig)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001960:	f008 fc80 	bl	800a264 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	2216      	movs	r2, #22
 8001968:	601a      	str	r2, [r3, #0]
  return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_exit>:

void _exit (int status)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800197e:	f04f 31ff 	mov.w	r1, #4294967295
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffe7 	bl	8001956 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <_exit+0x12>

0800198c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	4601      	mov	r1, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <_read+0x12>
  }

  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e009      	b.n	80019ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf1      	blt.n	80019d8 <_write+0x12>
  }
  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_close>:

int _close(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a26:	605a      	str	r2, [r3, #4]
  return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_isatty>:

int _isatty(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f008 fbe4 	bl	800a264 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200a0000 	.word	0x200a0000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000314 	.word	0x20000314
 8001ad0:	20000468 	.word	0x20000468

08001ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ada:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <SystemInit+0xdc>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae0:	4a33      	ldr	r2, [pc, #204]	@ (8001bb0 <SystemInit+0xdc>)
 8001ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001aea:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <SystemInit+0xe0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <SystemInit+0xe0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <SystemInit+0xe0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <SystemInit+0xe0>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	492c      	ldr	r1, [pc, #176]	@ (8001bb4 <SystemInit+0xe0>)
 8001b02:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <SystemInit+0xe4>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <SystemInit+0xe0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001b0e:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <SystemInit+0xe0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001b14:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <SystemInit+0xe0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <SystemInit+0xe0>)
 8001b1c:	4a27      	ldr	r2, [pc, #156]	@ (8001bbc <SystemInit+0xe8>)
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <SystemInit+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001b26:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <SystemInit+0xe0>)
 8001b28:	4a24      	ldr	r2, [pc, #144]	@ (8001bbc <SystemInit+0xe8>)
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <SystemInit+0xe0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <SystemInit+0xe0>)
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <SystemInit+0xe8>)
 8001b36:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <SystemInit+0xe0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <SystemInit+0xe0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb4 <SystemInit+0xe0>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <SystemInit+0xe0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <SystemInit+0xdc>)
 8001b52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b56:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001b58:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <SystemInit+0xec>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001b60:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001b68:	d003      	beq.n	8001b72 <SystemInit+0x9e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b70:	d117      	bne.n	8001ba2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <SystemInit+0xec>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <SystemInit+0xec>)
 8001b80:	4a10      	ldr	r2, [pc, #64]	@ (8001bc4 <SystemInit+0xf0>)
 8001b82:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <SystemInit+0xec>)
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <SystemInit+0xf4>)
 8001b88:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <SystemInit+0xec>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <SystemInit+0xec>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <SystemInit+0xec>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <SystemInit+0xec>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	61d3      	str	r3, [r2, #28]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	44020c00 	.word	0x44020c00
 8001bb8:	eae2eae3 	.word	0xeae2eae3
 8001bbc:	01010280 	.word	0x01010280
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	08192a3b 	.word	0x08192a3b
 8001bc8:	4c5d6e7f 	.word	0x4c5d6e7f

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f7ff ff80 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bfa:	f008 fb39 	bl	800a270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff f96f 	bl	8000ee0 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   r0, =_estack
 8001c04:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c10:	0800c7a8 	.word	0x0800c7a8
  ldr r2, =_sbss
 8001c14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c18:	20000468 	.word	0x20000468

08001c1c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f96c 	bl	8001f02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c2a:	f001 f999 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_Init+0x44>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	490b      	ldr	r1, [pc, #44]	@ (8001c68 <HAL_Init+0x48>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_Init+0x4c>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c44:	2004      	movs	r0, #4
 8001c46:	f000 f9a3 	bl	8001f90 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 f810 	bl	8001c70 <HAL_InitTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e002      	b.n	8001c60 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5a:	f7ff fcf1 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	44020c00 	.word	0x44020c00
 8001c68:	0800c3e8 	.word	0x0800c3e8
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_InitTick+0xdc>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e05c      	b.n	8001d42 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c88:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_InitTick+0xe0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d10c      	bne.n	8001cae <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_InitTick+0xe4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b2c      	ldr	r3, [pc, #176]	@ (8001d4c <HAL_InitTick+0xdc>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e037      	b.n	8001d1e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001cae:	f000 f9c7 	bl	8002040 <HAL_SYSTICK_GetCLKSourceConfig>
 8001cb2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d023      	beq.n	8001d02 <HAL_InitTick+0x92>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d82d      	bhi.n	8001d1c <HAL_InitTick+0xac>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_InitTick+0x5e>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d00d      	beq.n	8001ce8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001ccc:	e026      	b.n	8001d1c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <HAL_InitTick+0xe4>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <HAL_InitTick+0xdc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001cdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
        break;
 8001ce6:	e01a      	b.n	8001d1e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_InitTick+0xdc>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	60fb      	str	r3, [r7, #12]
        break;
 8001d00:	e00d      	b.n	8001d1e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0xdc>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	60fb      	str	r3, [r7, #12]
        break;
 8001d1a:	e000      	b.n	8001d1e <HAL_InitTick+0xae>
        break;
 8001d1c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f914 	bl	8001f4c <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e009      	b.n	8001d42 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	f04f 30ff 	mov.w	r0, #4294967295
 8001d36:	f000 f8ef 	bl	8001f18 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d3a:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <HAL_InitTick+0xe8>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	e000e010 	.word	0xe000e010
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000318 	.word	0x20000318

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000318 	.word	0x20000318

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff6a 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f26:	f7ff ff81 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	6978      	ldr	r0, [r7, #20]
 8001f32:	f7ff ffb3 	bl	8001e9c <NVIC_EncodePriority>
 8001f36:	4602      	mov	r2, r0
 8001f38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff82 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00d      	b.n	8001f7e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f76:	f043 0303 	orr.w	r3, r3, #3
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d844      	bhi.n	8002028 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fc7 	.word	0x08001fc7
 8001fa8:	08001fe5 	.word	0x08001fe5
 8001fac:	08002007 	.word	0x08002007
 8001fb0:	08002029 	.word	0x08002029
 8001fb4:	08001fb9 	.word	0x08001fb9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6013      	str	r3, [r2, #0]
      break;
 8001fc4:	e031      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fd8:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fda:	f023 030c 	bic.w	r3, r3, #12
 8001fde:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001fe2:	e022      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ff2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ff6:	f023 030c 	bic.w	r3, r3, #12
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002004:	e011      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002014:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002018:	f023 030c 	bic.w	r3, r3, #12
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002026:	e000      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002028:	bf00      	nop
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010
 800203c:	44020c00 	.word	0x44020c00

08002040 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002052:	2304      	movs	r3, #4
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e01e      	b.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800205a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b08      	cmp	r3, #8
 8002068:	d00f      	beq.n	800208a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d80f      	bhi.n	8002090 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d003      	beq.n	8002084 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800207c:	e008      	b.n	8002090 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
        break;
 8002082:	e008      	b.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002084:	2301      	movs	r3, #1
 8002086:	607b      	str	r3, [r7, #4]
        break;
 8002088:	e005      	b.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800208a:	2302      	movs	r3, #2
 800208c:	607b      	str	r3, [r7, #4]
        break;
 800208e:	e002      	b.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
        break;
 8002094:	bf00      	nop
    }
  }
  return systick_source;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e010 	.word	0xe000e010
 80020a8:	44020c00 	.word	0x44020c00

080020ac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020ba:	e136      	b.n	800232a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8128 	beq.w	8002324 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x38>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d125      	bne.n	8002130 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d00b      	beq.n	8002184 <HAL_GPIO_Init+0xd8>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002178:	2b11      	cmp	r3, #17
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d130      	bne.n	80021e6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ba:	2201      	movs	r2, #1
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4013      	ands	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 0201 	and.w	r2, r3, #1
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d017      	beq.n	800221e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4013      	ands	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d07c      	beq.n	8002324 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800222a:	4a47      	ldr	r2, [pc, #284]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3318      	adds	r3, #24
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4013      	ands	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0a9a      	lsrs	r2, r3, #10
 8002252:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_GPIO_Init+0x2a0>)
 8002254:	4013      	ands	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	00d2      	lsls	r2, r2, #3
 800225e:	4093      	lsls	r3, r2
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002266:	4938      	ldr	r1, [pc, #224]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3318      	adds	r3, #24
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002274:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002298:	4a2b      	ldr	r2, [pc, #172]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4013      	ands	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80022c2:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4013      	ands	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80022f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800231c:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f aec1 	bne.w	80020bc <HAL_GPIO_Init+0x10>
  }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	44022000 	.word	0x44022000
 800234c:	002f7f7f 	.word	0x002f7f7f

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f000 bc28 	b.w	8002be4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002394:	4b94      	ldr	r3, [pc, #592]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 0318 	and.w	r3, r3, #24
 800239c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800239e:	4b92      	ldr	r3, [pc, #584]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2b18      	cmp	r3, #24
 80023be:	d114      	bne.n	80023ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d111      	bne.n	80023ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 bc08 	b.w	8002be4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80023d4:	4b84      	ldr	r3, [pc, #528]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	4981      	ldr	r1, [pc, #516]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80023e8:	e040      	b.n	800246c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d023      	beq.n	800243a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023f2:	4b7d      	ldr	r3, [pc, #500]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7c      	ldr	r2, [pc, #496]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff fcc1 	bl	8001d84 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002406:	f7ff fcbd 	bl	8001d84 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e3e5      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002418:	4b73      	ldr	r3, [pc, #460]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002424:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	496d      	ldr	r1, [pc, #436]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002434:	4313      	orrs	r3, r2
 8002436:	618b      	str	r3, [r1, #24]
 8002438:	e018      	b.n	800246c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800243a:	4b6b      	ldr	r3, [pc, #428]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6a      	ldr	r2, [pc, #424]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff fc9d 	bl	8001d84 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800244e:	f7ff fc99 	bl	8001d84 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e3c1      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002460:	4b61      	ldr	r3, [pc, #388]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a0 	beq.w	80025ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b10      	cmp	r3, #16
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x10c>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b18      	cmp	r3, #24
 8002484:	d109      	bne.n	800249a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8092 	bne.w	80025ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e3a4      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x132>
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4f      	ldr	r2, [pc, #316]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e058      	b.n	8002564 <HAL_RCC_OscConfig+0x1e4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x160>
 80024ba:	4b4b      	ldr	r3, [pc, #300]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4a      	ldr	r2, [pc, #296]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b48      	ldr	r3, [pc, #288]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a47      	ldr	r2, [pc, #284]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b45      	ldr	r3, [pc, #276]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a44      	ldr	r2, [pc, #272]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e041      	b.n	8002564 <HAL_RCC_OscConfig+0x1e4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x190>
 80024ea:	4b3f      	ldr	r3, [pc, #252]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3e      	ldr	r2, [pc, #248]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a3b      	ldr	r2, [pc, #236]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80024fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a38      	ldr	r2, [pc, #224]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e029      	b.n	8002564 <HAL_RCC_OscConfig+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x1c0>
 800251a:	4b33      	ldr	r3, [pc, #204]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a32      	ldr	r2, [pc, #200]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b30      	ldr	r3, [pc, #192]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2c      	ldr	r2, [pc, #176]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e011      	b.n	8002564 <HAL_RCC_OscConfig+0x1e4>
 8002540:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a28      	ldr	r2, [pc, #160]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b26      	ldr	r3, [pc, #152]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 800255e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fc0a 	bl	8001d84 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002574:	f7ff fc06 	bl	8001d84 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e32e      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x1f4>
 8002592:	e012      	b.n	80025ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fbf6 	bl	8001d84 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800259c:	f7ff fbf2 	bl	8001d84 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e31a      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_RCC_OscConfig+0x268>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 809a 	beq.w	80026fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x25a>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b18      	cmp	r3, #24
 80025d2:	d149      	bne.n	8002668 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d146      	bne.n	8002668 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e2fe      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
 80025e6:	bf00      	nop
 80025e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80025f2:	4b9a      	ldr	r3, [pc, #616]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0218 	and.w	r2, r3, #24
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d014      	beq.n	800262c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002602:	4b96      	ldr	r3, [pc, #600]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0218 	bic.w	r2, r3, #24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	4993      	ldr	r1, [pc, #588]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002614:	f000 fdd0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002618:	4b91      	ldr	r3, [pc, #580]	@ (8002860 <HAL_RCC_OscConfig+0x4e0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb27 	bl	8001c70 <HAL_InitTick>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e2db      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff fbaa 	bl	8001d84 <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002634:	f7ff fba6 	bl	8001d84 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e2ce      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002646:	4b85      	ldr	r3, [pc, #532]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002652:	4b82      	ldr	r3, [pc, #520]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	497e      	ldr	r1, [pc, #504]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002666:	e049      	b.n	80026fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02c      	beq.n	80026ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002670:	4b7a      	ldr	r3, [pc, #488]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 0218 	bic.w	r2, r3, #24
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4977      	ldr	r1, [pc, #476]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002682:	4b76      	ldr	r3, [pc, #472]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff fb79 	bl	8001d84 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002696:	f7ff fb75 	bl	8001d84 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e29d      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026b4:	4b69      	ldr	r3, [pc, #420]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	4966      	ldr	r1, [pc, #408]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
 80026c8:	e018      	b.n	80026fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b64      	ldr	r3, [pc, #400]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a63      	ldr	r2, [pc, #396]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff fb55 	bl	8001d84 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026de:	f7ff fb51 	bl	8001d84 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e279      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f0:	4b5a      	ldr	r3, [pc, #360]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d03c      	beq.n	8002782 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01c      	beq.n	800274a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002710:	4b52      	ldr	r3, [pc, #328]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002716:	4a51      	ldr	r2, [pc, #324]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002718:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800271c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7ff fb30 	bl	8001d84 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002728:	f7ff fb2c 	bl	8001d84 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e254      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800273a:	4b48      	ldr	r3, [pc, #288]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800273c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <HAL_RCC_OscConfig+0x3a8>
 8002748:	e01b      	b.n	8002782 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b44      	ldr	r3, [pc, #272]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800274c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002750:	4a42      	ldr	r2, [pc, #264]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002752:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff fb13 	bl	8001d84 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002762:	f7ff fb0f 	bl	8001d84 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e237      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002774:	4b39      	ldr	r3, [pc, #228]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800277a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ef      	bne.n	8002762 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80d2 	beq.w	8002934 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x4e4>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d118      	bne.n	80027ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800279c:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCC_OscConfig+0x4e4>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <HAL_RCC_OscConfig+0x4e4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a8:	f7ff faec 	bl	8001d84 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7ff fae8 	bl	8001d84 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e210      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027c2:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCC_OscConfig+0x4e4>)
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x468>
 80027d6:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80027d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027dc:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027e6:	e074      	b.n	80028d2 <HAL_RCC_OscConfig+0x552>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d118      	bne.n	8002822 <HAL_RCC_OscConfig+0x4a2>
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f6:	4a19      	ldr	r2, [pc, #100]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002800:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800280c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002816:	4a11      	ldr	r2, [pc, #68]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002820:	e057      	b.n	80028d2 <HAL_RCC_OscConfig+0x552>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d11e      	bne.n	8002868 <HAL_RCC_OscConfig+0x4e8>
 800282a:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800283c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002840:	4a06      	ldr	r2, [pc, #24]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800284a:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002850:	4a02      	ldr	r2, [pc, #8]	@ (800285c <HAL_RCC_OscConfig+0x4dc>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800285a:	e03a      	b.n	80028d2 <HAL_RCC_OscConfig+0x552>
 800285c:	44020c00 	.word	0x44020c00
 8002860:	20000004 	.word	0x20000004
 8002864:	44020800 	.word	0x44020800
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b85      	cmp	r3, #133	@ 0x85
 800286e:	d118      	bne.n	80028a2 <HAL_RCC_OscConfig+0x522>
 8002870:	4ba2      	ldr	r3, [pc, #648]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002876:	4aa1      	ldr	r2, [pc, #644]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002880:	4b9e      	ldr	r3, [pc, #632]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002886:	4a9d      	ldr	r2, [pc, #628]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800288c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002890:	4b9a      	ldr	r3, [pc, #616]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002896:	4a99      	ldr	r2, [pc, #612]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a0:	e017      	b.n	80028d2 <HAL_RCC_OscConfig+0x552>
 80028a2:	4b96      	ldr	r3, [pc, #600]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a8:	4a94      	ldr	r2, [pc, #592]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028b2:	4b92      	ldr	r3, [pc, #584]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b8:	4a90      	ldr	r2, [pc, #576]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c2:	4b8e      	ldr	r3, [pc, #568]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c8:	4a8c      	ldr	r2, [pc, #560]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7ff fa53 	bl	8001d84 <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7ff fa4f 	bl	8001d84 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e175      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f8:	4b80      	ldr	r3, [pc, #512]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80028fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ed      	beq.n	80028e2 <HAL_RCC_OscConfig+0x562>
 8002906:	e015      	b.n	8002934 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7ff fa3c 	bl	8001d84 <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7ff fa38 	bl	8001d84 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e15e      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002926:	4b75      	ldr	r3, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ed      	bne.n	8002910 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d036      	beq.n	80029ae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002948:	4b6c      	ldr	r3, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6b      	ldr	r2, [pc, #428]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 800294e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7ff fa16 	bl	8001d84 <HAL_GetTick>
 8002958:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800295c:	f7ff fa12 	bl	8001d84 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e13a      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800296e:	4b63      	ldr	r3, [pc, #396]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x5dc>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800297c:	4b5f      	ldr	r3, [pc, #380]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a5e      	ldr	r2, [pc, #376]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7ff f9fc 	bl	8001d84 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002990:	f7ff f9f8 	bl	8001d84 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e120      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029a2:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8115 	beq.w	8002be2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	f000 80af 	beq.w	8002b1e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	f040 8086 	bne.w	8002ad6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029ca:	4b4c      	ldr	r3, [pc, #304]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4b      	ldr	r2, [pc, #300]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80029d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7ff f9d5 	bl	8001d84 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029de:	f7ff f9d1 	bl	8001d84 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0f9      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029f0:	4b42      	ldr	r3, [pc, #264]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80029fc:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a10:	0212      	lsls	r2, r2, #8
 8002a12:	430a      	orrs	r2, r1
 8002a14:	4939      	ldr	r1, [pc, #228]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	3b01      	subs	r3, #1
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a4a:	492c      	ldr	r1, [pc, #176]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a56:	f023 0310 	bic.w	r3, r3, #16
 8002a5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a60:	4a26      	ldr	r2, [pc, #152]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	4a24      	ldr	r2, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002a72:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	f023 020c 	bic.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	491f      	ldr	r1, [pc, #124]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	f023 0220 	bic.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a90:	491a      	ldr	r1, [pc, #104]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7ff f969 	bl	8001d84 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff f965 	bl	8001d84 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e08d      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x736>
 8002ad4:	e085      	b.n	8002be2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002ad6:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a08      	ldr	r2, [pc, #32]	@ (8002afc <HAL_RCC_OscConfig+0x77c>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f94f 	bl	8001d84 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f94b 	bl	8001d84 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d903      	bls.n	8002b00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e073      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
 8002afc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b00:	4b3a      	ldr	r3, [pc, #232]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ee      	bne.n	8002aea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b0c:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	4a36      	ldr	r2, [pc, #216]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	6293      	str	r3, [r2, #40]	@ 0x28
 8002b1c:	e061      	b.n	8002be2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b1e:	4b33      	ldr	r3, [pc, #204]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d031      	beq.n	8002b96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d12a      	bne.n	8002b96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d122      	bne.n	8002b96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d11a      	bne.n	8002b96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	0a5b      	lsrs	r3, r3, #9
 8002b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d111      	bne.n	8002b96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d108      	bne.n	8002b96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	0e1b      	lsrs	r3, r3, #24
 8002b88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e024      	b.n	8002be4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d01a      	beq.n	8002be2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002bb2:	f023 0310 	bic.w	r3, r3, #16
 8002bb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f8e4 	bl	8001d84 <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff f8e0 	bl	8001d84 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d0f9      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_RCC_OscConfig+0x86c>)
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	44020c00 	.word	0x44020c00

08002bf0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e19e      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_ClockConfig+0x224>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b80      	ldr	r3, [pc, #512]	@ (8002e14 <HAL_RCC_ClockConfig+0x224>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 020f 	bic.w	r2, r3, #15
 8002c1a:	497e      	ldr	r1, [pc, #504]	@ (8002e14 <HAL_RCC_ClockConfig+0x224>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b7c      	ldr	r3, [pc, #496]	@ (8002e14 <HAL_RCC_ClockConfig+0x224>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e186      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d909      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c52:	4b71      	ldr	r3, [pc, #452]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	496d      	ldr	r1, [pc, #436]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d909      	bls.n	8002c98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4961      	ldr	r1, [pc, #388]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002cb4:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4955      	ldr	r1, [pc, #340]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	4b50      	ldr	r3, [pc, #320]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	494a      	ldr	r1, [pc, #296]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8093 	beq.w	8002e28 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d0a:	4b43      	ldr	r3, [pc, #268]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e113      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d22:	4b3d      	ldr	r3, [pc, #244]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e107      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0fb      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4a:	4b33      	ldr	r3, [pc, #204]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0f3      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	492c      	ldr	r1, [pc, #176]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f80a 	bl	8001d84 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7ff f802 	bl	8001d84 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0d7      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d92:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0318 	and.w	r3, r3, #24
 8002d9a:	2b18      	cmp	r3, #24
 8002d9c:	d1ee      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x18c>
 8002d9e:	e043      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d112      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002daa:	f7fe ffeb 	bl	8001d84 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0c0      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0318 	and.w	r3, r3, #24
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d1ee      	bne.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
 8002dcc:	e02c      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d122      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe ffd4 	bl	8001d84 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0a9      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x228>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0318 	and.w	r3, r3, #24
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x1e8>
 8002dfa:	e015      	b.n	8002e28 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe ffc2 	bl	8001d84 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d906      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e097      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000
 8002e18:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 0318 	and.w	r3, r3, #24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e9      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b44      	ldr	r3, [pc, #272]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e44:	4b41      	ldr	r3, [pc, #260]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 020f 	bic.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	493e      	ldr	r1, [pc, #248]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e56:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <HAL_RCC_ClockConfig+0x360>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d210      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCC_ClockConfig+0x360>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 020f 	bic.w	r2, r3, #15
 8002e6c:	4938      	ldr	r1, [pc, #224]	@ (8002f50 <HAL_RCC_ClockConfig+0x360>)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_ClockConfig+0x360>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e05d      	b.n	8002f42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d208      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4927      	ldr	r1, [pc, #156]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d209      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	491a      	ldr	r1, [pc, #104]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d209      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f18:	f000 f822 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490b      	ldr	r1, [pc, #44]	@ (8002f54 <HAL_RCC_ClockConfig+0x364>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <HAL_RCC_ClockConfig+0x368>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_RCC_ClockConfig+0x36c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fe9a 	bl	8001c70 <HAL_InitTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002f40:	7afb      	ldrb	r3, [r7, #11]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	44020c00 	.word	0x44020c00
 8002f50:	40022000 	.word	0x40022000
 8002f54:	0800c3e8 	.word	0x0800c3e8
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f66:	4b8c      	ldr	r3, [pc, #560]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0318 	and.w	r3, r3, #24
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f72:	4b8a      	ldr	r3, [pc, #552]	@ (800319c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e107      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f78:	4b87      	ldr	r3, [pc, #540]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 0318 	and.w	r3, r3, #24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002f84:	4b84      	ldr	r3, [pc, #528]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f90:	4b81      	ldr	r3, [pc, #516]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	4a81      	ldr	r2, [pc, #516]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e0f1      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	e0ee      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002faa:	4b7b      	ldr	r3, [pc, #492]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0318 	and.w	r3, r3, #24
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x244>)
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e0e5      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b76      	ldr	r3, [pc, #472]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 0318 	and.w	r3, r3, #24
 8002fc4:	2b18      	cmp	r3, #24
 8002fc6:	f040 80dd 	bne.w	8003184 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002fca:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002fd4:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002fe0:	4b6d      	ldr	r3, [pc, #436]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002fec:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	ee07 3a90 	vmov	s15, r3
 8003000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003004:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80b7 	beq.w	800317e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0xbe>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d056      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x16a>
 800301c:	e077      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800301e:	4b5e      	ldr	r3, [pc, #376]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02d      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800302a:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	08db      	lsrs	r3, r3, #3
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	4a5a      	ldr	r2, [pc, #360]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003054:	4b50      	ldr	r3, [pc, #320]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003064:	ed97 6a02 	vldr	s12, [r7, #8]
 8003068:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x248>
 800306c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003070:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003078:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800307c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003080:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003084:	e065      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80031ac <HAL_RCC_GetSysClockFreq+0x24c>
 8003094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003098:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x248>
 80030b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80030c8:	e043      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x250>
 80030d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x248>
 80030f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003100:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003108:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800310c:	e021      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003118:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031b4 <HAL_RCC_GetSysClockFreq+0x254>
 800311c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003120:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003130:	ed97 6a02 	vldr	s12, [r7, #8]
 8003134:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003138:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800313c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003144:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003150:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x238>)
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	0a5b      	lsrs	r3, r3, #9
 8003158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800315c:	3301      	adds	r3, #1
 800315e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800316a:	edd7 6a06 	vldr	s13, [r7, #24]
 800316e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003176:	ee17 3a90 	vmov	r3, s15
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e004      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e001      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003186:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003188:	69fb      	ldr	r3, [r7, #28]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	44020c00 	.word	0x44020c00
 800319c:	003d0900 	.word	0x003d0900
 80031a0:	03d09000 	.word	0x03d09000
 80031a4:	007a1200 	.word	0x007a1200
 80031a8:	46000000 	.word	0x46000000
 80031ac:	4c742400 	.word	0x4c742400
 80031b0:	4af42400 	.word	0x4af42400
 80031b4:	4a742400 	.word	0x4a742400

080031b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031bc:	f7ff fed0 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031ca:	4907      	ldr	r1, [pc, #28]	@ (80031e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80031ce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <HAL_RCC_GetHCLKFreq+0x34>)
 80031d8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <HAL_RCC_GetHCLKFreq+0x34>)
 80031dc:	681b      	ldr	r3, [r3, #0]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	44020c00 	.word	0x44020c00
 80031e8:	0800c3e8 	.word	0x0800c3e8
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80031f4:	f7ff ffe0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4904      	ldr	r1, [pc, #16]	@ (8003218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	44020c00 	.word	0x44020c00
 8003218:	0800c3f8 	.word	0x0800c3f8

0800321c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003220:	f7ff ffca 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4904      	ldr	r1, [pc, #16]	@ (8003244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	44020c00 	.word	0x44020c00
 8003244:	0800c3f8 	.word	0x0800c3f8

08003248 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800324c:	f7ff ffb4 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	0b1b      	lsrs	r3, r3, #12
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4904      	ldr	r1, [pc, #16]	@ (8003270 <HAL_RCC_GetPCLK3Freq+0x28>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	44020c00 	.word	0x44020c00
 8003270:	0800c3f8 	.word	0x0800c3f8

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b0d8      	sub	sp, #352	@ 0x160
 800327a:	af00      	add	r7, sp, #0
 800327c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003286:	2300      	movs	r3, #0
 8003288:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800328c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003298:	2500      	movs	r5, #0
 800329a:	ea54 0305 	orrs.w	r3, r4, r5
 800329e:	d00b      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80032a0:	4bcd      	ldr	r3, [pc, #820]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032a6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80032aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	4ac9      	ldr	r2, [pc, #804]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032b2:	430b      	orrs	r3, r1
 80032b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f002 0801 	and.w	r8, r2, #1
 80032c4:	f04f 0900 	mov.w	r9, #0
 80032c8:	ea58 0309 	orrs.w	r3, r8, r9
 80032cc:	d042      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80032ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d823      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003329 	.word	0x08003329
 80032e4:	080032f9 	.word	0x080032f9
 80032e8:	0800330d 	.word	0x0800330d
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003329 	.word	0x08003329
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032fc:	3308      	adds	r3, #8
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 feda 	bl	80080b8 <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800330a:	e00e      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800330c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003310:	3330      	adds	r3, #48	@ 0x30
 8003312:	4618      	mov	r0, r3
 8003314:	f004 ff68 	bl	80081e8 <RCCEx_PLL3_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800331e:	e004      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003332:	4ba9      	ldr	r3, [pc, #676]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003338:	f023 0107 	bic.w	r1, r3, #7
 800333c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	4aa5      	ldr	r2, [pc, #660]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003344:	430b      	orrs	r3, r1
 8003346:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800334a:	e003      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003350:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f002 0a02 	and.w	sl, r2, #2
 8003360:	f04f 0b00 	mov.w	fp, #0
 8003364:	ea5a 030b 	orrs.w	r3, sl, fp
 8003368:	f000 8088 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800336c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	2b28      	cmp	r3, #40	@ 0x28
 8003374:	d868      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003376:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	08003451 	.word	0x08003451
 8003380:	08003449 	.word	0x08003449
 8003384:	08003449 	.word	0x08003449
 8003388:	08003449 	.word	0x08003449
 800338c:	08003449 	.word	0x08003449
 8003390:	08003449 	.word	0x08003449
 8003394:	08003449 	.word	0x08003449
 8003398:	08003449 	.word	0x08003449
 800339c:	08003421 	.word	0x08003421
 80033a0:	08003449 	.word	0x08003449
 80033a4:	08003449 	.word	0x08003449
 80033a8:	08003449 	.word	0x08003449
 80033ac:	08003449 	.word	0x08003449
 80033b0:	08003449 	.word	0x08003449
 80033b4:	08003449 	.word	0x08003449
 80033b8:	08003449 	.word	0x08003449
 80033bc:	08003435 	.word	0x08003435
 80033c0:	08003449 	.word	0x08003449
 80033c4:	08003449 	.word	0x08003449
 80033c8:	08003449 	.word	0x08003449
 80033cc:	08003449 	.word	0x08003449
 80033d0:	08003449 	.word	0x08003449
 80033d4:	08003449 	.word	0x08003449
 80033d8:	08003449 	.word	0x08003449
 80033dc:	08003451 	.word	0x08003451
 80033e0:	08003449 	.word	0x08003449
 80033e4:	08003449 	.word	0x08003449
 80033e8:	08003449 	.word	0x08003449
 80033ec:	08003449 	.word	0x08003449
 80033f0:	08003449 	.word	0x08003449
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003449 	.word	0x08003449
 80033fc:	08003451 	.word	0x08003451
 8003400:	08003449 	.word	0x08003449
 8003404:	08003449 	.word	0x08003449
 8003408:	08003449 	.word	0x08003449
 800340c:	08003449 	.word	0x08003449
 8003410:	08003449 	.word	0x08003449
 8003414:	08003449 	.word	0x08003449
 8003418:	08003449 	.word	0x08003449
 800341c:	08003451 	.word	0x08003451
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003420:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003424:	3308      	adds	r3, #8
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fe46 	bl	80080b8 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003432:	e00e      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003438:	3330      	adds	r3, #48	@ 0x30
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fed4 	bl	80081e8 <RCCEx_PLL3_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800345a:	4b5f      	ldr	r3, [pc, #380]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800345c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003460:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800346c:	430b      	orrs	r3, r1
 800346e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003472:	e003      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003478:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f002 0304 	and.w	r3, r2, #4
 8003488:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003492:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003496:	460b      	mov	r3, r1
 8003498:	4313      	orrs	r3, r2
 800349a:	d04e      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800349c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034a6:	d02c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80034a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034ac:	d825      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b2:	d028      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b8:	d81f      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80034ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80034bc:	d025      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80034be:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c0:	d81b      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80034c2:	2b80      	cmp	r3, #128	@ 0x80
 80034c4:	d00f      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d817      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d113      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034d6:	3308      	adds	r3, #8
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fded 	bl	80080b8 <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80034e4:	e014      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034ea:	3330      	adds	r3, #48	@ 0x30
 80034ec:	4618      	mov	r0, r3
 80034ee:	f004 fe7b 	bl	80081e8 <RCCEx_PLL3_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80034f8:	e00a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003502:	bf00      	nop
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003518:	4b2f      	ldr	r3, [pc, #188]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800351a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800351e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003522:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800352a:	430b      	orrs	r3, r1
 800352c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003536:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800353a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f002 0308 	and.w	r3, r2, #8
 8003546:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003550:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	d056      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800355a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800355e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003560:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003564:	d031      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003566:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800356a:	d82a      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003570:	d02d      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003576:	d824      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003578:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800357c:	d029      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800357e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003582:	d81e      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d011      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358e:	d818      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d023      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003598:	d113      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800359a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800359e:	3308      	adds	r3, #8
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fd89 	bl	80080b8 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80035ac:	e017      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b2:	3330      	adds	r3, #48	@ 0x30
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 fe17 	bl	80081e8 <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80035c0:	e00d      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035c8:	e009      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80035ca:	bf00      	nop
 80035cc:	e007      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80035ce:	bf00      	nop
 80035d0:	e005      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80035d2:	bf00      	nop
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80035d6:	bf00      	nop
 80035d8:	44020c00 	.word	0x44020c00
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80035e6:	4bbb      	ldr	r3, [pc, #748]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80035f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f6:	4ab7      	ldr	r2, [pc, #732]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003604:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f002 0310 	and.w	r3, r2, #16
 8003614:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800361e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d053      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003632:	d031      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003634:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003638:	d82a      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800363a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363e:	d02d      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003644:	d824      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003646:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800364a:	d029      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800364c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003650:	d81e      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003656:	d011      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365c:	d818      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d020      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003666:	d113      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800366c:	3308      	adds	r3, #8
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fd22 	bl	80080b8 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800367a:	e014      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800367c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003680:	3330      	adds	r3, #48	@ 0x30
 8003682:	4618      	mov	r0, r3
 8003684:	f004 fdb0 	bl	80081e8 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800368e:	e00a      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003696:	e006      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80036ae:	4b89      	ldr	r3, [pc, #548]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80036b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036be:	4a85      	ldr	r2, [pc, #532]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036c6:	e003      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 0320 	and.w	r3, r2, #32
 80036dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80036e6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d053      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80036f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80036fa:	d031      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80036fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003700:	d82a      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003706:	d02d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800370c:	d824      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800370e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003712:	d029      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003714:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003718:	d81e      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371e:	d011      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003724:	d818      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d020      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800372a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372e:	d113      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003734:	3308      	adds	r3, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f004 fcbe 	bl	80080b8 <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003742:	e014      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003748:	3330      	adds	r3, #48	@ 0x30
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fd4c 	bl	80081e8 <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003756:	e00a      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003760:	bf00      	nop
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003764:	bf00      	nop
 8003766:	e002      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003776:	4b57      	ldr	r3, [pc, #348]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800377c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	4a53      	ldr	r2, [pc, #332]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003788:	430b      	orrs	r3, r1
 800378a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800378e:	e003      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003794:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80037a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80037ae:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80037b2:	460b      	mov	r3, r1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	d053      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80037c2:	d031      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80037c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80037c8:	d82a      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d02d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d4:	d824      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037da:	d029      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80037dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037e0:	d81e      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037e6:	d011      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80037e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037ec:	d818      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f6:	d113      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037fc:	3308      	adds	r3, #8
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fc5a 	bl	80080b8 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800380a:	e014      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003810:	3330      	adds	r3, #48	@ 0x30
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fce8 	bl	80081e8 <RCCEx_PLL3_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800381e:	e00a      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003828:	bf00      	nop
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800382c:	bf00      	nop
 800382e:	e002      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800383e:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003844:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	4a21      	ldr	r2, [pc, #132]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003850:	430b      	orrs	r3, r1
 8003852:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800385c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800386c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003876:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d055      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003886:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800388a:	d033      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800388c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003890:	d82c      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003892:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800389c:	d826      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 800389e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038a2:	d02b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80038a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038a8:	d820      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80038aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ae:	d013      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b4:	d81a      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80038ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038be:	d115      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c4:	3308      	adds	r3, #8
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fbf6 	bl	80080b8 <RCCEx_PLL2_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80038d2:	e016      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80038d4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038dc:	3330      	adds	r3, #48	@ 0x30
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fc82 	bl	80081e8 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80038ea:	e00a      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800390a:	4bbb      	ldr	r3, [pc, #748]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800390c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003910:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800391a:	4ab7      	ldr	r2, [pc, #732]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800391c:	430b      	orrs	r3, r1
 800391e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003928:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800392c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003938:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003942:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d053      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800394c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003952:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003956:	d031      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003958:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800395c:	d82a      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800395e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003962:	d02d      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003968:	d824      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800396a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800396e:	d029      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003970:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003974:	d81e      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800397a:	d011      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800397c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003980:	d818      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800398a:	d113      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800398c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003990:	3308      	adds	r3, #8
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fb90 	bl	80080b8 <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800399e:	e014      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039a4:	3330      	adds	r3, #48	@ 0x30
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fc1e 	bl	80081e8 <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80039b2:	e00a      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80039d2:	4b89      	ldr	r3, [pc, #548]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039e2:	4a85      	ldr	r2, [pc, #532]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80039f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003a00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a0a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d055      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003a20:	d031      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003a22:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003a26:	d82a      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a2c:	d02d      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a32:	d824      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a34:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003a38:	d029      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003a3a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003a3e:	d81e      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a44:	d011      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a4a:	d818      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a54:	d113      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f004 fb2b 	bl	80080b8 <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a68:	e014      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a6e:	3330      	adds	r3, #48	@ 0x30
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fbb9 	bl	80081e8 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a86:	bf00      	nop
 8003a88:	e004      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003a9c:	4b56      	ldr	r3, [pc, #344]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003aa2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aae:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ab6:	e003      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003abc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003acc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ad6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d044      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d823      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b0d 	.word	0x08003b0d
 8003afc:	08003b21 	.word	0x08003b21
 8003b00:	08003b3d 	.word	0x08003b3d
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b3d 	.word	0x08003b3d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b10:	3308      	adds	r3, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 fad0 	bl	80080b8 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003b1e:	e00e      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b24:	3330      	adds	r3, #48	@ 0x30
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 fb5e 	bl	80081e8 <RCCEx_PLL3_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003b32:	e004      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003b46:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b4c:	f023 0107 	bic.w	r1, r3, #7
 8003b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b80:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b84:	460b      	mov	r3, r1
 8003b86:	4313      	orrs	r3, r2
 8003b88:	d04f      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	2b50      	cmp	r3, #80	@ 0x50
 8003b94:	d029      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003b96:	2b50      	cmp	r3, #80	@ 0x50
 8003b98:	d823      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d027      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	d81f      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ba2:	2b30      	cmp	r3, #48	@ 0x30
 8003ba4:	d025      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003ba6:	2b30      	cmp	r3, #48	@ 0x30
 8003ba8:	d81b      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d00f      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d817      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d022      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d113      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fa79 	bl	80080b8 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003bcc:	e017      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd2:	3330      	adds	r3, #48	@ 0x30
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f004 fb07 	bl	80081e8 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003be0:	e00d      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003be8:	e009      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003bea:	bf00      	nop
 8003bec:	e007      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e005      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e003      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003bf6:	bf00      	nop
 8003bf8:	44020c00 	.word	0x44020c00
        break;
 8003bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003c06:	4baf      	ldr	r3, [pc, #700]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c0c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	4aaa      	ldr	r2, [pc, #680]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d055      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003c4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c56:	d031      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003c58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c5c:	d82a      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c62:	d02d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003c64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c68:	d824      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c6e:	d029      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003c70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c74:	d81e      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c7a:	d011      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003c7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c80:	d818      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d020      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c8a:	d113      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c90:	3308      	adds	r3, #8
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fa10 	bl	80080b8 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c9e:	e014      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca4:	3330      	adds	r3, #48	@ 0x30
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fa9e 	bl	80081e8 <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003cb2:	e00a      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cba:	e006      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003cbc:	bf00      	nop
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce4:	4a77      	ldr	r2, [pc, #476]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cf2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d10:	460b      	mov	r3, r1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	d03d      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d22:	d01b      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003d24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d28:	d814      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d2e:	d017      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d34:	d80e      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d44:	3330      	adds	r3, #48	@ 0x30
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 fa4e 	bl	80081e8 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003d52:	e008      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003d6e:	4b55      	ldr	r3, [pc, #340]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d74:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	4a50      	ldr	r2, [pc, #320]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003da8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d03d      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dbe:	d01b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003dc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dc4:	d814      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003dc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dca:	d017      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003dcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dd0:	d80e      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d014      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dda:	d109      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003de0:	3330      	adds	r3, #48	@ 0x30
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fa00 	bl	80081e8 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003df8:	bf00      	nop
 8003dfa:	e002      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10d      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e10:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1c:	4a29      	ldr	r2, [pc, #164]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	d040      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e5a:	d01b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e60:	d814      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e66:	d017      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e6c:	d80e      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d014      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e7c:	3330      	adds	r3, #48	@ 0x30
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 f9b2 	bl	80081e8 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d110      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003ea6:	4b07      	ldr	r3, [pc, #28]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ea8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	4a02      	ldr	r2, [pc, #8]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003ec2:	bf00      	nop
 8003ec4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ecc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ee6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d03d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ef8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003efc:	d01b      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003efe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f02:	d814      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f08:	d017      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003f0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f0e:	d80e      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d014      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f18:	d109      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f1e:	3330      	adds	r3, #48	@ 0x30
 8003f20:	4618      	mov	r0, r3
 8003f22:	f004 f961 	bl	80081e8 <RCCEx_PLL3_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f48:	4bbe      	ldr	r3, [pc, #760]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f4e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f5a:	4aba      	ldr	r2, [pc, #744]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d035      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f98:	d015      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003f9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f9e:	d80e      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa8:	d109      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fae:	3330      	adds	r3, #48	@ 0x30
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f004 f919 	bl	80081e8 <RCCEx_PLL3_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fda:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fe6:	4a97      	ldr	r2, [pc, #604]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ff4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	2100      	movs	r1, #0
 8004002:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8004006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800400e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004012:	460b      	mov	r3, r1
 8004014:	4313      	orrs	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004018:	4b8a      	ldr	r3, [pc, #552]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	4a89      	ldr	r2, [pc, #548]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800401e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004022:	61d3      	str	r3, [r2, #28]
 8004024:	4b87      	ldr	r3, [pc, #540]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800402c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004030:	4a84      	ldr	r2, [pc, #528]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004032:	430b      	orrs	r3, r1
 8004034:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800404c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004050:	460b      	mov	r3, r1
 8004052:	4313      	orrs	r3, r2
 8004054:	d055      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004056:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800405a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800405e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004062:	d031      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004064:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004068:	d82a      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d02d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004074:	d824      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800407a:	d029      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800407c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004080:	d81e      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004086:	d011      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800408c:	d818      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d020      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d113      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800409c:	3308      	adds	r3, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f004 f80a 	bl	80080b8 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80040aa:	e014      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b0:	3330      	adds	r3, #48	@ 0x30
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 f898 	bl	80081e8 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80040be:	e00a      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040c6:	e006      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80040c8:	bf00      	nop
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80040cc:	bf00      	nop
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80040de:	4b59      	ldr	r3, [pc, #356]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80040e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040f0:	4a54      	ldr	r2, [pc, #336]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004118:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d055      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800412a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800412e:	d031      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004130:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004134:	d82a      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800413a:	d02d      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004140:	d824      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004142:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004146:	d029      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800414c:	d81e      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004152:	d011      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004158:	d818      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004162:	d113      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004168:	3308      	adds	r3, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f003 ffa4 	bl	80080b8 <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004176:	e014      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800417c:	3330      	adds	r3, #48	@ 0x30
 800417e:	4618      	mov	r0, r3
 8004180:	f004 f832 	bl	80081e8 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800418a:	e00a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004192:	e006      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004194:	bf00      	nop
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80041aa:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80041ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041bc:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80041ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	2100      	movs	r1, #0
 80041d8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d057      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80041ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041fa:	d033      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004200:	d82c      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004206:	d02f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004208:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800420c:	d826      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800420e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004212:	d02b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004214:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004218:	d820      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800421a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800421e:	d013      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004224:	d81a      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d022      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422e:	d115      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004234:	3308      	adds	r3, #8
 8004236:	4618      	mov	r0, r3
 8004238:	f003 ff3e 	bl	80080b8 <RCCEx_PLL2_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004242:	e016      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004244:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800424c:	3330      	adds	r3, #48	@ 0x30
 800424e:	4618      	mov	r0, r3
 8004250:	f003 ffca 	bl	80081e8 <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800425a:	e00a      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004262:	e006      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004264:	bf00      	nop
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004272:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800427a:	4bbb      	ldr	r3, [pc, #748]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800427c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004280:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004288:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800428c:	4ab6      	ldr	r2, [pc, #728]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800428e:	430b      	orrs	r3, r1
 8004290:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800429a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800429e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	2100      	movs	r1, #0
 80042a8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d055      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80042be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042c6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80042ca:	d031      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80042cc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80042d0:	d82a      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d6:	d02d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80042d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042dc:	d824      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042e2:	d029      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80042e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042e8:	d81e      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ee:	d011      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80042f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f4:	d818      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fe:	d113      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004304:	3308      	adds	r3, #8
 8004306:	4618      	mov	r0, r3
 8004308:	f003 fed6 	bl	80080b8 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004312:	e014      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004318:	3330      	adds	r3, #48	@ 0x30
 800431a:	4618      	mov	r0, r3
 800431c:	f003 ff64 	bl	80081e8 <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004326:	e00a      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800432e:	e006      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004330:	bf00      	nop
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004348:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800434c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004358:	4a83      	ldr	r2, [pc, #524]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800435a:	430b      	orrs	r3, r1
 800435c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004362:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004366:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800436a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	2100      	movs	r1, #0
 8004374:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004380:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d055      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800438a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800438e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004392:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004396:	d031      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004398:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800439c:	d82a      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800439e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a2:	d02d      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a8:	d824      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80043aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043ae:	d029      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80043b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043b4:	d81e      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80043b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ba:	d011      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80043bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043c0:	d818      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d020      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80043c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ca:	d113      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043d0:	3308      	adds	r3, #8
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 fe70 	bl	80080b8 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80043de:	e014      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e4:	3330      	adds	r3, #48	@ 0x30
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fefe 	bl	80081e8 <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80043f2:	e00a      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043fa:	e006      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043fc:	bf00      	nop
 80043fe:	e004      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004412:	4b55      	ldr	r3, [pc, #340]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004414:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004418:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800441c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004424:	4a50      	ldr	r2, [pc, #320]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004426:	430b      	orrs	r3, r1
 8004428:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004432:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	2100      	movs	r1, #0
 8004440:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800444c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d055      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800445a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800445e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004462:	d031      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004468:	d82a      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446e:	d02d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d824      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800447a:	d029      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800447c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004480:	d81e      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004486:	d011      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448c:	d818      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004496:	d113      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800449c:	3308      	adds	r3, #8
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 fe0a 	bl	80080b8 <RCCEx_PLL2_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80044aa:	e014      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b0:	3330      	adds	r3, #48	@ 0x30
 80044b2:	4618      	mov	r0, r3
 80044b4:	f003 fe98 	bl	80081e8 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80044be:	e00a      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044c6:	e006      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80044c8:	bf00      	nop
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80044cc:	bf00      	nop
 80044ce:	e002      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80044d0:	bf00      	nop
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80044de:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80044e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80044e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80044f2:	430b      	orrs	r3, r1
 80044f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004502:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800450e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004518:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d055      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004522:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004526:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800452a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800452e:	d035      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004534:	d82e      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004536:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800453a:	d031      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800453c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004540:	d828      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004546:	d01b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800454c:	d822      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004556:	d009      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004558:	e01c      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455a:	4b03      	ldr	r3, [pc, #12]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	4a02      	ldr	r2, [pc, #8]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004564:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004566:	e01c      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004568:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800456c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004570:	3308      	adds	r3, #8
 8004572:	4618      	mov	r0, r3
 8004574:	f003 fda0 	bl	80080b8 <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800457e:	e010      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004584:	3330      	adds	r3, #48	@ 0x30
 8004586:	4618      	mov	r0, r3
 8004588:	f003 fe2e 	bl	80081e8 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004592:	e006      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800459a:	e002      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80045aa:	4bc3      	ldr	r3, [pc, #780]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80045b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045bc:	4abe      	ldr	r2, [pc, #760]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045be:	430b      	orrs	r3, r1
 80045c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80045ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d051      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80045ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045fa:	d033      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80045fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004600:	d82c      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004602:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004606:	d02d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004608:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800460c:	d826      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800460e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004618:	d820      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800461e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004622:	d007      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004624:	e01a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004626:	4ba4      	ldr	r3, [pc, #656]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	4aa3      	ldr	r2, [pc, #652]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800462c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004630:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004632:	e018      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004638:	3308      	adds	r3, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f003 fd3c 	bl	80080b8 <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004646:	e00e      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800464c:	3330      	adds	r3, #48	@ 0x30
 800464e:	4618      	mov	r0, r3
 8004650:	f003 fdca 	bl	80081e8 <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800466e:	4b92      	ldr	r3, [pc, #584]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004674:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800467c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004680:	4a8d      	ldr	r2, [pc, #564]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004682:	430b      	orrs	r3, r1
 8004684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800468e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800469e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a0:	2300      	movs	r3, #0
 80046a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d032      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80046ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d80f      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d211      	bcs.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d911      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d109      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ca:	3308      	adds	r3, #8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fcf3 	bl	80080b8 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80046e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80046f0:	4b71      	ldr	r3, [pc, #452]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046f6:	f023 0107 	bic.w	r1, r3, #7
 80046fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004702:	4a6d      	ldr	r2, [pc, #436]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004704:	430b      	orrs	r3, r1
 8004706:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	2100      	movs	r1, #0
 800471e:	6739      	str	r1, [r7, #112]	@ 0x70
 8004720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004724:	677b      	str	r3, [r7, #116]	@ 0x74
 8004726:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d024      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800473c:	2b08      	cmp	r3, #8
 800473e:	d005      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004756:	4b58      	ldr	r3, [pc, #352]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800475c:	f023 0108 	bic.w	r1, r3, #8
 8004760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004768:	4a53      	ldr	r2, [pc, #332]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004776:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800477a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004786:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004788:	2300      	movs	r3, #0
 800478a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800478c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004790:	460b      	mov	r3, r1
 8004792:	4313      	orrs	r3, r2
 8004794:	f000 80b9 	beq.w	800490a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004798:	4b48      	ldr	r3, [pc, #288]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	4a47      	ldr	r2, [pc, #284]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047a4:	f7fd faee 	bl	8001d84 <HAL_GetTick>
 80047a8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80047ac:	e00b      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fd fae9 	bl	8001d84 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d903      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80047c6:	4b3d      	ldr	r3, [pc, #244]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ed      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80047d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8093 	bne.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047dc:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80047ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d023      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80047f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80047fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01b      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004802:	4b2d      	ldr	r3, [pc, #180]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004810:	4b29      	ldr	r3, [pc, #164]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004816:	4a28      	ldr	r2, [pc, #160]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004820:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004826:	4a24      	ldr	r2, [pc, #144]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004830:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004832:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800483a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d019      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fa9d 	bl	8001d84 <HAL_GetTick>
 800484a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484e:	e00d      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004850:	f7fd fa98 	bl	8001d84 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004860:	429a      	cmp	r2, r3
 8004862:	d903      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800486a:	e006      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800486e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ea      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800487a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13a      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004886:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800488a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004892:	d115      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004894:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80048ae:	4a02      	ldr	r2, [pc, #8]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	61d3      	str	r3, [r2, #28]
 80048b4:	e00a      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80048b6:	bf00      	nop
 80048b8:	44020c00 	.word	0x44020c00
 80048bc:	44020800 	.word	0x44020800
 80048c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4a9e      	ldr	r2, [pc, #632]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048ca:	61d3      	str	r3, [r2, #28]
 80048cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d2:	4a9b      	ldr	r2, [pc, #620]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048dc:	4b98      	ldr	r3, [pc, #608]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048de:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80048e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80048ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ee:	4a94      	ldr	r2, [pc, #592]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048f6:	e008      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004906:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800490a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004916:	663b      	str	r3, [r7, #96]	@ 0x60
 8004918:	2300      	movs	r3, #0
 800491a:	667b      	str	r3, [r7, #100]	@ 0x64
 800491c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d035      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800492a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800492e:	2b30      	cmp	r3, #48	@ 0x30
 8004930:	d014      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004932:	2b30      	cmp	r3, #48	@ 0x30
 8004934:	d80e      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004936:	2b20      	cmp	r3, #32
 8004938:	d012      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800493a:	2b20      	cmp	r3, #32
 800493c:	d80a      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004942:	2b10      	cmp	r3, #16
 8004944:	d106      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004946:	4b7e      	ldr	r3, [pc, #504]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800494c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004950:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800495a:	e004      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800495c:	bf00      	nop
 800495e:	e002      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004960:	bf00      	nop
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004966:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800496e:	4b74      	ldr	r3, [pc, #464]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004974:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800497c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004980:	4a6f      	ldr	r2, [pc, #444]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800498e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800499e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049a0:	2300      	movs	r3, #0
 80049a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d033      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80049ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80049ba:	2b40      	cmp	r3, #64	@ 0x40
 80049bc:	d007      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80049be:	e010      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80049cc:	e00d      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049d2:	3308      	adds	r3, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f003 fb6f 	bl	80080b8 <RCCEx_PLL2_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80049f2:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049f8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80049fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a00:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004a04:	4a4e      	ldr	r2, [pc, #312]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a0c:	e003      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a24:	2300      	movs	r3, #0
 8004a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a28:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d033      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a36:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004a3e:	2b80      	cmp	r3, #128	@ 0x80
 8004a40:	d007      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004a42:	e010      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b3e      	ldr	r3, [pc, #248]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	4a3d      	ldr	r2, [pc, #244]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004a50:	e00d      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a56:	3308      	adds	r3, #8
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fb2d 	bl	80080b8 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004a64:	e003      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004a76:	4b32      	ldr	r3, [pc, #200]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a7c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a88:	4a2d      	ldr	r2, [pc, #180]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d04a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d827      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004add 	.word	0x08004add
 8004acc:	08004aeb 	.word	0x08004aeb
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004b1b 	.word	0x08004b1b
 8004ad8:	08004b1b 	.word	0x08004b1b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004adc:	4b18      	ldr	r3, [pc, #96]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ae8:	e018      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aee:	3308      	adds	r3, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fae1 	bl	80080b8 <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004afc:	e00e      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b02:	3330      	adds	r3, #48	@ 0x30
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 fb6f 	bl	80081e8 <RCCEx_PLL3_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004b10:	e004      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b18:	e000      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004b24:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2a:	f023 0107 	bic.w	r1, r3, #7
 8004b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b36:	4a02      	ldr	r2, [pc, #8]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b3e:	e005      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004b40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f000 8081 	beq.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d85f      	bhi.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004b76:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004c01 	.word	0x08004c01
 8004b80:	08004c37 	.word	0x08004c37
 8004b84:	08004c37 	.word	0x08004c37
 8004b88:	08004c37 	.word	0x08004c37
 8004b8c:	08004c37 	.word	0x08004c37
 8004b90:	08004c37 	.word	0x08004c37
 8004b94:	08004c37 	.word	0x08004c37
 8004b98:	08004c37 	.word	0x08004c37
 8004b9c:	08004c0f 	.word	0x08004c0f
 8004ba0:	08004c37 	.word	0x08004c37
 8004ba4:	08004c37 	.word	0x08004c37
 8004ba8:	08004c37 	.word	0x08004c37
 8004bac:	08004c37 	.word	0x08004c37
 8004bb0:	08004c37 	.word	0x08004c37
 8004bb4:	08004c37 	.word	0x08004c37
 8004bb8:	08004c37 	.word	0x08004c37
 8004bbc:	08004c23 	.word	0x08004c23
 8004bc0:	08004c37 	.word	0x08004c37
 8004bc4:	08004c37 	.word	0x08004c37
 8004bc8:	08004c37 	.word	0x08004c37
 8004bcc:	08004c37 	.word	0x08004c37
 8004bd0:	08004c37 	.word	0x08004c37
 8004bd4:	08004c37 	.word	0x08004c37
 8004bd8:	08004c37 	.word	0x08004c37
 8004bdc:	08004c3f 	.word	0x08004c3f
 8004be0:	08004c37 	.word	0x08004c37
 8004be4:	08004c37 	.word	0x08004c37
 8004be8:	08004c37 	.word	0x08004c37
 8004bec:	08004c37 	.word	0x08004c37
 8004bf0:	08004c37 	.word	0x08004c37
 8004bf4:	08004c37 	.word	0x08004c37
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c3f 	.word	0x08004c3f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c00:	4bab      	ldr	r3, [pc, #684]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	4aaa      	ldr	r2, [pc, #680]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e018      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c12:	3308      	adds	r3, #8
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 fa4f 	bl	80080b8 <RCCEx_PLL2_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004c20:	e00e      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c26:	3330      	adds	r3, #48	@ 0x30
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 fadd 	bl	80081e8 <RCCEx_PLL3_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c48:	4b99      	ldr	r3, [pc, #612]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c5a:	4a95      	ldr	r2, [pc, #596]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c62:	e003      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d04e      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c94:	d02e      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9a:	d827      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9e:	d02b      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004ca0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ca2:	d823      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ca4:	2b80      	cmp	r3, #128	@ 0x80
 8004ca6:	d017      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d81f      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004cb4:	e01a      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb6:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	4a7d      	ldr	r2, [pc, #500]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cc2:	e01a      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cc8:	3308      	adds	r3, #8
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f003 f9f4 	bl	80080b8 <RCCEx_PLL2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cd6:	e010      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cdc:	3330      	adds	r3, #48	@ 0x30
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f003 fa82 	bl	80081e8 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cea:	e006      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004d02:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d14:	4a66      	ldr	r2, [pc, #408]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d34:	2300      	movs	r3, #0
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d055      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004d4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d4e:	d031      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004d50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d54:	d82a      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5a:	d02d      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d60:	d824      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d66:	d029      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004d68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d6c:	d81e      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d72:	d011      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d78:	d818      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d82:	d113      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d88:	3308      	adds	r3, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f003 f994 	bl	80080b8 <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d96:	e014      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d9c:	3330      	adds	r3, #48	@ 0x30
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f003 fa22 	bl	80081e8 <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004db2:	e006      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004db4:	bf00      	nop
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dd0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004ddc:	4a34      	ldr	r2, [pc, #208]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d058      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e16:	d031      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004e18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e1c:	d82a      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e22:	d02d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e28:	d824      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e2e:	d029      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004e30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e34:	d81e      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3a:	d011      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e40:	d818      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e4a:	d113      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e50:	3308      	adds	r3, #8
 8004e52:	4618      	mov	r0, r3
 8004e54:	f003 f930 	bl	80080b8 <RCCEx_PLL2_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e5e:	e014      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e64:	3330      	adds	r3, #48	@ 0x30
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 f9be 	bl	80081e8 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e72:	e00a      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e7a:	e006      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e80:	bf00      	nop
 8004e82:	e002      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d110      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e98:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea4:	4902      	ldr	r1, [pc, #8]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004eae:	bf00      	nop
 8004eb0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eb8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	6239      	str	r1, [r7, #32]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ece:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d055      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ee0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004ee4:	d031      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004ee6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004eea:	d82a      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef0:	d02d      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef6:	d824      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ef8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004efc:	d029      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004efe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004f02:	d81e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f08:	d011      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0e:	d818      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f18:	d113      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1e:	3308      	adds	r3, #8
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 f8c9 	bl	80080b8 <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e014      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f32:	3330      	adds	r3, #48	@ 0x30
 8004f34:	4618      	mov	r0, r3
 8004f36:	f003 f957 	bl	80081e8 <RCCEx_PLL3_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f40:	e00a      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f48:	e006      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e004      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f4e:	bf00      	nop
 8004f50:	e002      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f52:	bf00      	nop
 8004f54:	e000      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004f60:	4b88      	ldr	r3, [pc, #544]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f66:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004f6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f72:	4984      	ldr	r1, [pc, #528]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f7a:	e003      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	61b9      	str	r1, [r7, #24]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d03d      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d81c      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004fac:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fef 	.word	0x08004fef
 8004fb8:	08004fc5 	.word	0x08004fc5
 8004fbc:	08004fd3 	.word	0x08004fd3
 8004fc0:	08004fef 	.word	0x08004fef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fce:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004fd0:	e00e      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f003 f86d 	bl	80080b8 <RCCEx_PLL2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004ff8:	4b62      	ldr	r3, [pc, #392]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ffe:	f023 0203 	bic.w	r2, r3, #3
 8005002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005006:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800500a:	495e      	ldr	r1, [pc, #376]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005012:	e003      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005018:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800501c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	2100      	movs	r1, #0
 8005026:	6139      	str	r1, [r7, #16]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d03a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800503c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005044:	d00e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800504a:	d815      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005054:	d110      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005056:	4b4b      	ldr	r3, [pc, #300]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	4a4a      	ldr	r2, [pc, #296]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800505c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005060:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005062:	e00e      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005068:	3308      	adds	r3, #8
 800506a:	4618      	mov	r0, r3
 800506c:	f003 f824 	bl	80080b8 <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800508a:	4b3e      	ldr	r3, [pc, #248]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800508c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005098:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800509c:	4939      	ldr	r1, [pc, #228]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	2100      	movs	r1, #0
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d038      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80050ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80050d2:	2b30      	cmp	r3, #48	@ 0x30
 80050d4:	d01b      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80050d6:	2b30      	cmp	r3, #48	@ 0x30
 80050d8:	d815      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d002      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d007      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80050e2:	e010      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e4:	4b27      	ldr	r3, [pc, #156]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80050f0:	e00e      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f6:	3330      	adds	r3, #48	@ 0x30
 80050f8:	4618      	mov	r0, r3
 80050fa:	f003 f875 	bl	80081e8 <RCCEx_PLL3_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005104:	e004      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800510e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800511a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800511e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005126:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800512a:	4916      	ldr	r1, [pc, #88]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005132:	e003      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005138:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800513c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	2100      	movs	r1, #0
 8005146:	6039      	str	r1, [r7, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005152:	460b      	mov	r3, r1
 8005154:	4313      	orrs	r3, r2
 8005156:	d00c      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005158:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800515a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800515e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005162:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005166:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800516a:	4906      	ldr	r1, [pc, #24]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005172:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005176:	4618      	mov	r0, r3
 8005178:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	44020c00 	.word	0x44020c00

08005188 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005188:	b480      	push	{r7}
 800518a:	b08b      	sub	sp, #44	@ 0x2c
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005190:	4bad      	ldr	r3, [pc, #692]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800519a:	4bab      	ldr	r3, [pc, #684]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80051a4:	4ba8      	ldr	r3, [pc, #672]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ae:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80051b0:	4ba5      	ldr	r3, [pc, #660]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051ba:	4ba3      	ldr	r3, [pc, #652]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	08db      	lsrs	r3, r3, #3
 80051c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8126 	beq.w	800542a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d053      	beq.n	800528c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d86f      	bhi.n	80052ca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d02b      	beq.n	800524e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80051f6:	e068      	b.n	80052ca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051f8:	4b93      	ldr	r3, [pc, #588]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	4a92      	ldr	r2, [pc, #584]	@ (800544c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005230:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005450 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005248:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800524c:	e068      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005258:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005454 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800525c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a04 	vldr	s12, [r7, #16]
 800526e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005450 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800528a:	e049      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005458 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80052ac:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005450 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052c8:	e02a      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	4a5d      	ldr	r2, [pc, #372]	@ (800544c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005302:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005450 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800531e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005320:	4b49      	ldr	r3, [pc, #292]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800532c:	d121      	bne.n	8005372 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800532e:	4b46      	ldr	r3, [pc, #280]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d017      	beq.n	800536a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800533a:	4b43      	ldr	r3, [pc, #268]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800533c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533e:	0a5b      	lsrs	r3, r3, #9
 8005340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005344:	ee07 3a90 	vmov	s15, r3
 8005348:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800534c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005350:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005354:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005360:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e002      	b.n	8005378 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005378:	4b33      	ldr	r3, [pc, #204]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005380:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005384:	d121      	bne.n	80053ca <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005386:	4b30      	ldr	r3, [pc, #192]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005392:	4b2d      	ldr	r3, [pc, #180]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80053a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80053ac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	e002      	b.n	80053d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053dc:	d121      	bne.n	8005422 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80053de:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053ea:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80053fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005400:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005404:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005410:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005418:	e010      	b.n	800543c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	e00c      	b.n	800543c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	e008      	b.n	800543c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	372c      	adds	r7, #44	@ 0x2c
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	44020c00 	.word	0x44020c00
 800544c:	03d09000 	.word	0x03d09000
 8005450:	46000000 	.word	0x46000000
 8005454:	4a742400 	.word	0x4a742400
 8005458:	4af42400 	.word	0x4af42400

0800545c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	@ 0x2c
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005464:	4bad      	ldr	r3, [pc, #692]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800546e:	4bab      	ldr	r3, [pc, #684]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005478:	4ba8      	ldr	r3, [pc, #672]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005482:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005484:	4ba5      	ldr	r3, [pc, #660]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800548e:	4ba3      	ldr	r3, [pc, #652]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	08db      	lsrs	r3, r3, #3
 8005494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8126 	beq.w	80056fe <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d053      	beq.n	8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d86f      	bhi.n	800559e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d003      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d02b      	beq.n	8005522 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80054ca:	e068      	b.n	800559e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054cc:	4b93      	ldr	r3, [pc, #588]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	4a92      	ldr	r2, [pc, #584]	@ (8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005500:	ed97 6a04 	vldr	s12, [r7, #16]
 8005504:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005520:	e068      	b.n	80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800555e:	e049      	b.n	80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800572c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005580:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005598:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800559c:	e02a      	b.n	80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800559e:	4b5f      	ldr	r3, [pc, #380]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80055d6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80055da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80055f2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055f4:	4b49      	ldr	r3, [pc, #292]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005600:	d121      	bne.n	8005646 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005602:	4b46      	ldr	r3, [pc, #280]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d017      	beq.n	800563e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800560e:	4b43      	ldr	r3, [pc, #268]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	0a5b      	lsrs	r3, r3, #9
 8005614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005620:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005624:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005628:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800562c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005634:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e006      	b.n	800564c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e002      	b.n	800564c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800564c:	4b33      	ldr	r3, [pc, #204]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005658:	d121      	bne.n	800569e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800565a:	4b30      	ldr	r3, [pc, #192]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800565c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005680:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056a4:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b0:	d121      	bne.n	80056f6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80056b2:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056be:	4b17      	ldr	r3, [pc, #92]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c2:	0e1b      	lsrs	r3, r3, #24
 80056c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80056d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80056d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056ec:	e010      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	e00c      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	372c      	adds	r7, #44	@ 0x2c
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	44020c00 	.word	0x44020c00
 8005720:	03d09000 	.word	0x03d09000
 8005724:	46000000 	.word	0x46000000
 8005728:	4a742400 	.word	0x4a742400
 800572c:	4af42400 	.word	0x4af42400

08005730 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005730:	b480      	push	{r7}
 8005732:	b08b      	sub	sp, #44	@ 0x2c
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005738:	4bad      	ldr	r3, [pc, #692]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800573a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005742:	4bab      	ldr	r3, [pc, #684]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800574c:	4ba8      	ldr	r3, [pc, #672]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005756:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005758:	4ba5      	ldr	r3, [pc, #660]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005762:	4ba3      	ldr	r3, [pc, #652]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005766:	08db      	lsrs	r3, r3, #3
 8005768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8126 	beq.w	80059d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d053      	beq.n	8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d86f      	bhi.n	8005872 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d02b      	beq.n	80057f6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800579e:	e068      	b.n	8005872 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057a0:	4b93      	ldr	r3, [pc, #588]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a92      	ldr	r2, [pc, #584]	@ (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80057d8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80057f4:	e068      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005800:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a04 	vldr	s12, [r7, #16]
 8005816:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005832:	e049      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005850:	ed97 6a04 	vldr	s12, [r7, #16]
 8005854:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005870:	e02a      	b.n	80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005872:	4b5f      	ldr	r3, [pc, #380]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	08db      	lsrs	r3, r3, #3
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	4a5d      	ldr	r2, [pc, #372]	@ (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80058aa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80058c6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058d4:	d121      	bne.n	800591a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80058d6:	4b46      	ldr	r3, [pc, #280]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058e2:	4b43      	ldr	r3, [pc, #268]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80058f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058fc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005908:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e006      	b.n	8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e002      	b.n	8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005920:	4b33      	ldr	r3, [pc, #204]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592c:	d121      	bne.n	8005972 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800592e:	4b30      	ldr	r3, [pc, #192]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800593a:	4b2d      	ldr	r3, [pc, #180]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800594c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005950:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005954:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005960:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005984:	d121      	bne.n	80059ca <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005986:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d017      	beq.n	80059c2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005992:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	0e1b      	lsrs	r3, r3, #24
 8005998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80059a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80059ac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80059c0:	e010      	b.n	80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	e00c      	b.n	80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	e008      	b.n	80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	372c      	adds	r7, #44	@ 0x2c
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	44020c00 	.word	0x44020c00
 80059f4:	03d09000 	.word	0x03d09000
 80059f8:	46000000 	.word	0x46000000
 80059fc:	4a742400 	.word	0x4a742400
 8005a00:	4af42400 	.word	0x4af42400

08005a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b08f      	sub	sp, #60	@ 0x3c
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a12:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005a16:	4321      	orrs	r1, r4
 8005a18:	d150      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a1a:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a24:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005a26:	4b23      	ldr	r3, [pc, #140]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d108      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a3a:	d104      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a42:	f002 bb2a 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a54:	d108      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a5c:	d104      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005a5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a64:	f002 bb19 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a74:	d119      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a7c:	d115      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8a:	d30a      	bcc.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a8c:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a9e:	f002 bafc 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005aa6:	f002 baf8 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aae:	f002 baf4 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ab2:	bf00      	nop
 8005ab4:	44020c00 	.word	0x44020c00
 8005ab8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8005ac4:	ea50 0104 	orrs.w	r1, r0, r4
 8005ac8:	f001 8275 	beq.w	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad0:	2801      	cmp	r0, #1
 8005ad2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8005ad6:	f082 82dd 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ade:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005ae2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ae6:	f001 816c 	beq.w	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aee:	2801      	cmp	r0, #1
 8005af0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005af4:	f082 82ce 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005b00:	ea50 0104 	orrs.w	r1, r0, r4
 8005b04:	f001 8602 	beq.w	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0c:	2801      	cmp	r0, #1
 8005b0e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005b12:	f082 82bf 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005b1e:	ea50 0104 	orrs.w	r1, r0, r4
 8005b22:	f001 854c 	beq.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b2a:	2801      	cmp	r0, #1
 8005b2c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005b30:	f082 82b0 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b38:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005b3c:	ea50 0104 	orrs.w	r1, r0, r4
 8005b40:	f001 849e 	beq.w	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b48:	2801      	cmp	r0, #1
 8005b4a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005b4e:	f082 82a1 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b56:	f1a1 0420 	sub.w	r4, r1, #32
 8005b5a:	ea50 0104 	orrs.w	r1, r0, r4
 8005b5e:	f001 83e8 	beq.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b66:	2801      	cmp	r0, #1
 8005b68:	f171 0120 	sbcs.w	r1, r1, #32
 8005b6c:	f082 8292 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b74:	f1a1 0410 	sub.w	r4, r1, #16
 8005b78:	ea50 0104 	orrs.w	r1, r0, r4
 8005b7c:	f002 8256 	beq.w	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b84:	2801      	cmp	r0, #1
 8005b86:	f171 0110 	sbcs.w	r1, r1, #16
 8005b8a:	f082 8283 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b92:	f1a1 0408 	sub.w	r4, r1, #8
 8005b96:	ea50 0104 	orrs.w	r1, r0, r4
 8005b9a:	f002 81cc 	beq.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba2:	2801      	cmp	r0, #1
 8005ba4:	f171 0108 	sbcs.w	r1, r1, #8
 8005ba8:	f082 8274 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb0:	1f0c      	subs	r4, r1, #4
 8005bb2:	ea50 0104 	orrs.w	r1, r0, r4
 8005bb6:	f001 8648 	beq.w	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbe:	2801      	cmp	r0, #1
 8005bc0:	f171 0104 	sbcs.w	r1, r1, #4
 8005bc4:	f082 8266 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bcc:	1e8c      	subs	r4, r1, #2
 8005bce:	ea50 0104 	orrs.w	r1, r0, r4
 8005bd2:	f002 8143 	beq.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bda:	2801      	cmp	r0, #1
 8005bdc:	f171 0102 	sbcs.w	r1, r1, #2
 8005be0:	f082 8258 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be8:	1e4c      	subs	r4, r1, #1
 8005bea:	ea50 0104 	orrs.w	r1, r0, r4
 8005bee:	f002 80ce 	beq.w	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf6:	2801      	cmp	r0, #1
 8005bf8:	f171 0101 	sbcs.w	r1, r1, #1
 8005bfc:	f082 824a 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c04:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005c08:	4321      	orrs	r1, r4
 8005c0a:	f002 8059 	beq.w	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c12:	4cd9      	ldr	r4, [pc, #868]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	f171 0100 	sbcs.w	r1, r1, #0
 8005c1a:	f082 823b 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c22:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005c26:	4321      	orrs	r1, r4
 8005c28:	f001 87d9 	beq.w	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c30:	4cd2      	ldr	r4, [pc, #840]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005c32:	42a0      	cmp	r0, r4
 8005c34:	f171 0100 	sbcs.w	r1, r1, #0
 8005c38:	f082 822c 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c40:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005c44:	4321      	orrs	r1, r4
 8005c46:	f001 8751 	beq.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4e:	4ccc      	ldr	r4, [pc, #816]	@ (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005c50:	42a0      	cmp	r0, r4
 8005c52:	f171 0100 	sbcs.w	r1, r1, #0
 8005c56:	f082 821d 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005c62:	4321      	orrs	r1, r4
 8005c64:	f001 869a 	beq.w	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6c:	4cc5      	ldr	r4, [pc, #788]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005c6e:	42a0      	cmp	r0, r4
 8005c70:	f171 0100 	sbcs.w	r1, r1, #0
 8005c74:	f082 820e 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005c80:	4321      	orrs	r1, r4
 8005c82:	f001 8612 	beq.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8a:	4cbf      	ldr	r4, [pc, #764]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c92:	f082 81ff 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005c9e:	4321      	orrs	r1, r4
 8005ca0:	f002 817e 	beq.w	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca8:	4cb8      	ldr	r4, [pc, #736]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005caa:	42a0      	cmp	r0, r4
 8005cac:	f171 0100 	sbcs.w	r1, r1, #0
 8005cb0:	f082 81f0 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005cbc:	4321      	orrs	r1, r4
 8005cbe:	f000 829e 	beq.w	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc6:	4cb2      	ldr	r4, [pc, #712]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	f171 0100 	sbcs.w	r1, r1, #0
 8005cce:	f082 81e1 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005cda:	4321      	orrs	r1, r4
 8005cdc:	f000 826d 	beq.w	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce4:	4cab      	ldr	r4, [pc, #684]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ce6:	42a0      	cmp	r0, r4
 8005ce8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cec:	f082 81d2 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005cf8:	4321      	orrs	r1, r4
 8005cfa:	f001 800d 	beq.w	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d02:	4ca5      	ldr	r4, [pc, #660]	@ (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	f171 0100 	sbcs.w	r1, r1, #0
 8005d0a:	f082 81c3 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d12:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005d16:	4321      	orrs	r1, r4
 8005d18:	f000 81d0 	beq.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d20:	4c9e      	ldr	r4, [pc, #632]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005d22:	42a0      	cmp	r0, r4
 8005d24:	f171 0100 	sbcs.w	r1, r1, #0
 8005d28:	f082 81b4 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d30:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005d34:	4321      	orrs	r1, r4
 8005d36:	f000 8142 	beq.w	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d3e:	4c98      	ldr	r4, [pc, #608]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	f171 0100 	sbcs.w	r1, r1, #0
 8005d46:	f082 81a5 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005d52:	4321      	orrs	r1, r4
 8005d54:	f001 824e 	beq.w	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d5c:	4c91      	ldr	r4, [pc, #580]	@ (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005d5e:	42a0      	cmp	r0, r4
 8005d60:	f171 0100 	sbcs.w	r1, r1, #0
 8005d64:	f082 8196 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005d70:	4321      	orrs	r1, r4
 8005d72:	f001 8197 	beq.w	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7a:	4c8b      	ldr	r4, [pc, #556]	@ (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d82:	f082 8187 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d8a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005d8e:	4321      	orrs	r1, r4
 8005d90:	f001 8154 	beq.w	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d98:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005d9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005da0:	f082 8178 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da8:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005dac:	4321      	orrs	r1, r4
 8005dae:	f001 80b7 	beq.w	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db6:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005dba:	42a0      	cmp	r0, r4
 8005dbc:	f171 0100 	sbcs.w	r1, r1, #0
 8005dc0:	f082 8168 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005dcc:	4321      	orrs	r1, r4
 8005dce:	f001 8064 	beq.w	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd6:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005dda:	42a0      	cmp	r0, r4
 8005ddc:	f171 0100 	sbcs.w	r1, r1, #0
 8005de0:	f082 8158 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005dec:	4321      	orrs	r1, r4
 8005dee:	f001 8011 	beq.w	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df6:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005dfa:	42a0      	cmp	r0, r4
 8005dfc:	f171 0100 	sbcs.w	r1, r1, #0
 8005e00:	f082 8148 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e08:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005e0c:	4321      	orrs	r1, r4
 8005e0e:	f000 871e 	beq.w	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e16:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005e1a:	42a0      	cmp	r0, r4
 8005e1c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e20:	f082 8138 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e28:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005e2c:	4321      	orrs	r1, r4
 8005e2e:	f000 86a8 	beq.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e36:	f640 0401 	movw	r4, #2049	@ 0x801
 8005e3a:	42a0      	cmp	r0, r4
 8005e3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e40:	f082 8128 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e48:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005e4c:	4321      	orrs	r1, r4
 8005e4e:	f000 8632 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e56:	f240 4401 	movw	r4, #1025	@ 0x401
 8005e5a:	42a0      	cmp	r0, r4
 8005e5c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e60:	f082 8118 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e68:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005e6c:	4321      	orrs	r1, r4
 8005e6e:	f000 85b0 	beq.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e76:	f240 2401 	movw	r4, #513	@ 0x201
 8005e7a:	42a0      	cmp	r0, r4
 8005e7c:	f171 0100 	sbcs.w	r1, r1, #0
 8005e80:	f082 8108 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e88:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005e8c:	4321      	orrs	r1, r4
 8005e8e:	f000 8535 	beq.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e96:	f240 1401 	movw	r4, #257	@ 0x101
 8005e9a:	42a0      	cmp	r0, r4
 8005e9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005ea0:	f082 80f8 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea8:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005eac:	4321      	orrs	r1, r4
 8005eae:	f000 84ba 	beq.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eb6:	2881      	cmp	r0, #129	@ 0x81
 8005eb8:	f171 0100 	sbcs.w	r1, r1, #0
 8005ebc:	f082 80ea 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ec4:	2821      	cmp	r0, #33	@ 0x21
 8005ec6:	f171 0100 	sbcs.w	r1, r1, #0
 8005eca:	d26f      	bcs.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ed0:	4301      	orrs	r1, r0
 8005ed2:	f002 80df 	beq.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eda:	1e42      	subs	r2, r0, #1
 8005edc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005ee0:	2a20      	cmp	r2, #32
 8005ee2:	f173 0100 	sbcs.w	r1, r3, #0
 8005ee6:	f082 80d5 	bcs.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005eea:	2a1f      	cmp	r2, #31
 8005eec:	f202 80d2 	bhi.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ef0:	a101      	add	r1, pc, #4	@ (adr r1, 8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005ef2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08006259 	.word	0x08006259
 8005efc:	08006325 	.word	0x08006325
 8005f00:	08008095 	.word	0x08008095
 8005f04:	080063e5 	.word	0x080063e5
 8005f08:	08008095 	.word	0x08008095
 8005f0c:	08008095 	.word	0x08008095
 8005f10:	08008095 	.word	0x08008095
 8005f14:	080064b5 	.word	0x080064b5
 8005f18:	08008095 	.word	0x08008095
 8005f1c:	08008095 	.word	0x08008095
 8005f20:	08008095 	.word	0x08008095
 8005f24:	08008095 	.word	0x08008095
 8005f28:	08008095 	.word	0x08008095
 8005f2c:	08008095 	.word	0x08008095
 8005f30:	08008095 	.word	0x08008095
 8005f34:	08006597 	.word	0x08006597
 8005f38:	08008095 	.word	0x08008095
 8005f3c:	08008095 	.word	0x08008095
 8005f40:	08008095 	.word	0x08008095
 8005f44:	08008095 	.word	0x08008095
 8005f48:	08008095 	.word	0x08008095
 8005f4c:	08008095 	.word	0x08008095
 8005f50:	08008095 	.word	0x08008095
 8005f54:	08008095 	.word	0x08008095
 8005f58:	08008095 	.word	0x08008095
 8005f5c:	08008095 	.word	0x08008095
 8005f60:	08008095 	.word	0x08008095
 8005f64:	08008095 	.word	0x08008095
 8005f68:	08008095 	.word	0x08008095
 8005f6c:	08008095 	.word	0x08008095
 8005f70:	08008095 	.word	0x08008095
 8005f74:	0800666d 	.word	0x0800666d
 8005f78:	80000001 	.word	0x80000001
 8005f7c:	40000001 	.word	0x40000001
 8005f80:	20000001 	.word	0x20000001
 8005f84:	10000001 	.word	0x10000001
 8005f88:	08000001 	.word	0x08000001
 8005f8c:	04000001 	.word	0x04000001
 8005f90:	00800001 	.word	0x00800001
 8005f94:	00400001 	.word	0x00400001
 8005f98:	00200001 	.word	0x00200001
 8005f9c:	00100001 	.word	0x00100001
 8005fa0:	00080001 	.word	0x00080001
 8005fa4:	00040001 	.word	0x00040001
 8005fa8:	00020001 	.word	0x00020001
 8005fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	f000 83c4 	beq.w	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005fba:	f002 b86b 	b.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005fbe:	4ba1      	ldr	r3, [pc, #644]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fc4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fd0:	d036      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fd8:	d86b      	bhi.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe0:	d02b      	beq.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe8:	d863      	bhi.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff0:	d01b      	beq.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff8:	d85b      	bhi.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006006:	d008      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006008:	e053      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600a:	f107 0320 	add.w	r3, r7, #32
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff f8ba 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006018:	e04e      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fa1c 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006028:	e046      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff fb7e 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006038:	e03e      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800603a:	4b83      	ldr	r3, [pc, #524]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800603e:	e03b      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006040:	4b80      	ldr	r3, [pc, #512]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006046:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800604c:	4b7d      	ldr	r3, [pc, #500]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d10c      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800605e:	4b79      	ldr	r3, [pc, #484]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	4a78      	ldr	r2, [pc, #480]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006070:	e01e      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006072:	4b74      	ldr	r3, [pc, #464]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607e:	d106      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006088:	4b71      	ldr	r3, [pc, #452]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	e010      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800608e:	4b6d      	ldr	r3, [pc, #436]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800609a:	d106      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a2:	d102      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80060a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a8:	e002      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80060ae:	e003      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80060b0:	e002      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060b6:	bf00      	nop
          }
        }
        break;
 80060b8:	f001 bfef 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80060bc:	4b61      	ldr	r3, [pc, #388]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060c2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80060c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060ce:	d036      	beq.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060d6:	d86b      	bhi.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80060de:	d02b      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80060e6:	d863      	bhi.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ee:	d01b      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f6:	d85b      	bhi.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006106:	e053      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006108:	f107 0320 	add.w	r3, r7, #32
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f83b 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006116:	e04e      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f99d 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006126:	e046      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006128:	f107 0308 	add.w	r3, r7, #8
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff faff 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006136:	e03e      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006138:	4b43      	ldr	r3, [pc, #268]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800613c:	e03b      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800613e:	4b41      	ldr	r3, [pc, #260]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006144:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800614a:	4b3e      	ldr	r3, [pc, #248]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	d10c      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800615c:	4b39      	ldr	r3, [pc, #228]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	08db      	lsrs	r3, r3, #3
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	4a39      	ldr	r2, [pc, #228]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
 800616e:	e01e      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006170:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617c:	d106      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006184:	d102      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006186:	4b32      	ldr	r3, [pc, #200]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34
 800618a:	e010      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800618c:	4b2d      	ldr	r3, [pc, #180]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006198:	d106      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a0:	d102      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80061a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80061a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a6:	e002      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80061ac:	e003      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80061ae:	e002      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80061b4:	bf00      	nop
          }
        }
        break;
 80061b6:	f001 bf70 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80061ba:	4b22      	ldr	r3, [pc, #136]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d108      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061cc:	f107 0320 	add.w	r3, r7, #32
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ffd9 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061da:	f001 bf5e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	2b40      	cmp	r3, #64	@ 0x40
 80061e2:	d108      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e4:	f107 0314 	add.w	r3, r7, #20
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff f937 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f2:	f001 bf52 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061fa:	f001 bf4e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80061fe:	4b11      	ldr	r3, [pc, #68]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006208:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006210:	f107 0320 	add.w	r3, r7, #32
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe ffb7 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800621e:	f001 bf3c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d108      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff f915 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006236:	f001 bf30 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800623e:	f001 bf2c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006242:	bf00      	nop
 8006244:	44020c00 	.word	0x44020c00
 8006248:	00bb8000 	.word	0x00bb8000
 800624c:	03d09000 	.word	0x03d09000
 8006250:	003d0900 	.word	0x003d0900
 8006254:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006258:	4b9d      	ldr	r3, [pc, #628]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800625a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800626a:	f7fc ffd7 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 800626e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006270:	f001 bf13 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006274:	4b96      	ldr	r3, [pc, #600]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800627c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	2b01      	cmp	r3, #1
 8006286:	d107      	bne.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff f8e5 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	e043      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006298:	4b8d      	ldr	r3, [pc, #564]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d10a      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d107      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ac:	f107 0308 	add.w	r3, r7, #8
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fa3d 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ba:	e031      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062bc:	4b84      	ldr	r3, [pc, #528]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d109      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ce:	4b80      	ldr	r3, [pc, #512]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	4a7e      	ldr	r2, [pc, #504]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e0:	e01e      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80062e2:	4b7b      	ldr	r3, [pc, #492]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ee:	d105      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80062f6:	4b78      	ldr	r3, [pc, #480]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fa:	e011      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062fc:	4b74      	ldr	r3, [pc, #464]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d106      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2b05      	cmp	r3, #5
 800630e:	d103      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800631c:	f001 bebd 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006320:	f001 bebb 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006324:	4b6a      	ldr	r3, [pc, #424]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800632a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800632e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006336:	f7fc ff5b 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 800633a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800633c:	f001 bead 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006340:	4b63      	ldr	r3, [pc, #396]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634c:	d10a      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	2b08      	cmp	r3, #8
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff f87f 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	e03d      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	2b10      	cmp	r3, #16
 8006368:	d108      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f9de 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006378:	f001 be8f 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800637c:	4b54      	ldr	r3, [pc, #336]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d10c      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2b18      	cmp	r3, #24
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800638e:	4b50      	ldr	r3, [pc, #320]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	08db      	lsrs	r3, r3, #3
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	4a4e      	ldr	r2, [pc, #312]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a0:	e01e      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80063a2:	4b4b      	ldr	r3, [pc, #300]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ae:	d105      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d102      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80063b6:	4b48      	ldr	r3, [pc, #288]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ba:	e011      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80063bc:	4b44      	ldr	r3, [pc, #272]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d106      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	2b28      	cmp	r3, #40	@ 0x28
 80063ce:	d103      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80063d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063dc:	f001 be5d 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063e0:	f001 be5b 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063e4:	4b3a      	ldr	r3, [pc, #232]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80063ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063f6:	f7fc fefb 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 80063fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80063fc:	f001 be4d 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006400:	4b33      	ldr	r3, [pc, #204]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640c:	d10a      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	2b40      	cmp	r3, #64	@ 0x40
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff f81f 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
 8006422:	e045      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006424:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006430:	d10a      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2b80      	cmp	r3, #128	@ 0x80
 8006436:	d107      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006438:	f107 0308 	add.w	r3, r7, #8
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff f977 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
 8006446:	e033      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006448:	4b21      	ldr	r3, [pc, #132]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d10c      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	2bc0      	cmp	r3, #192	@ 0xc0
 8006458:	d109      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800645a:	4b1d      	ldr	r3, [pc, #116]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	08db      	lsrs	r3, r3, #3
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	4a1b      	ldr	r2, [pc, #108]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
 800646c:	e020      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800646e:	4b18      	ldr	r3, [pc, #96]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800647a:	d106      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006482:	d102      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006484:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	e012      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800648a:	4b11      	ldr	r3, [pc, #68]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800648c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800649e:	d103      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80064a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a6:	e003      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064ac:	f001 bdf5 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064b0:	f001 bdf3 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80064b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064ba:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064c6:	f7fc fe93 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 80064ca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80064cc:	f001 bde5 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064d0:	44020c00 	.word	0x44020c00
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80064dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e8:	d10b      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f0:	d107      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f2:	f107 0314 	add.w	r3, r7, #20
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe ffb0 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006500:	e047      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006502:	4b97      	ldr	r3, [pc, #604]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800650a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650e:	d10b      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006516:	d107      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006518:	f107 0308 	add.w	r3, r7, #8
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff f907 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
 8006526:	e034      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006528:	4b8d      	ldr	r3, [pc, #564]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d10d      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800653a:	d109      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800653c:	4b88      	ldr	r3, [pc, #544]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	08db      	lsrs	r3, r3, #3
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	4a87      	ldr	r2, [pc, #540]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
 800654c:	637b      	str	r3, [r7, #52]	@ 0x34
 800654e:	e020      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006550:	4b83      	ldr	r3, [pc, #524]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655c:	d106      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006564:	d102      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006566:	4b80      	ldr	r3, [pc, #512]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006568:	637b      	str	r3, [r7, #52]	@ 0x34
 800656a:	e012      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800656c:	4b7c      	ldr	r3, [pc, #496]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800656e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b02      	cmp	r3, #2
 8006578:	d107      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006580:	d103      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800658e:	f001 bd84 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006592:	f001 bd82 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006596:	4b72      	ldr	r3, [pc, #456]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800659c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80065a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fc fe22 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 80065ac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ae:	f001 bd74 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80065b2:	4b6b      	ldr	r3, [pc, #428]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065be:	d10b      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c6:	d107      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c8:	f107 0314 	add.w	r3, r7, #20
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe ff45 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d6:	e047      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80065d8:	4b61      	ldr	r3, [pc, #388]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e4:	d10b      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ee:	f107 0308 	add.w	r3, r7, #8
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff f89c 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80065fc:	e034      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80065fe:	4b58      	ldr	r3, [pc, #352]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d10d      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006610:	d109      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006612:	4b53      	ldr	r3, [pc, #332]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	4a51      	ldr	r2, [pc, #324]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
 8006624:	e020      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006626:	4b4e      	ldr	r3, [pc, #312]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800662e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006632:	d106      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800663a:	d102      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800663c:	4b4a      	ldr	r3, [pc, #296]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006640:	e012      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006642:	4b47      	ldr	r3, [pc, #284]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006656:	d103      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665c:	637b      	str	r3, [r7, #52]	@ 0x34
 800665e:	e003      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006664:	f001 bd19 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006668:	f001 bd17 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800666c:	4b3c      	ldr	r3, [pc, #240]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800666e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006672:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006676:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800667e:	f7fc fdb7 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006682:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006684:	f001 bd09 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006688:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006694:	d10b      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800669e:	f107 0314 	add.w	r3, r7, #20
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe feda 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ac:	e047      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80066ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ba:	d10b      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c2:	d107      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c4:	f107 0308 	add.w	r3, r7, #8
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff f831 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d2:	e034      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80066d4:	4b22      	ldr	r3, [pc, #136]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d10d      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80066e6:	d109      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	08db      	lsrs	r3, r3, #3
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fa:	e020      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80066fc:	4b18      	ldr	r3, [pc, #96]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006708:	d106      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006710:	d102      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006712:	4b15      	ldr	r3, [pc, #84]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006714:	637b      	str	r3, [r7, #52]	@ 0x34
 8006716:	e012      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006718:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800671a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d107      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800672c:	d103      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	e003      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800673a:	f001 bcae 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800673e:	f001 bcac 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006748:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800674c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fc fd4c 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006758:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800675a:	f001 bc9e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800675e:	bf00      	nop
 8006760:	44020c00 	.word	0x44020c00
 8006764:	03d09000 	.word	0x03d09000
 8006768:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800676c:	4ba0      	ldr	r3, [pc, #640]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006778:	d10b      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006780:	d107      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006782:	f107 0314 	add.w	r3, r7, #20
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fe68 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006790:	e047      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006792:	4b97      	ldr	r3, [pc, #604]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800679a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679e:	d10b      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067a6:	d107      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ffbf 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b6:	e034      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80067b8:	4b8d      	ldr	r3, [pc, #564]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80067ca:	d109      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067cc:	4b88      	ldr	r3, [pc, #544]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	08db      	lsrs	r3, r3, #3
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	4a87      	ldr	r2, [pc, #540]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067de:	e020      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80067e0:	4b83      	ldr	r3, [pc, #524]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ec:	d106      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f4:	d102      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80067f6:	4b80      	ldr	r3, [pc, #512]	@ (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80067f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fa:	e012      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80067fc:	4b7c      	ldr	r3, [pc, #496]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d107      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006810:	d103      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8006812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
 8006818:	e003      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800681e:	f001 bc3c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006822:	f001 bc3a 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006826:	4b72      	ldr	r3, [pc, #456]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006828:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800682c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fc fcda 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 800683c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800683e:	f001 bc2c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006842:	4b6b      	ldr	r3, [pc, #428]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800684e:	d10b      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006856:	d107      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fdfd 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
 8006866:	e047      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006868:	4b61      	ldr	r3, [pc, #388]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800687c:	d107      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe ff54 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	e034      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800688e:	4b58      	ldr	r3, [pc, #352]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d10d      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80068a0:	d109      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068a2:	4b53      	ldr	r3, [pc, #332]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	4a51      	ldr	r2, [pc, #324]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b4:	e020      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80068b6:	4b4e      	ldr	r3, [pc, #312]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c2:	d106      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068ca:	d102      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80068cc:	4b4a      	ldr	r3, [pc, #296]	@ (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d0:	e012      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80068d2:	4b47      	ldr	r3, [pc, #284]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d107      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80068e6:	d103      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80068e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f4:	f001 bbd1 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068f8:	f001 bbcf 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80068fc:	4b3c      	ldr	r3, [pc, #240]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006902:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006906:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fc fc6f 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006912:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006914:	f001 bbc1 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006918:	4b35      	ldr	r3, [pc, #212]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006924:	d10b      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0314 	add.w	r3, r7, #20
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fd92 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
 800693c:	e047      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800693e:	4b2c      	ldr	r3, [pc, #176]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694a:	d10b      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006952:	d107      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fee9 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	637b      	str	r3, [r7, #52]	@ 0x34
 8006962:	e034      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006964:	4b22      	ldr	r3, [pc, #136]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b02      	cmp	r3, #2
 800696e:	d10d      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006976:	d109      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006978:	4b1d      	ldr	r3, [pc, #116]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	08db      	lsrs	r3, r3, #3
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
 800698a:	e020      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800698c:	4b18      	ldr	r3, [pc, #96]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006998:	d106      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069a0:	d102      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80069a2:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a6:	e012      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80069a8:	4b11      	ldr	r3, [pc, #68]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80069bc:	d103      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ca:	f001 bb66 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069ce:	f001 bb64 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80069d2:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80069d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069d8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80069dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fc fc04 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 80069e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ea:	f001 bb56 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069ee:	bf00      	nop
 80069f0:	44020c00 	.word	0x44020c00
 80069f4:	03d09000 	.word	0x03d09000
 80069f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80069fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a08:	d10b      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a10:	d107      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a12:	f107 0314 	add.w	r3, r7, #20
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fd20 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	e047      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006a22:	4b98      	ldr	r3, [pc, #608]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a2e:	d10b      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a36:	d107      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe77 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a46:	e034      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006a48:	4b8e      	ldr	r3, [pc, #568]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d10d      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a5c:	4b89      	ldr	r3, [pc, #548]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	4a88      	ldr	r2, [pc, #544]	@ (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6e:	e020      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006a70:	4b84      	ldr	r3, [pc, #528]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7c:	d106      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006a86:	4b81      	ldr	r3, [pc, #516]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	e012      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d107      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006aa0:	d103      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	e003      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aae:	f001 baf4 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ab2:	f001 baf2 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006ab6:	4b73      	ldr	r3, [pc, #460]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ab8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fc fb92 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006acc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ace:	f001 bae4 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ade:	d10a      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fcb6 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af4:	e043      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006af6:	4b63      	ldr	r3, [pc, #396]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b02:	d10a      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d107      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0a:	f107 0308 	add.w	r3, r7, #8
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fe0e 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b18:	e031      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b2c:	4b55      	ldr	r3, [pc, #340]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	4a54      	ldr	r2, [pc, #336]	@ (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	e01e      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006b40:	4b50      	ldr	r3, [pc, #320]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b4c:	d105      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d102      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006b54:	4b4d      	ldr	r3, [pc, #308]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b58:	e011      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d106      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d103      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b74:	e003      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b7a:	f001 ba8e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b7e:	f001 ba8c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006b82:	4b40      	ldr	r3, [pc, #256]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b94:	f7fc fb2c 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006b98:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b9a:	f001 ba7e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006b9e:	4b39      	ldr	r3, [pc, #228]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006baa:	d10a      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb2:	f107 0314 	add.w	r3, r7, #20
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fc50 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc0:	e043      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006bc2:	4b30      	ldr	r3, [pc, #192]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bce:	d10a      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fda8 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be4:	e031      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006be6:	4b27      	ldr	r3, [pc, #156]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d10c      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2b30      	cmp	r3, #48	@ 0x30
 8006bf6:	d109      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bf8:	4b22      	ldr	r3, [pc, #136]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	08db      	lsrs	r3, r3, #3
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	4a21      	ldr	r2, [pc, #132]	@ (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0a:	e01e      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c18:	d105      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	d102      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006c20:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c24:	e011      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006c26:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d106      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2b50      	cmp	r3, #80	@ 0x50
 8006c38:	d103      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c40:	e003      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c46:	f001 ba28 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c4a:	f001 ba26 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c54:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006c58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c60:	f7fc faf2 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8006c64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c66:	f001 ba18 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c70:	d10e      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c72:	f107 0314 	add.w	r3, r7, #20
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fbf0 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c80:	f001 ba0b 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c84:	44020c00 	.word	0x44020c00
 8006c88:	03d09000 	.word	0x03d09000
 8006c8c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c96:	d108      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c98:	f107 0308 	add.w	r3, r7, #8
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fd47 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca6:	f001 b9f8 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006caa:	4ba4      	ldr	r3, [pc, #656]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d10d      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cbc:	d109      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cbe:	4b9f      	ldr	r3, [pc, #636]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	08db      	lsrs	r3, r3, #3
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	4a9d      	ldr	r2, [pc, #628]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd0:	e020      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006cd2:	4b9a      	ldr	r3, [pc, #616]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cde:	d106      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ce6:	d102      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006ce8:	4b96      	ldr	r3, [pc, #600]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cec:	e012      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006cee:	4b93      	ldr	r3, [pc, #588]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d02:	d103      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	e003      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d10:	f001 b9c3 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d14:	f001 b9c1 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006d18:	4b88      	ldr	r3, [pc, #544]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006d2a:	f7fc fa45 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8006d2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006d30:	f001 b9b3 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d104      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fc f911 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8006d3e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d40:	f001 b9ab 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d108      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fb84 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d58:	f001 b99f 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006d5c:	4b77      	ldr	r3, [pc, #476]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d68:	d105      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006d70:	4b75      	ldr	r3, [pc, #468]	@ (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d74:	e023      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d76:	4b71      	ldr	r3, [pc, #452]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d109      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d88:	4b6c      	ldr	r3, [pc, #432]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	08db      	lsrs	r3, r3, #3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	4a6b      	ldr	r2, [pc, #428]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	e010      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006d9c:	4b67      	ldr	r3, [pc, #412]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d105      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d102      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006db0:	4b64      	ldr	r3, [pc, #400]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db4:	e003      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dba:	f001 b96e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dbe:	f001 b96c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006dce:	4b5b      	ldr	r3, [pc, #364]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d106      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	e012      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006dea:	4b54      	ldr	r3, [pc, #336]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d103      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006e00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e06:	e003      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006e0c:	f001 b945 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e10:	f001 b943 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e14:	4b49      	ldr	r3, [pc, #292]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e26:	f7fc f9e3 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006e2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e2c:	f001 b935 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e36:	d108      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e38:	f107 0308 	add.w	r3, r7, #8
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fc77 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e46:	f001 b928 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d10d      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e5e:	4b37      	ldr	r3, [pc, #220]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	4a35      	ldr	r2, [pc, #212]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e70:	e011      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006e72:	4b32      	ldr	r3, [pc, #200]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006e88:	4b2e      	ldr	r3, [pc, #184]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	e003      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e92:	f001 b902 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e96:	f001 b900 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e9a:	4b28      	ldr	r3, [pc, #160]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ea0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fc f9a0 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006eb2:	f001 b8f2 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ebc:	d108      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ebe:	f107 0308 	add.w	r3, r7, #8
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fc34 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ecc:	f001 b8e5 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d10d      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ee4:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef6:	e011      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006ef8:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f04:	d106      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f0c:	d102      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f18:	f001 b8bf 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f1c:	f001 b8bd 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f20:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10c      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006f32:	f7fc f989 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8006f36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f38:	f001 b8af 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f3c:	44020c00 	.word	0x44020c00
 8006f40:	03d09000 	.word	0x03d09000
 8006f44:	003d0900 	.word	0x003d0900
 8006f48:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f52:	d108      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f54:	f107 0308 	add.w	r3, r7, #8
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fbe9 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f62:	f001 b89a 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006f66:	4b9f      	ldr	r3, [pc, #636]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d10d      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	4a98      	ldr	r2, [pc, #608]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	e011      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006f8e:	4b95      	ldr	r3, [pc, #596]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9a:	d106      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa2:	d102      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006fa4:	4b91      	ldr	r3, [pc, #580]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa8:	e003      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fae:	f001 b874 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fb2:	f001 b872 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fbc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006fc0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006fc8:	f7fc f93e 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8006fcc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fce:	f001 b864 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fd8:	d108      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fba6 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe8:	f001 b857 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006fec:	4b7d      	ldr	r3, [pc, #500]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d10d      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007000:	4b78      	ldr	r3, [pc, #480]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a77      	ldr	r2, [pc, #476]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
 8007012:	e011      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007014:	4b73      	ldr	r3, [pc, #460]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800701c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007020:	d106      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007028:	d102      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800702a:	4b70      	ldr	r3, [pc, #448]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
 800702e:	e003      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007034:	f001 b831 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007038:	f001 b82f 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800703c:	4b69      	ldr	r3, [pc, #420]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800703e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007042:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007046:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800704e:	f7fc f8cf 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8007052:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007054:	f001 b821 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800705e:	d108      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007060:	f107 0308 	add.w	r3, r7, #8
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fb63 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706e:	f001 b814 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007072:	4b5c      	ldr	r3, [pc, #368]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10e      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007084:	d10a      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007086:	4b57      	ldr	r3, [pc, #348]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	4a55      	ldr	r2, [pc, #340]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007098:	f000 bfff 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070a0:	f000 bffb 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80070a4:	4b4f      	ldr	r3, [pc, #316]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80070aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80070b6:	d056      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80070be:	f200 808b 	bhi.w	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c8:	d03e      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d0:	f200 8082 	bhi.w	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070da:	d027      	beq.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070e2:	d879      	bhi.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ea:	d017      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f2:	d871      	bhi.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007100:	d004      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007102:	e069      	b.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007104:	f7fc f8a0 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8007108:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800710a:	e068      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0314 	add.w	r3, r7, #20
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe f9a3 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800711a:	e060      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711c:	f107 0308 	add.w	r3, r7, #8
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fb05 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800712a:	e058      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800712c:	4b2d      	ldr	r3, [pc, #180]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800712e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b02      	cmp	r3, #2
 8007138:	d103      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007140:	e04d      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007146:	e04a      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007148:	4b26      	ldr	r3, [pc, #152]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800714a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800714e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007156:	d103      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007158:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800715e:	e03e      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007164:	e03b      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007166:	4b1f      	ldr	r3, [pc, #124]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800716c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007170:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007172:	4b1c      	ldr	r3, [pc, #112]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b02      	cmp	r3, #2
 800717c:	d10c      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007184:	4b17      	ldr	r3, [pc, #92]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	e01e      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007198:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a4:	d106      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ac:	d102      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071ae:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80071b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b2:	e010      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071b4:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071c0:	d106      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80071c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071c8:	d102      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80071cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ce:	e002      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80071d6:	e002      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071dc:	bf00      	nop
          }
        }
        break;
 80071de:	f000 bf5c 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071e2:	bf00      	nop
 80071e4:	44020c00 	.word	0x44020c00
 80071e8:	03d09000 	.word	0x03d09000
 80071ec:	003d0900 	.word	0x003d0900
 80071f0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80071f4:	4b9e      	ldr	r3, [pc, #632]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007206:	d056      	beq.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800720e:	f200 808b 	bhi.w	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007218:	d03e      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007220:	f200 8082 	bhi.w	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800722a:	d027      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007232:	d879      	bhi.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723a:	d017      	beq.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007242:	d871      	bhi.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007250:	d004      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007252:	e069      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fb ffcc 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8007258:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800725a:	e068      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe f8fb 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800726a:	e060      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fa5d 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800727a:	e058      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800727c:	4b7c      	ldr	r3, [pc, #496]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800727e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b02      	cmp	r3, #2
 8007288:	d103      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800728a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007290:	e04d      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007296:	e04a      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007298:	4b75      	ldr	r3, [pc, #468]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800729a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800729e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a6:	d103      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80072a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072ae:	e03e      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072b4:	e03b      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072b6:	4b6e      	ldr	r3, [pc, #440]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80072c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072c2:	4b6b      	ldr	r3, [pc, #428]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d10c      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072d4:	4b66      	ldr	r3, [pc, #408]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	4a65      	ldr	r2, [pc, #404]	@ (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e6:	e01e      	b.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072e8:	4b61      	ldr	r3, [pc, #388]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f4:	d106      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fc:	d102      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072fe:	4b5e      	ldr	r3, [pc, #376]	@ (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
 8007302:	e010      	b.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007304:	4b5a      	ldr	r3, [pc, #360]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007310:	d106      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007318:	d102      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800731a:	4b58      	ldr	r3, [pc, #352]	@ (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007324:	e003      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007326:	e002      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800732c:	bf00      	nop
          }
        }
        break;
 800732e:	f000 beb4 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007332:	4b4f      	ldr	r3, [pc, #316]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007334:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007338:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800733c:	633b      	str	r3, [r7, #48]	@ 0x30
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007344:	d056      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800734c:	f200 808b 	bhi.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007356:	d03e      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800735e:	f200 8082 	bhi.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007368:	d027      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007370:	d879      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007378:	d017      	beq.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007380:	d871      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738e:	d004      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007390:	e069      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007392:	f7fb ff59 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8007396:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007398:	e068      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0314 	add.w	r3, r7, #20
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe f85c 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073a8:	e060      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073aa:	f107 0308 	add.w	r3, r7, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe f9be 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073b8:	e058      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073ba:	4b2d      	ldr	r3, [pc, #180]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d103      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80073c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073ce:	e04d      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073d4:	e04a      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073d6:	4b26      	ldr	r3, [pc, #152]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e4:	d103      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80073e6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073ec:	e03e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073f2:	e03b      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007400:	4b1b      	ldr	r3, [pc, #108]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d10c      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800740c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007412:	4b17      	ldr	r3, [pc, #92]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e01e      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007426:	4b12      	ldr	r3, [pc, #72]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800742e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d102      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800743c:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800743e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007440:	e010      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007442:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744e:	d106      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007456:	d102      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007458:	4b08      	ldr	r3, [pc, #32]	@ (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007462:	e003      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007464:	e002      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800746a:	bf00      	nop
          }
        }
        break;
 800746c:	f000 be15 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007470:	44020c00 	.word	0x44020c00
 8007474:	03d09000 	.word	0x03d09000
 8007478:	003d0900 	.word	0x003d0900
 800747c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007480:	4b9e      	ldr	r3, [pc, #632]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007486:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007492:	d056      	beq.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800749a:	f200 808b 	bhi.w	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074a4:	d03e      	beq.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ac:	f200 8082 	bhi.w	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074b6:	d027      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074be:	d879      	bhi.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074c6:	d017      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ce:	d871      	bhi.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074dc:	d004      	beq.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80074de:	e069      	b.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80074e0:	f7fb feb2 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 80074e4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80074e6:	e068      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd ffb5 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074f6:	e060      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f8:	f107 0308 	add.w	r3, r7, #8
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe f917 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007506:	e058      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007508:	4b7c      	ldr	r3, [pc, #496]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800750a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d103      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800751c:	e04d      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007522:	e04a      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007524:	4b75      	ldr	r3, [pc, #468]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800752a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800752e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007532:	d103      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007534:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800753a:	e03e      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007540:	e03b      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007542:	4b6e      	ldr	r3, [pc, #440]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007548:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800754c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800754e:	4b6b      	ldr	r3, [pc, #428]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b02      	cmp	r3, #2
 8007558:	d10c      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800755a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007560:	4b66      	ldr	r3, [pc, #408]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	4a65      	ldr	r2, [pc, #404]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	e01e      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007574:	4b61      	ldr	r3, [pc, #388]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800757c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007580:	d106      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007588:	d102      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800758a:	4b5e      	ldr	r3, [pc, #376]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34
 800758e:	e010      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007590:	4b5a      	ldr	r3, [pc, #360]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759c:	d106      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075a4:	d102      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075a6:	4b58      	ldr	r3, [pc, #352]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075aa:	e002      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80075b2:	e002      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075b8:	bf00      	nop
          }
        }
        break;
 80075ba:	f000 bd6e 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80075be:	4b4f      	ldr	r3, [pc, #316]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075c4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80075c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075d0:	d056      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075d8:	f200 808b 	bhi.w	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075e2:	d03e      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075ea:	f200 8082 	bhi.w	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075f4:	d027      	beq.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075fc:	d879      	bhi.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007604:	d017      	beq.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800760c:	d871      	bhi.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800761a:	d004      	beq.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800761c:	e069      	b.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800761e:	f7fb fe13 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8007622:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007624:	e068      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	4618      	mov	r0, r3
 800762c:	f7fd ff16 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007634:	e060      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f878 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007644:	e058      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007646:	4b2d      	ldr	r3, [pc, #180]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b02      	cmp	r3, #2
 8007652:	d103      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800765a:	e04d      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007660:	e04a      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007662:	4b26      	ldr	r3, [pc, #152]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800766c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007670:	d103      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007672:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007678:	e03e      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800767e:	e03b      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007680:	4b1e      	ldr	r3, [pc, #120]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007686:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800768c:	4b1b      	ldr	r3, [pc, #108]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b02      	cmp	r3, #2
 8007696:	d10c      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800769e:	4b17      	ldr	r3, [pc, #92]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	08db      	lsrs	r3, r3, #3
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b0:	e01e      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076b2:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076be:	d106      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80076c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c6:	d102      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80076cc:	e010      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076ce:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076da:	d106      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076e2:	d102      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076e4:	4b08      	ldr	r3, [pc, #32]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076ee:	e003      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80076f0:	e002      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076f6:	bf00      	nop
          }
        }
        break;
 80076f8:	f000 bccf 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076fc:	44020c00 	.word	0x44020c00
 8007700:	03d09000 	.word	0x03d09000
 8007704:	003d0900 	.word	0x003d0900
 8007708:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800770c:	4b9e      	ldr	r3, [pc, #632]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800770e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007712:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007716:	633b      	str	r3, [r7, #48]	@ 0x30
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800771e:	d056      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007726:	f200 808b 	bhi.w	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007730:	d03e      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007738:	f200 8082 	bhi.w	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007742:	d027      	beq.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800774a:	d879      	bhi.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007752:	d017      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775a:	d871      	bhi.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007768:	d004      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800776a:	e069      	b.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800776c:	f7fb fd6c 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8007770:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007772:	e068      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007774:	f107 0314 	add.w	r3, r7, #20
 8007778:	4618      	mov	r0, r3
 800777a:	f7fd fe6f 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007782:	e060      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd ffd1 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007792:	e058      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007794:	4b7c      	ldr	r3, [pc, #496]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d103      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80077a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80077a8:	e04d      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077ae:	e04a      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80077b0:	4b75      	ldr	r3, [pc, #468]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077be:	d103      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80077c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80077c6:	e03e      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077cc:	e03b      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80077d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077da:	4b6b      	ldr	r3, [pc, #428]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d10c      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077ec:	4b66      	ldr	r3, [pc, #408]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a65      	ldr	r2, [pc, #404]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fe:	e01e      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007800:	4b61      	ldr	r3, [pc, #388]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d106      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800780e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007814:	d102      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007816:	4b5e      	ldr	r3, [pc, #376]	@ (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007818:	637b      	str	r3, [r7, #52]	@ 0x34
 800781a:	e010      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800781c:	4b5a      	ldr	r3, [pc, #360]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007828:	d106      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800782a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007830:	d102      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007832:	4b58      	ldr	r3, [pc, #352]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007834:	637b      	str	r3, [r7, #52]	@ 0x34
 8007836:	e002      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800783e:	e002      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007844:	bf00      	nop
          }
        }
        break;
 8007846:	f000 bc28 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800784a:	4b4f      	ldr	r3, [pc, #316]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800784c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007854:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007856:	4b4c      	ldr	r3, [pc, #304]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007862:	d106      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800786a:	4b4a      	ldr	r3, [pc, #296]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800786e:	f000 bc14 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007878:	d108      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787a:	f107 0320 	add.w	r3, r7, #32
 800787e:	4618      	mov	r0, r3
 8007880:	f7fd fc82 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007888:	f000 bc07 	b.w	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007892:	d107      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fddf 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a2:	e3fa      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a8:	e3f7      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80078aa:	4b37      	ldr	r3, [pc, #220]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d861      	bhi.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80078bc:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	08007909 	.word	0x08007909
 80078d4:	0800790f 	.word	0x0800790f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d8:	f107 0320 	add.w	r3, r7, #32
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fd fc53 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078e6:	e04e      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd fdb5 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078f6:	e046      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd ff17 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007906:	e03e      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007908:	4b23      	ldr	r3, [pc, #140]	@ (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800790c:	e03b      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800790e:	4b1e      	ldr	r3, [pc, #120]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007914:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007918:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800791a:	4b1b      	ldr	r3, [pc, #108]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d10c      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800792c:	4b16      	ldr	r3, [pc, #88]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	08db      	lsrs	r3, r3, #3
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	4a15      	ldr	r2, [pc, #84]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	e01e      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007940:	4b11      	ldr	r3, [pc, #68]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794c:	d106      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007954:	d102      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007956:	4b0e      	ldr	r3, [pc, #56]	@ (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
 800795a:	e010      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800795c:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007968:	d106      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800796a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007970:	d102      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007972:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	e002      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800797e:	e002      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007984:	bf00      	nop
          }
        }
        break;
 8007986:	e388      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007988:	44020c00 	.word	0x44020c00
 800798c:	03d09000 	.word	0x03d09000
 8007990:	003d0900 	.word	0x003d0900
 8007994:	007a1200 	.word	0x007a1200
 8007998:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800799c:	4ba9      	ldr	r3, [pc, #676]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800799e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	f200 809a 	bhi.w	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80079b0:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	08007a3d 	.word	0x08007a3d
 80079bc:	08007ae5 	.word	0x08007ae5
 80079c0:	08007ae5 	.word	0x08007ae5
 80079c4:	08007ae5 	.word	0x08007ae5
 80079c8:	08007ae5 	.word	0x08007ae5
 80079cc:	08007ae5 	.word	0x08007ae5
 80079d0:	08007ae5 	.word	0x08007ae5
 80079d4:	08007ae5 	.word	0x08007ae5
 80079d8:	08007a4d 	.word	0x08007a4d
 80079dc:	08007ae5 	.word	0x08007ae5
 80079e0:	08007ae5 	.word	0x08007ae5
 80079e4:	08007ae5 	.word	0x08007ae5
 80079e8:	08007ae5 	.word	0x08007ae5
 80079ec:	08007ae5 	.word	0x08007ae5
 80079f0:	08007ae5 	.word	0x08007ae5
 80079f4:	08007ae5 	.word	0x08007ae5
 80079f8:	08007a5d 	.word	0x08007a5d
 80079fc:	08007ae5 	.word	0x08007ae5
 8007a00:	08007ae5 	.word	0x08007ae5
 8007a04:	08007ae5 	.word	0x08007ae5
 8007a08:	08007ae5 	.word	0x08007ae5
 8007a0c:	08007ae5 	.word	0x08007ae5
 8007a10:	08007ae5 	.word	0x08007ae5
 8007a14:	08007ae5 	.word	0x08007ae5
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	08007ae5 	.word	0x08007ae5
 8007a20:	08007ae5 	.word	0x08007ae5
 8007a24:	08007ae5 	.word	0x08007ae5
 8007a28:	08007ae5 	.word	0x08007ae5
 8007a2c:	08007ae5 	.word	0x08007ae5
 8007a30:	08007ae5 	.word	0x08007ae5
 8007a34:	08007ae5 	.word	0x08007ae5
 8007a38:	08007a73 	.word	0x08007a73
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a3c:	f107 0320 	add.w	r3, r7, #32
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fd fba1 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a4a:	e04e      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4c:	f107 0314 	add.w	r3, r7, #20
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fd fd03 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a5a:	e046      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fd fe65 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a6a:	e03e      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a6c:	4b76      	ldr	r3, [pc, #472]	@ (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a70:	e03b      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a72:	4b74      	ldr	r3, [pc, #464]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a78:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a7e:	4b71      	ldr	r3, [pc, #452]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d10c      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a90:	4b6c      	ldr	r3, [pc, #432]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	08db      	lsrs	r3, r3, #3
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa2:	e01e      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007aa4:	4b67      	ldr	r3, [pc, #412]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d102      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007aba:	4b65      	ldr	r3, [pc, #404]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007abe:	e010      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ac0:	4b60      	ldr	r3, [pc, #384]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007acc:	d106      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ad4:	d102      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ada:	e002      	b.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ae0:	e003      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007ae2:	e002      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ae8:	bf00      	nop
          }
        }
        break;
 8007aea:	e2d6      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007aec:	4b55      	ldr	r3, [pc, #340]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007af2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007afe:	d031      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b06:	d866      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b0c:	d027      	beq.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b12:	d860      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d019      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	2b80      	cmp	r3, #128	@ 0x80
 8007b1e:	d85a      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	2b40      	cmp	r3, #64	@ 0x40
 8007b2a:	d008      	beq.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007b2c:	e053      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b2e:	f107 0320 	add.w	r3, r7, #32
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fd fb28 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b3c:	e04e      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fd fc8a 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b4c:	e046      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4e:	f107 0308 	add.w	r3, r7, #8
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd fdec 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b5c:	e03e      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b62:	e03b      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b64:	4b37      	ldr	r3, [pc, #220]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b70:	4b34      	ldr	r3, [pc, #208]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d10c      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b82:	4b30      	ldr	r3, [pc, #192]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b94:	e01e      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b96:	4b2b      	ldr	r3, [pc, #172]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007baa:	d102      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007bac:	4b28      	ldr	r3, [pc, #160]	@ (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	e010      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bb2:	4b24      	ldr	r3, [pc, #144]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bbe:	d106      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc6:	d102      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007bc8:	4b22      	ldr	r3, [pc, #136]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007bd2:	e003      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007bd4:	e002      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bda:	bf00      	nop
          }
        }
        break;
 8007bdc:	e25d      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007bde:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007be4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007be8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bf0:	f7fb fb14 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8007bf4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bf6:	e250      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007bf8:	4b12      	ldr	r3, [pc, #72]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c04:	d10b      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0e:	f107 0314 	add.w	r3, r7, #20
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fc22 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1c:	e04f      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007c1e:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c2a:	d115      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c32:	d111      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c34:	f107 0308 	add.w	r3, r7, #8
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fd fd79 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c42:	e03c      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007c44:	44020c00 	.word	0x44020c00
 8007c48:	00bb8000 	.word	0x00bb8000
 8007c4c:	03d09000 	.word	0x03d09000
 8007c50:	003d0900 	.word	0x003d0900
 8007c54:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007c58:	4b94      	ldr	r3, [pc, #592]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d10d      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c6a:	d109      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	08db      	lsrs	r3, r3, #3
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	4a8e      	ldr	r2, [pc, #568]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	e01e      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007c80:	4b8a      	ldr	r3, [pc, #552]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c94:	d102      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007c96:	4b87      	ldr	r3, [pc, #540]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9a:	e010      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c9c:	4b83      	ldr	r3, [pc, #524]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca8:	d106      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007cb0:	d102      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007cb2:	4b81      	ldr	r3, [pc, #516]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb6:	e002      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cbc:	e1ed      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cbe:	e1ec      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007cc0:	4b7a      	ldr	r3, [pc, #488]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cc6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007cca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007cd2:	f7fb fab9 	bl	8003248 <HAL_RCC_GetPCLK3Freq>
 8007cd6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007cd8:	e1df      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007cda:	4b74      	ldr	r3, [pc, #464]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce6:	d10b      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf0:	f107 0314 	add.w	r3, r7, #20
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd fbb1 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfe:	e045      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007d00:	4b6a      	ldr	r3, [pc, #424]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d0c:	d10b      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d14:	d107      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d16:	f107 0308 	add.w	r3, r7, #8
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fd fd08 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d24:	e032      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007d26:	4b61      	ldr	r3, [pc, #388]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d10d      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d38:	d109      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	08db      	lsrs	r3, r3, #3
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	4a5a      	ldr	r2, [pc, #360]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007d46:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4c:	e01e      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007d4e:	4b57      	ldr	r3, [pc, #348]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d5a:	d106      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007d64:	4b53      	ldr	r3, [pc, #332]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d68:	e010      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007d6a:	4b50      	ldr	r3, [pc, #320]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d76:	d106      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d7e:	d102      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007d80:	4b4d      	ldr	r3, [pc, #308]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	e002      	b.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d8a:	e186      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d8c:	e185      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d8e:	4b47      	ldr	r3, [pc, #284]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d94:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007d98:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007da0:	f7fb fa3c 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8007da4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007da6:	e178      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007da8:	4b40      	ldr	r3, [pc, #256]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db4:	d10b      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dbc:	d107      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fd fb4a 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dcc:	e045      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007dce:	4b37      	ldr	r3, [pc, #220]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dda:	d10b      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd fca1 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df2:	e032      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007df4:	4b2d      	ldr	r3, [pc, #180]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d10d      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007e06:	d109      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e08:	4b28      	ldr	r3, [pc, #160]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	08db      	lsrs	r3, r3, #3
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	4a27      	ldr	r2, [pc, #156]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1a:	e01e      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007e1c:	4b23      	ldr	r3, [pc, #140]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e28:	d106      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e30:	d102      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007e32:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e36:	e010      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007e38:	4b1c      	ldr	r3, [pc, #112]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e44:	d106      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007e4c:	d102      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e52:	e002      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e58:	e11f      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e5a:	e11e      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007e5c:	4b13      	ldr	r3, [pc, #76]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d85f      	bhi.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e85 	.word	0x08007e85
 8007e78:	08007e8d 	.word	0x08007e8d
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007ebd 	.word	0x08007ebd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007e84:	f7fb f998 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8007e88:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007e8a:	e053      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e8c:	f107 0320 	add.w	r3, r7, #32
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fd f979 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e9a:	e04b      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e9c:	f107 0314 	add.w	r3, r7, #20
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fd fadb 	bl	800545c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007eaa:	e043      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007eac:	44020c00 	.word	0x44020c00
 8007eb0:	03d09000 	.word	0x03d09000
 8007eb4:	003d0900 	.word	0x003d0900
 8007eb8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ebc:	4b79      	ldr	r3, [pc, #484]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ec2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ec8:	4b76      	ldr	r3, [pc, #472]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d10c      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007eda:	4b72      	ldr	r3, [pc, #456]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	4a70      	ldr	r2, [pc, #448]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eec:	e01e      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eee:	4b6d      	ldr	r3, [pc, #436]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007efa:	d106      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d102      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f04:	4b69      	ldr	r3, [pc, #420]	@ (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f08:	e010      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f0a:	4b66      	ldr	r3, [pc, #408]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f16:	d106      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f1e:	d102      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f20:	4b63      	ldr	r3, [pc, #396]	@ (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f24:	e002      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007f2c:	e002      	b.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f32:	bf00      	nop
          }
        }
        break;
 8007f34:	e0b1      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007f36:	4b5b      	ldr	r3, [pc, #364]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007f42:	4b58      	ldr	r3, [pc, #352]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d106      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5c:	e01f      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007f5e:	4b51      	ldr	r3, [pc, #324]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f70:	2b40      	cmp	r3, #64	@ 0x40
 8007f72:	d103      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007f74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7a:	e010      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007f7c:	4b49      	ldr	r3, [pc, #292]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f88:	d106      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	2b80      	cmp	r3, #128	@ 0x80
 8007f8e:	d103      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007f90:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f96:	e002      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007f9c:	e07d      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f9e:	e07c      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007fa0:	4b40      	ldr	r3, [pc, #256]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fa6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007faa:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007fac:	4b3d      	ldr	r3, [pc, #244]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb8:	d105      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc4:	e031      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007fc6:	4b37      	ldr	r3, [pc, #220]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fd2:	d10a      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d107      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fda:	f107 0320 	add.w	r3, r7, #32
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd f8d2 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe8:	e01f      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007fea:	4b2e      	ldr	r3, [pc, #184]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d106      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d103      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
 8008004:	e011      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008006:	4b27      	ldr	r3, [pc, #156]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800800c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008014:	d106      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	2b30      	cmp	r3, #48	@ 0x30
 800801a:	d103      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800801c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
 8008022:	e002      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008028:	e037      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800802a:	e036      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800802c:	4b1d      	ldr	r3, [pc, #116]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800802e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008032:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008036:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	2b10      	cmp	r3, #16
 800803c:	d107      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800803e:	f107 0320 	add.w	r3, r7, #32
 8008042:	4618      	mov	r0, r3
 8008044:	f7fd f8a0 	bl	8005188 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800804c:	e025      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800804e:	4b15      	ldr	r3, [pc, #84]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805a:	d10a      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	2b20      	cmp	r3, #32
 8008060:	d107      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008062:	f107 0308 	add.w	r3, r7, #8
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fb62 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008070:	e00f      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008072:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800807a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800807e:	d105      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	2b30      	cmp	r3, #48	@ 0x30
 8008084:	d102      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008086:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008088:	637b      	str	r3, [r7, #52]	@ 0x34
 800808a:	e002      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008090:	e003      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008092:	e002      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008098:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800809a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800809c:	4618      	mov	r0, r3
 800809e:	373c      	adds	r7, #60	@ 0x3c
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}
 80080a4:	44020c00 	.word	0x44020c00
 80080a8:	03d09000 	.word	0x03d09000
 80080ac:	003d0900 	.word	0x003d0900
 80080b0:	007a1200 	.word	0x007a1200
 80080b4:	02dc6c00 	.word	0x02dc6c00

080080b8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80080c0:	4b48      	ldr	r3, [pc, #288]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a47      	ldr	r2, [pc, #284]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80080c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080cc:	f7f9 fe5a 	bl	8001d84 <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080d2:	e008      	b.n	80080e6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080d4:	f7f9 fe56 	bl	8001d84 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e07a      	b.n	80081dc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080e6:	4b3f      	ldr	r3, [pc, #252]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f0      	bne.n	80080d4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80080f2:	4b3c      	ldr	r3, [pc, #240]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6852      	ldr	r2, [r2, #4]
 8008106:	0212      	lsls	r2, r2, #8
 8008108:	430a      	orrs	r2, r1
 800810a:	4936      	ldr	r1, [pc, #216]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	3b01      	subs	r3, #1
 8008116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	3b01      	subs	r3, #1
 8008120:	025b      	lsls	r3, r3, #9
 8008122:	b29b      	uxth	r3, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	3b01      	subs	r3, #1
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008140:	4928      	ldr	r1, [pc, #160]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008146:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	f023 020c 	bic.w	r2, r3, #12
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	4924      	ldr	r1, [pc, #144]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008154:	4313      	orrs	r3, r2
 8008156:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008158:	4b22      	ldr	r3, [pc, #136]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	f023 0220 	bic.w	r2, r3, #32
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	491f      	ldr	r1, [pc, #124]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008166:	4313      	orrs	r3, r2
 8008168:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800816a:	4b1e      	ldr	r3, [pc, #120]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800816c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	491c      	ldr	r1, [pc, #112]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008178:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817c:	4a19      	ldr	r2, [pc, #100]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800817e:	f023 0310 	bic.w	r3, r3, #16
 8008182:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008184:	4b17      	ldr	r3, [pc, #92]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008188:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800818c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6a12      	ldr	r2, [r2, #32]
 8008194:	00d2      	lsls	r2, r2, #3
 8008196:	4913      	ldr	r1, [pc, #76]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 8008198:	4313      	orrs	r3, r2
 800819a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800819c:	4b11      	ldr	r3, [pc, #68]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	4a10      	ldr	r2, [pc, #64]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80081a2:	f043 0310 	orr.w	r3, r3, #16
 80081a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80081a8:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a0d      	ldr	r2, [pc, #52]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80081ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081b4:	f7f9 fde6 	bl	8001d84 <HAL_GetTick>
 80081b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081ba:	e008      	b.n	80081ce <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081bc:	f7f9 fde2 	bl	8001d84 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e006      	b.n	80081dc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081ce:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <RCCEx_PLL2_Config+0x12c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f0      	beq.n	80081bc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80081da:	2300      	movs	r3, #0

}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	44020c00 	.word	0x44020c00

080081e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80081f0:	4b48      	ldr	r3, [pc, #288]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a47      	ldr	r2, [pc, #284]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80081f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081fc:	f7f9 fdc2 	bl	8001d84 <HAL_GetTick>
 8008200:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008202:	e008      	b.n	8008216 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008204:	f7f9 fdbe 	bl	8001d84 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e07a      	b.n	800830c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008216:	4b3f      	ldr	r3, [pc, #252]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008222:	4b3c      	ldr	r3, [pc, #240]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008226:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6811      	ldr	r1, [r2, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6852      	ldr	r2, [r2, #4]
 8008236:	0212      	lsls	r2, r2, #8
 8008238:	430a      	orrs	r2, r1
 800823a:	4936      	ldr	r1, [pc, #216]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 800823c:	4313      	orrs	r3, r2
 800823e:	630b      	str	r3, [r1, #48]	@ 0x30
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	3b01      	subs	r3, #1
 8008246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	3b01      	subs	r3, #1
 8008250:	025b      	lsls	r3, r3, #9
 8008252:	b29b      	uxth	r3, r3
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	3b01      	subs	r3, #1
 800825c:	041b      	lsls	r3, r3, #16
 800825e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	3b01      	subs	r3, #1
 800826a:	061b      	lsls	r3, r3, #24
 800826c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008270:	4928      	ldr	r1, [pc, #160]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008272:	4313      	orrs	r3, r2
 8008274:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008276:	4b27      	ldr	r3, [pc, #156]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	f023 020c 	bic.w	r2, r3, #12
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	4924      	ldr	r1, [pc, #144]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008284:	4313      	orrs	r3, r2
 8008286:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008288:	4b22      	ldr	r3, [pc, #136]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	f023 0220 	bic.w	r2, r3, #32
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	491f      	ldr	r1, [pc, #124]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008296:	4313      	orrs	r3, r2
 8008298:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800829a:	4b1e      	ldr	r3, [pc, #120]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 800829c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	491c      	ldr	r1, [pc, #112]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80082a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	4a19      	ldr	r2, [pc, #100]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082ae:	f023 0310 	bic.w	r3, r3, #16
 80082b2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80082b4:	4b17      	ldr	r3, [pc, #92]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6a12      	ldr	r2, [r2, #32]
 80082c4:	00d2      	lsls	r2, r2, #3
 80082c6:	4913      	ldr	r1, [pc, #76]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80082cc:	4b11      	ldr	r3, [pc, #68]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d0:	4a10      	ldr	r2, [pc, #64]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082d2:	f043 0310 	orr.w	r3, r3, #16
 80082d6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80082d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 80082de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082e4:	f7f9 fd4e 	bl	8001d84 <HAL_GetTick>
 80082e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082ea:	e008      	b.n	80082fe <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082ec:	f7f9 fd4a 	bl	8001d84 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e006      	b.n	800830c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082fe:	4b05      	ldr	r3, [pc, #20]	@ (8008314 <RCCEx_PLL3_Config+0x12c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	44020c00 	.word	0x44020c00

08008318 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e162      	b.n	80085f0 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a70      	ldr	r2, [pc, #448]	@ (80084f0 <HAL_SPI_Init+0x1d8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_SPI_Init+0x4e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a6e      	ldr	r2, [pc, #440]	@ (80084f4 <HAL_SPI_Init+0x1dc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_SPI_Init+0x4e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a6d      	ldr	r2, [pc, #436]	@ (80084f8 <HAL_SPI_Init+0x1e0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_SPI_Init+0x4e>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a6b      	ldr	r2, [pc, #428]	@ (80084fc <HAL_SPI_Init+0x1e4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_SPI_Init+0x4e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a6a      	ldr	r2, [pc, #424]	@ (8008500 <HAL_SPI_Init+0x1e8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_SPI_Init+0x4e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a68      	ldr	r2, [pc, #416]	@ (8008504 <HAL_SPI_Init+0x1ec>)
 8008362:	4293      	cmp	r3, r2
 8008364:	e000      	b.n	8008368 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008366:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a5f      	ldr	r2, [pc, #380]	@ (80084f0 <HAL_SPI_Init+0x1d8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d018      	beq.n	80083aa <HAL_SPI_Init+0x92>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a5d      	ldr	r2, [pc, #372]	@ (80084f4 <HAL_SPI_Init+0x1dc>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d013      	beq.n	80083aa <HAL_SPI_Init+0x92>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a5c      	ldr	r2, [pc, #368]	@ (80084f8 <HAL_SPI_Init+0x1e0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00e      	beq.n	80083aa <HAL_SPI_Init+0x92>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a5a      	ldr	r2, [pc, #360]	@ (80084fc <HAL_SPI_Init+0x1e4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d009      	beq.n	80083aa <HAL_SPI_Init+0x92>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a59      	ldr	r2, [pc, #356]	@ (8008500 <HAL_SPI_Init+0x1e8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d004      	beq.n	80083aa <HAL_SPI_Init+0x92>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a57      	ldr	r2, [pc, #348]	@ (8008504 <HAL_SPI_Init+0x1ec>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d105      	bne.n	80083b6 <HAL_SPI_Init+0x9e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d901      	bls.n	80083b6 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e11c      	b.n	80085f0 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fb68 	bl	8008a8c <SPI_GetPacketSize>
 80083bc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a4b      	ldr	r2, [pc, #300]	@ (80084f0 <HAL_SPI_Init+0x1d8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d018      	beq.n	80083fa <HAL_SPI_Init+0xe2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a49      	ldr	r2, [pc, #292]	@ (80084f4 <HAL_SPI_Init+0x1dc>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <HAL_SPI_Init+0xe2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a48      	ldr	r2, [pc, #288]	@ (80084f8 <HAL_SPI_Init+0x1e0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <HAL_SPI_Init+0xe2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a46      	ldr	r2, [pc, #280]	@ (80084fc <HAL_SPI_Init+0x1e4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <HAL_SPI_Init+0xe2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a45      	ldr	r2, [pc, #276]	@ (8008500 <HAL_SPI_Init+0x1e8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <HAL_SPI_Init+0xe2>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a43      	ldr	r2, [pc, #268]	@ (8008504 <HAL_SPI_Init+0x1ec>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d102      	bne.n	8008400 <HAL_SPI_Init+0xe8>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d820      	bhi.n	8008442 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008404:	4a40      	ldr	r2, [pc, #256]	@ (8008508 <HAL_SPI_Init+0x1f0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a3f      	ldr	r2, [pc, #252]	@ (800850c <HAL_SPI_Init+0x1f4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <HAL_SPI_Init+0x124>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a3d      	ldr	r2, [pc, #244]	@ (8008510 <HAL_SPI_Init+0x1f8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_SPI_Init+0x124>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a3c      	ldr	r2, [pc, #240]	@ (8008514 <HAL_SPI_Init+0x1fc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_SPI_Init+0x124>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a3a      	ldr	r2, [pc, #232]	@ (8008518 <HAL_SPI_Init+0x200>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_SPI_Init+0x124>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a39      	ldr	r2, [pc, #228]	@ (800851c <HAL_SPI_Init+0x204>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d104      	bne.n	8008446 <HAL_SPI_Init+0x12e>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b10      	cmp	r3, #16
 8008440:	d901      	bls.n	8008446 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e0d4      	b.n	80085f0 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7f9 f8f8 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008482:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800848c:	d119      	bne.n	80084c2 <HAL_SPI_Init+0x1aa>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008496:	d103      	bne.n	80084a0 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10c      	bne.n	80084c2 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084b0:	d107      	bne.n	80084c2 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d028      	beq.n	8008520 <HAL_SPI_Init+0x208>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d924      	bls.n	8008520 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	e020      	b.n	8008530 <HAL_SPI_Init+0x218>
 80084ee:	bf00      	nop
 80084f0:	40014c00 	.word	0x40014c00
 80084f4:	50014c00 	.word	0x50014c00
 80084f8:	44002000 	.word	0x44002000
 80084fc:	54002000 	.word	0x54002000
 8008500:	40015000 	.word	0x40015000
 8008504:	50015000 	.word	0x50015000
 8008508:	40013000 	.word	0x40013000
 800850c:	50013000 	.word	0x50013000
 8008510:	40003800 	.word	0x40003800
 8008514:	50003800 	.word	0x50003800
 8008518:	40003c00 	.word	0x40003c00
 800851c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800852e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	431a      	orrs	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	ea42 0103 	orr.w	r1, r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008590:	431a      	orrs	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800859c:	ea42 0103 	orr.w	r1, r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0201 	bic.w	r2, r2, #1
 80085ba:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3330      	adds	r3, #48	@ 0x30
 800860e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008610:	f7f9 fbb8 	bl	8001d84 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d001      	beq.n	8008626 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8008622:	2302      	movs	r3, #2
 8008624:	e181      	b.n	800892a <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <HAL_SPI_Receive+0x3a>
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e179      	b.n	800892a <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_SPI_Receive+0x4c>
 8008640:	2302      	movs	r3, #2
 8008642:	e172      	b.n	800892a <HAL_SPI_Receive+0x332>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2204      	movs	r2, #4
 8008650:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800869c:	d108      	bne.n	80086b0 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e009      	b.n	80086c4 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80086c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	041b      	lsls	r3, r3, #16
 80086ce:	88f9      	ldrh	r1, [r7, #6]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086f0:	d107      	bne.n	8008702 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008700:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b0f      	cmp	r3, #15
 8008708:	d966      	bls.n	80087d8 <HAL_SPI_Receive+0x1e0>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a89      	ldr	r2, [pc, #548]	@ (8008934 <HAL_SPI_Receive+0x33c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d05a      	beq.n	80087ca <HAL_SPI_Receive+0x1d2>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a87      	ldr	r2, [pc, #540]	@ (8008938 <HAL_SPI_Receive+0x340>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d055      	beq.n	80087ca <HAL_SPI_Receive+0x1d2>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a86      	ldr	r2, [pc, #536]	@ (800893c <HAL_SPI_Receive+0x344>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d050      	beq.n	80087ca <HAL_SPI_Receive+0x1d2>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a84      	ldr	r2, [pc, #528]	@ (8008940 <HAL_SPI_Receive+0x348>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d04b      	beq.n	80087ca <HAL_SPI_Receive+0x1d2>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a83      	ldr	r2, [pc, #524]	@ (8008944 <HAL_SPI_Receive+0x34c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d046      	beq.n	80087ca <HAL_SPI_Receive+0x1d2>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a81      	ldr	r2, [pc, #516]	@ (8008948 <HAL_SPI_Receive+0x350>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d148      	bne.n	80087d8 <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008746:	e040      	b.n	80087ca <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d014      	beq.n	8008782 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008760:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008762:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008780:	e023      	b.n	80087ca <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008782:	f7f9 faff 	bl	8001d84 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d803      	bhi.n	800879a <HAL_SPI_Receive+0x1a2>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d102      	bne.n	80087a0 <HAL_SPI_Receive+0x1a8>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d114      	bne.n	80087ca <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 f8d3 	bl	800894c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e0af      	b.n	800892a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1b8      	bne.n	8008748 <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80087d6:	e095      	b.n	8008904 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b07      	cmp	r3, #7
 80087de:	f240 808b 	bls.w	80088f8 <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80087e2:	e03f      	b.n	8008864 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d114      	bne.n	800881c <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	b292      	uxth	r2, r2
 80087fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008802:	1c9a      	adds	r2, r3, #2
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800881a:	e023      	b.n	8008864 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881c:	f7f9 fab2 	bl	8001d84 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d803      	bhi.n	8008834 <HAL_SPI_Receive+0x23c>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	d102      	bne.n	800883a <HAL_SPI_Receive+0x242>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d114      	bne.n	8008864 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 f886 	bl	800894c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008846:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e062      	b.n	800892a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1b9      	bne.n	80087e4 <HAL_SPI_Receive+0x1ec>
 8008870:	e048      	b.n	8008904 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b01      	cmp	r3, #1
 800887e:	d117      	bne.n	80088b0 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80088ae:	e023      	b.n	80088f8 <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b0:	f7f9 fa68 	bl	8001d84 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d803      	bhi.n	80088c8 <HAL_SPI_Receive+0x2d0>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d102      	bne.n	80088ce <HAL_SPI_Receive+0x2d6>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d114      	bne.n	80088f8 <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f83c 	bl	800894c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e018      	b.n	800892a <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1b6      	bne.n	8008872 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f821 	bl	800894c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e000      	b.n	800892a <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 8008928:	2300      	movs	r3, #0
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	40013000 	.word	0x40013000
 8008938:	50013000 	.word	0x50013000
 800893c:	40003800 	.word	0x40003800
 8008940:	50003800 	.word	0x50003800
 8008944:	40003c00 	.word	0x40003c00
 8008948:	50003c00 	.word	0x50003c00

0800894c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0208 	orr.w	r2, r2, #8
 800896a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0210 	orr.w	r2, r2, #16
 800897a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800899a:	f023 0303 	bic.w	r3, r3, #3
 800899e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80089ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d014      	beq.n	80089e6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00f      	beq.n	80089e6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0220 	orr.w	r2, r2, #32
 80089e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d014      	beq.n	8008a1c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00f      	beq.n	8008a1c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a02:	f043 0204 	orr.w	r2, r3, #4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00f      	beq.n	8008a46 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a2c:	f043 0201 	orr.w	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a44:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00f      	beq.n	8008a70 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a56:	f043 0208 	orr.w	r2, r3, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a6e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3307      	adds	r3, #7
 8008aaa:	08db      	lsrs	r3, r3, #3
 8008aac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e042      	b.n	8008b5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7f8 fe40 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2224      	movs	r2, #36	@ 0x24
 8008af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0201 	bic.w	r2, r2, #1
 8008b02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fab5 	bl	800907c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8c4 	bl	8008ca0 <UART_SetConfig>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e01b      	b.n	8008b5a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fb34 	bl	80091c0 <UART_CheckIdleState>
 8008b58:	4603      	mov	r3, r0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b08a      	sub	sp, #40	@ 0x28
 8008b66:	af02      	add	r7, sp, #8
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	f040 808b 	bne.w	8008c94 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <HAL_UART_Transmit+0x28>
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e083      	b.n	8008c96 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b98:	2b80      	cmp	r3, #128	@ 0x80
 8008b9a:	d107      	bne.n	8008bac <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008baa:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2221      	movs	r2, #33	@ 0x21
 8008bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bbc:	f7f9 f8e2 	bl	8001d84 <HAL_GetTick>
 8008bc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	88fa      	ldrh	r2, [r7, #6]
 8008bce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bda:	d108      	bne.n	8008bee <HAL_UART_Transmit+0x8c>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61bb      	str	r3, [r7, #24]
 8008bec:	e003      	b.n	8008bf6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bf6:	e030      	b.n	8008c5a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2180      	movs	r1, #128	@ 0x80
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fb86 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e03d      	b.n	8008c96 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	3302      	adds	r3, #2
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	e007      	b.n	8008c48 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	3301      	adds	r3, #1
 8008c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	3b01      	subs	r3, #1
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1c8      	bne.n	8008bf8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2140      	movs	r1, #64	@ 0x40
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fb4f 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e006      	b.n	8008c96 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	e000      	b.n	8008c96 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008c94:	2302      	movs	r3, #2
  }
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3720      	adds	r7, #32
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca4:	b094      	sub	sp, #80	@ 0x50
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b78      	ldr	r3, [pc, #480]	@ (8008e98 <UART_SetConfig+0x1f8>)
 8008cb6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4971      	ldr	r1, [pc, #452]	@ (8008e9c <UART_SetConfig+0x1fc>)
 8008cd8:	4019      	ands	r1, r3
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	68d9      	ldr	r1, [r3, #12]
 8008cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	ea40 0301 	orr.w	r3, r0, r1
 8008cfa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	4b64      	ldr	r3, [pc, #400]	@ (8008e98 <UART_SetConfig+0x1f8>)
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d009      	beq.n	8008d20 <UART_SetConfig+0x80>
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4b63      	ldr	r3, [pc, #396]	@ (8008ea0 <UART_SetConfig+0x200>)
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d004      	beq.n	8008d20 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d18:	6a1a      	ldr	r2, [r3, #32]
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008d2a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	f023 000f 	bic.w	r0, r3, #15
 8008d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	ea40 0301 	orr.w	r3, r0, r1
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4b53      	ldr	r3, [pc, #332]	@ (8008ea4 <UART_SetConfig+0x204>)
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d102      	bne.n	8008d60 <UART_SetConfig+0xc0>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d5e:	e066      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4b50      	ldr	r3, [pc, #320]	@ (8008ea8 <UART_SetConfig+0x208>)
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d102      	bne.n	8008d70 <UART_SetConfig+0xd0>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d6e:	e05e      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4b4d      	ldr	r3, [pc, #308]	@ (8008eac <UART_SetConfig+0x20c>)
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d102      	bne.n	8008d80 <UART_SetConfig+0xe0>
 8008d7a:	2304      	movs	r3, #4
 8008d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7e:	e056      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b4a      	ldr	r3, [pc, #296]	@ (8008eb0 <UART_SetConfig+0x210>)
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d102      	bne.n	8008d90 <UART_SetConfig+0xf0>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d8e:	e04e      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b47      	ldr	r3, [pc, #284]	@ (8008eb4 <UART_SetConfig+0x214>)
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d102      	bne.n	8008da0 <UART_SetConfig+0x100>
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d9e:	e046      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	4b44      	ldr	r3, [pc, #272]	@ (8008eb8 <UART_SetConfig+0x218>)
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d102      	bne.n	8008db0 <UART_SetConfig+0x110>
 8008daa:	2320      	movs	r3, #32
 8008dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dae:	e03e      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4b41      	ldr	r3, [pc, #260]	@ (8008ebc <UART_SetConfig+0x21c>)
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d102      	bne.n	8008dc0 <UART_SetConfig+0x120>
 8008dba:	2340      	movs	r3, #64	@ 0x40
 8008dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dbe:	e036      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8008ec0 <UART_SetConfig+0x220>)
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d102      	bne.n	8008dd0 <UART_SetConfig+0x130>
 8008dca:	2380      	movs	r3, #128	@ 0x80
 8008dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dce:	e02e      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ec4 <UART_SetConfig+0x224>)
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d103      	bne.n	8008de2 <UART_SetConfig+0x142>
 8008dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de0:	e025      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	4b38      	ldr	r3, [pc, #224]	@ (8008ec8 <UART_SetConfig+0x228>)
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d103      	bne.n	8008df4 <UART_SetConfig+0x154>
 8008dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008df2:	e01c      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b34      	ldr	r3, [pc, #208]	@ (8008ecc <UART_SetConfig+0x22c>)
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d103      	bne.n	8008e06 <UART_SetConfig+0x166>
 8008dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e04:	e013      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b31      	ldr	r3, [pc, #196]	@ (8008ed0 <UART_SetConfig+0x230>)
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d103      	bne.n	8008e18 <UART_SetConfig+0x178>
 8008e10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e16:	e00a      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008e98 <UART_SetConfig+0x1f8>)
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d103      	bne.n	8008e2a <UART_SetConfig+0x18a>
 8008e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e28:	e001      	b.n	8008e2e <UART_SetConfig+0x18e>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b19      	ldr	r3, [pc, #100]	@ (8008e98 <UART_SetConfig+0x1f8>)
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d005      	beq.n	8008e44 <UART_SetConfig+0x1a4>
 8008e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <UART_SetConfig+0x200>)
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f040 8094 	bne.w	8008f6c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e46:	2200      	movs	r2, #0
 8008e48:	623b      	str	r3, [r7, #32]
 8008e4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e50:	f7fc fdd8 	bl	8005a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e54:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 80f7 	beq.w	800904c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e62:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed4 <UART_SetConfig+0x234>)
 8008e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4613      	mov	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	4413      	add	r3, r2
 8008e7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d305      	bcc.n	8008e8e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d924      	bls.n	8008ed8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e94:	e069      	b.n	8008f6a <UART_SetConfig+0x2ca>
 8008e96:	bf00      	nop
 8008e98:	44002400 	.word	0x44002400
 8008e9c:	cfff69f3 	.word	0xcfff69f3
 8008ea0:	54002400 	.word	0x54002400
 8008ea4:	40013800 	.word	0x40013800
 8008ea8:	40004400 	.word	0x40004400
 8008eac:	40004800 	.word	0x40004800
 8008eb0:	40004c00 	.word	0x40004c00
 8008eb4:	40005000 	.word	0x40005000
 8008eb8:	40006400 	.word	0x40006400
 8008ebc:	40007800 	.word	0x40007800
 8008ec0:	40007c00 	.word	0x40007c00
 8008ec4:	40008000 	.word	0x40008000
 8008ec8:	40006800 	.word	0x40006800
 8008ecc:	40006c00 	.word	0x40006c00
 8008ed0:	40008400 	.word	0x40008400
 8008ed4:	0800c400 	.word	0x0800c400
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eda:	2200      	movs	r2, #0
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	61fa      	str	r2, [r7, #28]
 8008ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee4:	4a64      	ldr	r2, [pc, #400]	@ (8009078 <UART_SetConfig+0x3d8>)
 8008ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2200      	movs	r2, #0
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	617a      	str	r2, [r7, #20]
 8008ef2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ef6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008efa:	f7f7 fe65 	bl	8000bc8 <__aeabi_uldivmod>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4610      	mov	r0, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	020b      	lsls	r3, r1, #8
 8008f10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f14:	0202      	lsls	r2, r0, #8
 8008f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f18:	6849      	ldr	r1, [r1, #4]
 8008f1a:	0849      	lsrs	r1, r1, #1
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4605      	mov	r5, r0
 8008f22:	eb12 0804 	adds.w	r8, r2, r4
 8008f26:	eb43 0905 	adc.w	r9, r3, r5
 8008f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	60bb      	str	r3, [r7, #8]
 8008f32:	60fa      	str	r2, [r7, #12]
 8008f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 fe44 	bl	8000bc8 <__aeabi_uldivmod>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4613      	mov	r3, r2
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f4e:	d308      	bcc.n	8008f62 <UART_SetConfig+0x2c2>
 8008f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f56:	d204      	bcs.n	8008f62 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f5e:	60da      	str	r2, [r3, #12]
 8008f60:	e003      	b.n	8008f6a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008f68:	e070      	b.n	800904c <UART_SetConfig+0x3ac>
 8008f6a:	e06f      	b.n	800904c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f74:	d13c      	bne.n	8008ff0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f78:	2200      	movs	r2, #0
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f82:	f7fc fd3f 	bl	8005a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f86:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d05e      	beq.n	800904c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f92:	4a39      	ldr	r2, [pc, #228]	@ (8009078 <UART_SetConfig+0x3d8>)
 8008f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fa0:	005a      	lsls	r2, r3, #1
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	085b      	lsrs	r3, r3, #1
 8008fa8:	441a      	add	r2, r3
 8008faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d916      	bls.n	8008fe8 <UART_SetConfig+0x348>
 8008fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc0:	d212      	bcs.n	8008fe8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f023 030f 	bic.w	r3, r3, #15
 8008fca:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008fe4:	60da      	str	r2, [r3, #12]
 8008fe6:	e031      	b.n	800904c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fee:	e02d      	b.n	800904c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	469a      	mov	sl, r3
 8008ff6:	4693      	mov	fp, r2
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4659      	mov	r1, fp
 8008ffc:	f7fc fd02 	bl	8005a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8009000:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d021      	beq.n	800904c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900c:	4a1a      	ldr	r2, [pc, #104]	@ (8009078 <UART_SetConfig+0x3d8>)
 800900e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009012:	461a      	mov	r2, r3
 8009014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009016:	fbb3 f2f2 	udiv	r2, r3, r2
 800901a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	441a      	add	r2, r3
 8009022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	fbb2 f3f3 	udiv	r3, r2, r3
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d909      	bls.n	8009046 <UART_SetConfig+0x3a6>
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009038:	d205      	bcs.n	8009046 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800903a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903c:	b29a      	uxth	r2, r3
 800903e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60da      	str	r2, [r3, #12]
 8009044:	e002      	b.n	800904c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	2201      	movs	r2, #1
 8009050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009056:	2201      	movs	r2, #1
 8009058:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800905c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905e:	2200      	movs	r2, #0
 8009060:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009064:	2200      	movs	r2, #0
 8009066:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009068:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800906c:	4618      	mov	r0, r3
 800906e:	3750      	adds	r7, #80	@ 0x50
 8009070:	46bd      	mov	sp, r7
 8009072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009076:	bf00      	nop
 8009078:	0800c400 	.word	0x0800c400

0800907c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00a      	beq.n	80090ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01a      	beq.n	8009192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800917a:	d10a      	bne.n	8009192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	605a      	str	r2, [r3, #4]
  }
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b098      	sub	sp, #96	@ 0x60
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091d0:	f7f8 fdd8 	bl	8001d84 <HAL_GetTick>
 80091d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d12f      	bne.n	8009244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ec:	2200      	movs	r2, #0
 80091ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f88e 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d022      	beq.n	8009244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800920c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009212:	653b      	str	r3, [r7, #80]	@ 0x50
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921c:	647b      	str	r3, [r7, #68]	@ 0x44
 800921e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800922a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e6      	bne.n	80091fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e063      	b.n	800930c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d149      	bne.n	80092e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009252:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800925a:	2200      	movs	r2, #0
 800925c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f857 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d03c      	beq.n	80092e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	623b      	str	r3, [r7, #32]
   return(result);
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928a:	633b      	str	r3, [r7, #48]	@ 0x30
 800928c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e6      	bne.n	800926c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3308      	adds	r3, #8
 80092a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092be:	61fa      	str	r2, [r7, #28]
 80092c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	69b9      	ldr	r1, [r7, #24]
 80092c4:	69fa      	ldr	r2, [r7, #28]
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	617b      	str	r3, [r7, #20]
   return(result);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e5      	bne.n	800929e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e012      	b.n	800930c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3758      	adds	r7, #88	@ 0x58
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009324:	e04f      	b.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d04b      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932e:	f7f8 fd29 	bl	8001d84 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	429a      	cmp	r2, r3
 800933c:	d302      	bcc.n	8009344 <UART_WaitOnFlagUntilTimeout+0x30>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e04e      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d037      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b80      	cmp	r3, #128	@ 0x80
 800935a:	d034      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d031      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d110      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2208      	movs	r2, #8
 8009376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 f838 	bl	80093ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2208      	movs	r2, #8
 8009382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e029      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800939c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a0:	d111      	bne.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f81e 	bl	80093ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e00f      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69da      	ldr	r2, [r3, #28]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4013      	ands	r3, r2
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	bf0c      	ite	eq
 80093d6:	2301      	moveq	r3, #1
 80093d8:	2300      	movne	r3, #0
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d0a0      	beq.n	8009326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b095      	sub	sp, #84	@ 0x54
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800940a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009414:	643b      	str	r3, [r7, #64]	@ 0x40
 8009416:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800941a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	61fb      	str	r3, [r7, #28]
   return(result);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800943e:	f023 0301 	bic.w	r3, r3, #1
 8009442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3308      	adds	r3, #8
 800944a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800944c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800944e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e3      	bne.n	8009428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d118      	bne.n	800949a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60bb      	str	r3, [r7, #8]
   return(result);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0310 	bic.w	r3, r3, #16
 800947c:	647b      	str	r3, [r7, #68]	@ 0x44
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6979      	ldr	r1, [r7, #20]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094ae:	bf00      	nop
 80094b0:	3754      	adds	r7, #84	@ 0x54
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e027      	b.n	8009520 <HAL_UARTEx_DisableFifoMode+0x66>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	@ 0x24
 80094dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009540:	2302      	movs	r3, #2
 8009542:	e02d      	b.n	80095a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2224      	movs	r2, #36	@ 0x24
 8009550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f84f 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095bc:	2302      	movs	r3, #2
 80095be:	e02d      	b.n	800961c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2224      	movs	r2, #36	@ 0x24
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f811 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009644:	e031      	b.n	80096aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009646:	2308      	movs	r3, #8
 8009648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800964a:	2308      	movs	r3, #8
 800964c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	0e5b      	lsrs	r3, r3, #25
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	0f5b      	lsrs	r3, r3, #29
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	7b3a      	ldrb	r2, [r7, #12]
 8009672:	4911      	ldr	r1, [pc, #68]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009674:	5c8a      	ldrb	r2, [r1, r2]
 8009676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800967a:	7b3a      	ldrb	r2, [r7, #12]
 800967c:	490f      	ldr	r1, [pc, #60]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009680:	fb93 f3f2 	sdiv	r3, r3, r2
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	7b7a      	ldrb	r2, [r7, #13]
 8009690:	4909      	ldr	r1, [pc, #36]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009692:	5c8a      	ldrb	r2, [r1, r2]
 8009694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009698:	7b7a      	ldrb	r2, [r7, #13]
 800969a:	4908      	ldr	r1, [pc, #32]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800969c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800969e:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	0800c418 	.word	0x0800c418
 80096bc:	0800c420 	.word	0x0800c420

080096c0 <__cvt>:
 80096c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	ec57 6b10 	vmov	r6, r7, d0
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4619      	mov	r1, r3
 80096ce:	463b      	mov	r3, r7
 80096d0:	bfb4      	ite	lt
 80096d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80096d6:	2300      	movge	r3, #0
 80096d8:	4691      	mov	r9, r2
 80096da:	bfbf      	itttt	lt
 80096dc:	4632      	movlt	r2, r6
 80096de:	461f      	movlt	r7, r3
 80096e0:	232d      	movlt	r3, #45	@ 0x2d
 80096e2:	4616      	movlt	r6, r2
 80096e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80096e8:	700b      	strb	r3, [r1, #0]
 80096ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096ec:	f023 0820 	bic.w	r8, r3, #32
 80096f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096f4:	d005      	beq.n	8009702 <__cvt+0x42>
 80096f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80096fa:	d100      	bne.n	80096fe <__cvt+0x3e>
 80096fc:	3401      	adds	r4, #1
 80096fe:	2102      	movs	r1, #2
 8009700:	e000      	b.n	8009704 <__cvt+0x44>
 8009702:	2103      	movs	r1, #3
 8009704:	ab03      	add	r3, sp, #12
 8009706:	4622      	mov	r2, r4
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	ab02      	add	r3, sp, #8
 800970c:	ec47 6b10 	vmov	d0, r6, r7
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	4653      	mov	r3, sl
 8009714:	f000 fe70 	bl	800a3f8 <_dtoa_r>
 8009718:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800971c:	4605      	mov	r5, r0
 800971e:	d119      	bne.n	8009754 <__cvt+0x94>
 8009720:	f019 0f01 	tst.w	r9, #1
 8009724:	d00e      	beq.n	8009744 <__cvt+0x84>
 8009726:	eb00 0904 	add.w	r9, r0, r4
 800972a:	2200      	movs	r2, #0
 800972c:	2300      	movs	r3, #0
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f7 f9d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009736:	b108      	cbz	r0, 800973c <__cvt+0x7c>
 8009738:	f8cd 900c 	str.w	r9, [sp, #12]
 800973c:	2230      	movs	r2, #48	@ 0x30
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	454b      	cmp	r3, r9
 8009742:	d31e      	bcc.n	8009782 <__cvt+0xc2>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	4628      	mov	r0, r5
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	1b5b      	subs	r3, r3, r5
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	b004      	add	sp, #16
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009754:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009758:	eb00 0904 	add.w	r9, r0, r4
 800975c:	d1e5      	bne.n	800972a <__cvt+0x6a>
 800975e:	7803      	ldrb	r3, [r0, #0]
 8009760:	2b30      	cmp	r3, #48	@ 0x30
 8009762:	d10a      	bne.n	800977a <__cvt+0xba>
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f7 f9bc 	bl	8000ae8 <__aeabi_dcmpeq>
 8009770:	b918      	cbnz	r0, 800977a <__cvt+0xba>
 8009772:	f1c4 0401 	rsb	r4, r4, #1
 8009776:	f8ca 4000 	str.w	r4, [sl]
 800977a:	f8da 3000 	ldr.w	r3, [sl]
 800977e:	4499      	add	r9, r3
 8009780:	e7d3      	b.n	800972a <__cvt+0x6a>
 8009782:	1c59      	adds	r1, r3, #1
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	701a      	strb	r2, [r3, #0]
 8009788:	e7d9      	b.n	800973e <__cvt+0x7e>

0800978a <__exponent>:
 800978a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978c:	2900      	cmp	r1, #0
 800978e:	7002      	strb	r2, [r0, #0]
 8009790:	bfba      	itte	lt
 8009792:	4249      	neglt	r1, r1
 8009794:	232d      	movlt	r3, #45	@ 0x2d
 8009796:	232b      	movge	r3, #43	@ 0x2b
 8009798:	2909      	cmp	r1, #9
 800979a:	7043      	strb	r3, [r0, #1]
 800979c:	dd28      	ble.n	80097f0 <__exponent+0x66>
 800979e:	f10d 0307 	add.w	r3, sp, #7
 80097a2:	270a      	movs	r7, #10
 80097a4:	461d      	mov	r5, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80097ae:	fb07 1416 	mls	r4, r7, r6, r1
 80097b2:	3430      	adds	r4, #48	@ 0x30
 80097b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80097b8:	460c      	mov	r4, r1
 80097ba:	4631      	mov	r1, r6
 80097bc:	2c63      	cmp	r4, #99	@ 0x63
 80097be:	dcf2      	bgt.n	80097a6 <__exponent+0x1c>
 80097c0:	3130      	adds	r1, #48	@ 0x30
 80097c2:	1e94      	subs	r4, r2, #2
 80097c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097c8:	1c41      	adds	r1, r0, #1
 80097ca:	4623      	mov	r3, r4
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	d30a      	bcc.n	80097e6 <__exponent+0x5c>
 80097d0:	f10d 0309 	add.w	r3, sp, #9
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	42ac      	cmp	r4, r5
 80097d8:	bf88      	it	hi
 80097da:	2300      	movhi	r3, #0
 80097dc:	3302      	adds	r3, #2
 80097de:	4403      	add	r3, r0
 80097e0:	1a18      	subs	r0, r3, r0
 80097e2:	b003      	add	sp, #12
 80097e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097ee:	e7ed      	b.n	80097cc <__exponent+0x42>
 80097f0:	2330      	movs	r3, #48	@ 0x30
 80097f2:	3130      	adds	r1, #48	@ 0x30
 80097f4:	7083      	strb	r3, [r0, #2]
 80097f6:	1d03      	adds	r3, r0, #4
 80097f8:	70c1      	strb	r1, [r0, #3]
 80097fa:	e7f1      	b.n	80097e0 <__exponent+0x56>

080097fc <_printf_float>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	b08d      	sub	sp, #52	@ 0x34
 8009802:	460c      	mov	r4, r1
 8009804:	4616      	mov	r6, r2
 8009806:	461f      	mov	r7, r3
 8009808:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800980c:	4605      	mov	r5, r0
 800980e:	f000 fcdf 	bl	800a1d0 <_localeconv_r>
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	f7f6 fd3a 	bl	8000290 <strlen>
 800981c:	2300      	movs	r3, #0
 800981e:	9005      	str	r0, [sp, #20]
 8009820:	930a      	str	r3, [sp, #40]	@ 0x28
 8009822:	f8d8 3000 	ldr.w	r3, [r8]
 8009826:	f894 a018 	ldrb.w	sl, [r4, #24]
 800982a:	3307      	adds	r3, #7
 800982c:	f8d4 b000 	ldr.w	fp, [r4]
 8009830:	f023 0307 	bic.w	r3, r3, #7
 8009834:	f103 0208 	add.w	r2, r3, #8
 8009838:	f8c8 2000 	str.w	r2, [r8]
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009844:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009848:	f8cd 8018 	str.w	r8, [sp, #24]
 800984c:	9307      	str	r3, [sp, #28]
 800984e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ac4 <_printf_float+0x2c8>)
 8009850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009854:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009858:	f7f7 f978 	bl	8000b4c <__aeabi_dcmpun>
 800985c:	bb70      	cbnz	r0, 80098bc <_printf_float+0xc0>
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	4b98      	ldr	r3, [pc, #608]	@ (8009ac4 <_printf_float+0x2c8>)
 8009864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009868:	f7f7 f952 	bl	8000b10 <__aeabi_dcmple>
 800986c:	bb30      	cbnz	r0, 80098bc <_printf_float+0xc0>
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f7 f941 	bl	8000afc <__aeabi_dcmplt>
 800987a:	b110      	cbz	r0, 8009882 <_printf_float+0x86>
 800987c:	232d      	movs	r3, #45	@ 0x2d
 800987e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009882:	4a91      	ldr	r2, [pc, #580]	@ (8009ac8 <_printf_float+0x2cc>)
 8009884:	4b91      	ldr	r3, [pc, #580]	@ (8009acc <_printf_float+0x2d0>)
 8009886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800988a:	bf94      	ite	ls
 800988c:	4690      	movls	r8, r2
 800988e:	4698      	movhi	r8, r3
 8009890:	2303      	movs	r3, #3
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	f02b 0304 	bic.w	r3, fp, #4
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	4633      	mov	r3, r6
 80098a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80098a2:	4621      	mov	r1, r4
 80098a4:	4628      	mov	r0, r5
 80098a6:	9700      	str	r7, [sp, #0]
 80098a8:	f000 f9d2 	bl	8009c50 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	f040 808d 	bne.w	80099cc <_printf_float+0x1d0>
 80098b2:	f04f 30ff 	mov.w	r0, #4294967295
 80098b6:	b00d      	add	sp, #52	@ 0x34
 80098b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098bc:	4642      	mov	r2, r8
 80098be:	464b      	mov	r3, r9
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	f7f7 f942 	bl	8000b4c <__aeabi_dcmpun>
 80098c8:	b140      	cbz	r0, 80098dc <_printf_float+0xe0>
 80098ca:	464b      	mov	r3, r9
 80098cc:	4a80      	ldr	r2, [pc, #512]	@ (8009ad0 <_printf_float+0x2d4>)
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	bfbc      	itt	lt
 80098d2:	232d      	movlt	r3, #45	@ 0x2d
 80098d4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098d8:	4b7e      	ldr	r3, [pc, #504]	@ (8009ad4 <_printf_float+0x2d8>)
 80098da:	e7d4      	b.n	8009886 <_printf_float+0x8a>
 80098dc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	9206      	str	r2, [sp, #24]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	d13b      	bne.n	8009960 <_printf_float+0x164>
 80098e8:	2306      	movs	r3, #6
 80098ea:	6063      	str	r3, [r4, #4]
 80098ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80098f0:	2300      	movs	r3, #0
 80098f2:	4628      	mov	r0, r5
 80098f4:	6022      	str	r2, [r4, #0]
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80098fa:	e9cd a301 	strd	sl, r3, [sp, #4]
 80098fe:	ab09      	add	r3, sp, #36	@ 0x24
 8009900:	ec49 8b10 	vmov	d0, r8, r9
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800990a:	6861      	ldr	r1, [r4, #4]
 800990c:	f7ff fed8 	bl	80096c0 <__cvt>
 8009910:	9b06      	ldr	r3, [sp, #24]
 8009912:	4680      	mov	r8, r0
 8009914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009916:	2b47      	cmp	r3, #71	@ 0x47
 8009918:	d129      	bne.n	800996e <_printf_float+0x172>
 800991a:	1cc8      	adds	r0, r1, #3
 800991c:	db02      	blt.n	8009924 <_printf_float+0x128>
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	4299      	cmp	r1, r3
 8009922:	dd41      	ble.n	80099a8 <_printf_float+0x1ac>
 8009924:	f1aa 0a02 	sub.w	sl, sl, #2
 8009928:	fa5f fa8a 	uxtb.w	sl, sl
 800992c:	3901      	subs	r1, #1
 800992e:	4652      	mov	r2, sl
 8009930:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009934:	9109      	str	r1, [sp, #36]	@ 0x24
 8009936:	f7ff ff28 	bl	800978a <__exponent>
 800993a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800993c:	4681      	mov	r9, r0
 800993e:	1813      	adds	r3, r2, r0
 8009940:	2a01      	cmp	r2, #1
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	dc02      	bgt.n	800994c <_printf_float+0x150>
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	07d2      	lsls	r2, r2, #31
 800994a:	d501      	bpl.n	8009950 <_printf_float+0x154>
 800994c:	3301      	adds	r3, #1
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0a2      	beq.n	800989e <_printf_float+0xa2>
 8009958:	232d      	movs	r3, #45	@ 0x2d
 800995a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800995e:	e79e      	b.n	800989e <_printf_float+0xa2>
 8009960:	9a06      	ldr	r2, [sp, #24]
 8009962:	2a47      	cmp	r2, #71	@ 0x47
 8009964:	d1c2      	bne.n	80098ec <_printf_float+0xf0>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1c0      	bne.n	80098ec <_printf_float+0xf0>
 800996a:	2301      	movs	r3, #1
 800996c:	e7bd      	b.n	80098ea <_printf_float+0xee>
 800996e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009972:	d9db      	bls.n	800992c <_printf_float+0x130>
 8009974:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009978:	d118      	bne.n	80099ac <_printf_float+0x1b0>
 800997a:	2900      	cmp	r1, #0
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	dd0b      	ble.n	8009998 <_printf_float+0x19c>
 8009980:	6121      	str	r1, [r4, #16]
 8009982:	b913      	cbnz	r3, 800998a <_printf_float+0x18e>
 8009984:	6822      	ldr	r2, [r4, #0]
 8009986:	07d0      	lsls	r0, r2, #31
 8009988:	d502      	bpl.n	8009990 <_printf_float+0x194>
 800998a:	3301      	adds	r3, #1
 800998c:	440b      	add	r3, r1
 800998e:	6123      	str	r3, [r4, #16]
 8009990:	f04f 0900 	mov.w	r9, #0
 8009994:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009996:	e7db      	b.n	8009950 <_printf_float+0x154>
 8009998:	b913      	cbnz	r3, 80099a0 <_printf_float+0x1a4>
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	07d2      	lsls	r2, r2, #31
 800999e:	d501      	bpl.n	80099a4 <_printf_float+0x1a8>
 80099a0:	3302      	adds	r3, #2
 80099a2:	e7f4      	b.n	800998e <_printf_float+0x192>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7f2      	b.n	800998e <_printf_float+0x192>
 80099a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80099ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ae:	4299      	cmp	r1, r3
 80099b0:	db05      	blt.n	80099be <_printf_float+0x1c2>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	6121      	str	r1, [r4, #16]
 80099b6:	07d8      	lsls	r0, r3, #31
 80099b8:	d5ea      	bpl.n	8009990 <_printf_float+0x194>
 80099ba:	1c4b      	adds	r3, r1, #1
 80099bc:	e7e7      	b.n	800998e <_printf_float+0x192>
 80099be:	2900      	cmp	r1, #0
 80099c0:	bfd4      	ite	le
 80099c2:	f1c1 0202 	rsble	r2, r1, #2
 80099c6:	2201      	movgt	r2, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	e7e0      	b.n	800998e <_printf_float+0x192>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	055a      	lsls	r2, r3, #21
 80099d0:	d407      	bmi.n	80099e2 <_printf_float+0x1e6>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	4642      	mov	r2, r8
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	d12b      	bne.n	8009a38 <_printf_float+0x23c>
 80099e0:	e767      	b.n	80098b2 <_printf_float+0xb6>
 80099e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099e6:	f240 80dd 	bls.w	8009ba4 <_printf_float+0x3a8>
 80099ea:	2200      	movs	r2, #0
 80099ec:	2300      	movs	r3, #0
 80099ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099f2:	f7f7 f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d033      	beq.n	8009a62 <_printf_float+0x266>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4a36      	ldr	r2, [pc, #216]	@ (8009ad8 <_printf_float+0x2dc>)
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f af54 	beq.w	80098b2 <_printf_float+0xb6>
 8009a0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a0e:	4543      	cmp	r3, r8
 8009a10:	db02      	blt.n	8009a18 <_printf_float+0x21c>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	07d8      	lsls	r0, r3, #31
 8009a16:	d50f      	bpl.n	8009a38 <_printf_float+0x23c>
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af45 	beq.w	80098b2 <_printf_float+0xb6>
 8009a28:	f04f 0900 	mov.w	r9, #0
 8009a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a30:	f104 0a1a 	add.w	sl, r4, #26
 8009a34:	45c8      	cmp	r8, r9
 8009a36:	dc09      	bgt.n	8009a4c <_printf_float+0x250>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	079b      	lsls	r3, r3, #30
 8009a3c:	f100 8103 	bmi.w	8009c46 <_printf_float+0x44a>
 8009a40:	68e0      	ldr	r0, [r4, #12]
 8009a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a44:	4298      	cmp	r0, r3
 8009a46:	bfb8      	it	lt
 8009a48:	4618      	movlt	r0, r3
 8009a4a:	e734      	b.n	80098b6 <_printf_float+0xba>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f af2b 	beq.w	80098b2 <_printf_float+0xb6>
 8009a5c:	f109 0901 	add.w	r9, r9, #1
 8009a60:	e7e8      	b.n	8009a34 <_printf_float+0x238>
 8009a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	dc39      	bgt.n	8009adc <_printf_float+0x2e0>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad8 <_printf_float+0x2dc>)
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	f43f af1d 	beq.w	80098b2 <_printf_float+0xb6>
 8009a78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a7c:	ea59 0303 	orrs.w	r3, r9, r3
 8009a80:	d102      	bne.n	8009a88 <_printf_float+0x28c>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d5d7      	bpl.n	8009a38 <_printf_float+0x23c>
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	f43f af0d 	beq.w	80098b2 <_printf_float+0xb6>
 8009a98:	f04f 0a00 	mov.w	sl, #0
 8009a9c:	f104 0b1a 	add.w	fp, r4, #26
 8009aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa2:	425b      	negs	r3, r3
 8009aa4:	4553      	cmp	r3, sl
 8009aa6:	dc01      	bgt.n	8009aac <_printf_float+0x2b0>
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	e793      	b.n	80099d4 <_printf_float+0x1d8>
 8009aac:	2301      	movs	r3, #1
 8009aae:	465a      	mov	r2, fp
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f aefb 	beq.w	80098b2 <_printf_float+0xb6>
 8009abc:	f10a 0a01 	add.w	sl, sl, #1
 8009ac0:	e7ee      	b.n	8009aa0 <_printf_float+0x2a4>
 8009ac2:	bf00      	nop
 8009ac4:	7fefffff 	.word	0x7fefffff
 8009ac8:	0800c428 	.word	0x0800c428
 8009acc:	0800c42c 	.word	0x0800c42c
 8009ad0:	0800c430 	.word	0x0800c430
 8009ad4:	0800c434 	.word	0x0800c434
 8009ad8:	0800c438 	.word	0x0800c438
 8009adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ade:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ae2:	4553      	cmp	r3, sl
 8009ae4:	bfa8      	it	ge
 8009ae6:	4653      	movge	r3, sl
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	4699      	mov	r9, r3
 8009aec:	dc36      	bgt.n	8009b5c <_printf_float+0x360>
 8009aee:	f04f 0b00 	mov.w	fp, #0
 8009af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af6:	f104 021a 	add.w	r2, r4, #26
 8009afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009afc:	9306      	str	r3, [sp, #24]
 8009afe:	eba3 0309 	sub.w	r3, r3, r9
 8009b02:	455b      	cmp	r3, fp
 8009b04:	dc31      	bgt.n	8009b6a <_printf_float+0x36e>
 8009b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b08:	459a      	cmp	sl, r3
 8009b0a:	dc3a      	bgt.n	8009b82 <_printf_float+0x386>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	07da      	lsls	r2, r3, #31
 8009b10:	d437      	bmi.n	8009b82 <_printf_float+0x386>
 8009b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b14:	ebaa 0903 	sub.w	r9, sl, r3
 8009b18:	9b06      	ldr	r3, [sp, #24]
 8009b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8009b1e:	4599      	cmp	r9, r3
 8009b20:	bfa8      	it	ge
 8009b22:	4699      	movge	r9, r3
 8009b24:	f1b9 0f00 	cmp.w	r9, #0
 8009b28:	dc33      	bgt.n	8009b92 <_printf_float+0x396>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b32:	f104 0b1a 	add.w	fp, r4, #26
 8009b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b38:	ebaa 0303 	sub.w	r3, sl, r3
 8009b3c:	eba3 0309 	sub.w	r3, r3, r9
 8009b40:	4543      	cmp	r3, r8
 8009b42:	f77f af79 	ble.w	8009a38 <_printf_float+0x23c>
 8009b46:	2301      	movs	r3, #1
 8009b48:	465a      	mov	r2, fp
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f aeae 	beq.w	80098b2 <_printf_float+0xb6>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	e7ec      	b.n	8009b36 <_printf_float+0x33a>
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	d1c2      	bne.n	8009aee <_printf_float+0x2f2>
 8009b68:	e6a3      	b.n	80098b2 <_printf_float+0xb6>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	9206      	str	r2, [sp, #24]
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	f43f ae9c 	beq.w	80098b2 <_printf_float+0xb6>
 8009b7a:	f10b 0b01 	add.w	fp, fp, #1
 8009b7e:	9a06      	ldr	r2, [sp, #24]
 8009b80:	e7bb      	b.n	8009afa <_printf_float+0x2fe>
 8009b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d1c0      	bne.n	8009b12 <_printf_float+0x316>
 8009b90:	e68f      	b.n	80098b2 <_printf_float+0xb6>
 8009b92:	9a06      	ldr	r2, [sp, #24]
 8009b94:	464b      	mov	r3, r9
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	4442      	add	r2, r8
 8009b9c:	47b8      	blx	r7
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d1c3      	bne.n	8009b2a <_printf_float+0x32e>
 8009ba2:	e686      	b.n	80098b2 <_printf_float+0xb6>
 8009ba4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ba8:	f1ba 0f01 	cmp.w	sl, #1
 8009bac:	dc01      	bgt.n	8009bb2 <_printf_float+0x3b6>
 8009bae:	07db      	lsls	r3, r3, #31
 8009bb0:	d536      	bpl.n	8009c20 <_printf_float+0x424>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f ae78 	beq.w	80098b2 <_printf_float+0xb6>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f ae70 	beq.w	80098b2 <_printf_float+0xb6>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bde:	f7f6 ff83 	bl	8000ae8 <__aeabi_dcmpeq>
 8009be2:	b9c0      	cbnz	r0, 8009c16 <_printf_float+0x41a>
 8009be4:	4653      	mov	r3, sl
 8009be6:	f108 0201 	add.w	r2, r8, #1
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d10c      	bne.n	8009c0e <_printf_float+0x412>
 8009bf4:	e65d      	b.n	80098b2 <_printf_float+0xb6>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	465a      	mov	r2, fp
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b8      	blx	r7
 8009c00:	3001      	adds	r0, #1
 8009c02:	f43f ae56 	beq.w	80098b2 <_printf_float+0xb6>
 8009c06:	f108 0801 	add.w	r8, r8, #1
 8009c0a:	45d0      	cmp	r8, sl
 8009c0c:	dbf3      	blt.n	8009bf6 <_printf_float+0x3fa>
 8009c0e:	464b      	mov	r3, r9
 8009c10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009c14:	e6df      	b.n	80099d6 <_printf_float+0x1da>
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	f104 0b1a 	add.w	fp, r4, #26
 8009c1e:	e7f4      	b.n	8009c0a <_printf_float+0x40e>
 8009c20:	2301      	movs	r3, #1
 8009c22:	4642      	mov	r2, r8
 8009c24:	e7e1      	b.n	8009bea <_printf_float+0x3ee>
 8009c26:	2301      	movs	r3, #1
 8009c28:	464a      	mov	r2, r9
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f ae3e 	beq.w	80098b2 <_printf_float+0xb6>
 8009c36:	f108 0801 	add.w	r8, r8, #1
 8009c3a:	68e3      	ldr	r3, [r4, #12]
 8009c3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c3e:	1a5b      	subs	r3, r3, r1
 8009c40:	4543      	cmp	r3, r8
 8009c42:	dcf0      	bgt.n	8009c26 <_printf_float+0x42a>
 8009c44:	e6fc      	b.n	8009a40 <_printf_float+0x244>
 8009c46:	f04f 0800 	mov.w	r8, #0
 8009c4a:	f104 0919 	add.w	r9, r4, #25
 8009c4e:	e7f4      	b.n	8009c3a <_printf_float+0x43e>

08009c50 <_printf_common>:
 8009c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	4616      	mov	r6, r2
 8009c56:	4698      	mov	r8, r3
 8009c58:	688a      	ldr	r2, [r1, #8]
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	690b      	ldr	r3, [r1, #16]
 8009c5e:	460c      	mov	r4, r1
 8009c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c64:	4293      	cmp	r3, r2
 8009c66:	bfb8      	it	lt
 8009c68:	4613      	movlt	r3, r2
 8009c6a:	6033      	str	r3, [r6, #0]
 8009c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c70:	b10a      	cbz	r2, 8009c76 <_printf_common+0x26>
 8009c72:	3301      	adds	r3, #1
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	0699      	lsls	r1, r3, #26
 8009c7a:	bf42      	ittt	mi
 8009c7c:	6833      	ldrmi	r3, [r6, #0]
 8009c7e:	3302      	addmi	r3, #2
 8009c80:	6033      	strmi	r3, [r6, #0]
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	f015 0506 	ands.w	r5, r5, #6
 8009c88:	d106      	bne.n	8009c98 <_printf_common+0x48>
 8009c8a:	f104 0a19 	add.w	sl, r4, #25
 8009c8e:	68e3      	ldr	r3, [r4, #12]
 8009c90:	6832      	ldr	r2, [r6, #0]
 8009c92:	1a9b      	subs	r3, r3, r2
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	dc2b      	bgt.n	8009cf0 <_printf_common+0xa0>
 8009c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	3b00      	subs	r3, #0
 8009ca0:	bf18      	it	ne
 8009ca2:	2301      	movne	r3, #1
 8009ca4:	0692      	lsls	r2, r2, #26
 8009ca6:	d430      	bmi.n	8009d0a <_printf_common+0xba>
 8009ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009cac:	4641      	mov	r1, r8
 8009cae:	4638      	mov	r0, r7
 8009cb0:	47c8      	blx	r9
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d023      	beq.n	8009cfe <_printf_common+0xae>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	341a      	adds	r4, #26
 8009cba:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009cbe:	f003 0306 	and.w	r3, r3, #6
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	bf0a      	itet	eq
 8009cc6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009cca:	2500      	movne	r5, #0
 8009ccc:	6833      	ldreq	r3, [r6, #0]
 8009cce:	f04f 0600 	mov.w	r6, #0
 8009cd2:	bf08      	it	eq
 8009cd4:	1aed      	subeq	r5, r5, r3
 8009cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009cda:	bf08      	it	eq
 8009cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	bfc4      	itt	gt
 8009ce4:	1a9b      	subgt	r3, r3, r2
 8009ce6:	18ed      	addgt	r5, r5, r3
 8009ce8:	42b5      	cmp	r5, r6
 8009cea:	d11a      	bne.n	8009d22 <_printf_common+0xd2>
 8009cec:	2000      	movs	r0, #0
 8009cee:	e008      	b.n	8009d02 <_printf_common+0xb2>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	47c8      	blx	r9
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	d103      	bne.n	8009d06 <_printf_common+0xb6>
 8009cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d06:	3501      	adds	r5, #1
 8009d08:	e7c1      	b.n	8009c8e <_printf_common+0x3e>
 8009d0a:	18e1      	adds	r1, r4, r3
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	2030      	movs	r0, #48	@ 0x30
 8009d10:	3302      	adds	r3, #2
 8009d12:	4422      	add	r2, r4
 8009d14:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d20:	e7c2      	b.n	8009ca8 <_printf_common+0x58>
 8009d22:	2301      	movs	r3, #1
 8009d24:	4622      	mov	r2, r4
 8009d26:	4641      	mov	r1, r8
 8009d28:	4638      	mov	r0, r7
 8009d2a:	47c8      	blx	r9
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d0e6      	beq.n	8009cfe <_printf_common+0xae>
 8009d30:	3601      	adds	r6, #1
 8009d32:	e7d9      	b.n	8009ce8 <_printf_common+0x98>

08009d34 <_printf_i>:
 8009d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	7e0f      	ldrb	r7, [r1, #24]
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	2f78      	cmp	r7, #120	@ 0x78
 8009d42:	469a      	mov	sl, r3
 8009d44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d4a:	d807      	bhi.n	8009d5c <_printf_i+0x28>
 8009d4c:	2f62      	cmp	r7, #98	@ 0x62
 8009d4e:	d80a      	bhi.n	8009d66 <_printf_i+0x32>
 8009d50:	2f00      	cmp	r7, #0
 8009d52:	f000 80d2 	beq.w	8009efa <_printf_i+0x1c6>
 8009d56:	2f58      	cmp	r7, #88	@ 0x58
 8009d58:	f000 80b9 	beq.w	8009ece <_printf_i+0x19a>
 8009d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d64:	e03a      	b.n	8009ddc <_printf_i+0xa8>
 8009d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d6a:	2b15      	cmp	r3, #21
 8009d6c:	d8f6      	bhi.n	8009d5c <_printf_i+0x28>
 8009d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8009d74 <_printf_i+0x40>)
 8009d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d74:	08009dcd 	.word	0x08009dcd
 8009d78:	08009de1 	.word	0x08009de1
 8009d7c:	08009d5d 	.word	0x08009d5d
 8009d80:	08009d5d 	.word	0x08009d5d
 8009d84:	08009d5d 	.word	0x08009d5d
 8009d88:	08009d5d 	.word	0x08009d5d
 8009d8c:	08009de1 	.word	0x08009de1
 8009d90:	08009d5d 	.word	0x08009d5d
 8009d94:	08009d5d 	.word	0x08009d5d
 8009d98:	08009d5d 	.word	0x08009d5d
 8009d9c:	08009d5d 	.word	0x08009d5d
 8009da0:	08009ee1 	.word	0x08009ee1
 8009da4:	08009e0b 	.word	0x08009e0b
 8009da8:	08009e9b 	.word	0x08009e9b
 8009dac:	08009d5d 	.word	0x08009d5d
 8009db0:	08009d5d 	.word	0x08009d5d
 8009db4:	08009f03 	.word	0x08009f03
 8009db8:	08009d5d 	.word	0x08009d5d
 8009dbc:	08009e0b 	.word	0x08009e0b
 8009dc0:	08009d5d 	.word	0x08009d5d
 8009dc4:	08009d5d 	.word	0x08009d5d
 8009dc8:	08009ea3 	.word	0x08009ea3
 8009dcc:	6833      	ldr	r3, [r6, #0]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6032      	str	r2, [r6, #0]
 8009dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e09d      	b.n	8009f1c <_printf_i+0x1e8>
 8009de0:	6833      	ldr	r3, [r6, #0]
 8009de2:	6820      	ldr	r0, [r4, #0]
 8009de4:	1d19      	adds	r1, r3, #4
 8009de6:	6031      	str	r1, [r6, #0]
 8009de8:	0606      	lsls	r6, r0, #24
 8009dea:	d501      	bpl.n	8009df0 <_printf_i+0xbc>
 8009dec:	681d      	ldr	r5, [r3, #0]
 8009dee:	e003      	b.n	8009df8 <_printf_i+0xc4>
 8009df0:	0645      	lsls	r5, r0, #25
 8009df2:	d5fb      	bpl.n	8009dec <_printf_i+0xb8>
 8009df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	da03      	bge.n	8009e04 <_printf_i+0xd0>
 8009dfc:	232d      	movs	r3, #45	@ 0x2d
 8009dfe:	426d      	negs	r5, r5
 8009e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e04:	4859      	ldr	r0, [pc, #356]	@ (8009f6c <_printf_i+0x238>)
 8009e06:	230a      	movs	r3, #10
 8009e08:	e011      	b.n	8009e2e <_printf_i+0xfa>
 8009e0a:	6821      	ldr	r1, [r4, #0]
 8009e0c:	6833      	ldr	r3, [r6, #0]
 8009e0e:	0608      	lsls	r0, r1, #24
 8009e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e14:	d402      	bmi.n	8009e1c <_printf_i+0xe8>
 8009e16:	0649      	lsls	r1, r1, #25
 8009e18:	bf48      	it	mi
 8009e1a:	b2ad      	uxthmi	r5, r5
 8009e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	4852      	ldr	r0, [pc, #328]	@ (8009f6c <_printf_i+0x238>)
 8009e22:	bf14      	ite	ne
 8009e24:	230a      	movne	r3, #10
 8009e26:	2308      	moveq	r3, #8
 8009e28:	2100      	movs	r1, #0
 8009e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e2e:	6866      	ldr	r6, [r4, #4]
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	60a6      	str	r6, [r4, #8]
 8009e34:	bfa2      	ittt	ge
 8009e36:	6821      	ldrge	r1, [r4, #0]
 8009e38:	f021 0104 	bicge.w	r1, r1, #4
 8009e3c:	6021      	strge	r1, [r4, #0]
 8009e3e:	b90d      	cbnz	r5, 8009e44 <_printf_i+0x110>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	d04b      	beq.n	8009edc <_printf_i+0x1a8>
 8009e44:	4616      	mov	r6, r2
 8009e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8009e4e:	5dc7      	ldrb	r7, [r0, r7]
 8009e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e54:	462f      	mov	r7, r5
 8009e56:	460d      	mov	r5, r1
 8009e58:	42bb      	cmp	r3, r7
 8009e5a:	d9f4      	bls.n	8009e46 <_printf_i+0x112>
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d10b      	bne.n	8009e78 <_printf_i+0x144>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	07df      	lsls	r7, r3, #31
 8009e64:	d508      	bpl.n	8009e78 <_printf_i+0x144>
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	6861      	ldr	r1, [r4, #4]
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	bfde      	ittt	le
 8009e6e:	2330      	movle	r3, #48	@ 0x30
 8009e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e78:	1b92      	subs	r2, r2, r6
 8009e7a:	6122      	str	r2, [r4, #16]
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	aa03      	add	r2, sp, #12
 8009e80:	4621      	mov	r1, r4
 8009e82:	4640      	mov	r0, r8
 8009e84:	f8cd a000 	str.w	sl, [sp]
 8009e88:	f7ff fee2 	bl	8009c50 <_printf_common>
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d14a      	bne.n	8009f26 <_printf_i+0x1f2>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	b004      	add	sp, #16
 8009e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	f043 0320 	orr.w	r3, r3, #32
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	2778      	movs	r7, #120	@ 0x78
 8009ea4:	4832      	ldr	r0, [pc, #200]	@ (8009f70 <_printf_i+0x23c>)
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009eac:	061f      	lsls	r7, r3, #24
 8009eae:	6831      	ldr	r1, [r6, #0]
 8009eb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009eb4:	d402      	bmi.n	8009ebc <_printf_i+0x188>
 8009eb6:	065f      	lsls	r7, r3, #25
 8009eb8:	bf48      	it	mi
 8009eba:	b2ad      	uxthmi	r5, r5
 8009ebc:	6031      	str	r1, [r6, #0]
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	bf44      	itt	mi
 8009ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ec6:	6023      	strmi	r3, [r4, #0]
 8009ec8:	b11d      	cbz	r5, 8009ed2 <_printf_i+0x19e>
 8009eca:	2310      	movs	r3, #16
 8009ecc:	e7ac      	b.n	8009e28 <_printf_i+0xf4>
 8009ece:	4827      	ldr	r0, [pc, #156]	@ (8009f6c <_printf_i+0x238>)
 8009ed0:	e7e9      	b.n	8009ea6 <_printf_i+0x172>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	f023 0320 	bic.w	r3, r3, #32
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	e7f6      	b.n	8009eca <_printf_i+0x196>
 8009edc:	4616      	mov	r6, r2
 8009ede:	e7bd      	b.n	8009e5c <_printf_i+0x128>
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	6825      	ldr	r5, [r4, #0]
 8009ee4:	1d18      	adds	r0, r3, #4
 8009ee6:	6961      	ldr	r1, [r4, #20]
 8009ee8:	6030      	str	r0, [r6, #0]
 8009eea:	062e      	lsls	r6, r5, #24
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	d501      	bpl.n	8009ef4 <_printf_i+0x1c0>
 8009ef0:	6019      	str	r1, [r3, #0]
 8009ef2:	e002      	b.n	8009efa <_printf_i+0x1c6>
 8009ef4:	0668      	lsls	r0, r5, #25
 8009ef6:	d5fb      	bpl.n	8009ef0 <_printf_i+0x1bc>
 8009ef8:	8019      	strh	r1, [r3, #0]
 8009efa:	2300      	movs	r3, #0
 8009efc:	4616      	mov	r6, r2
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	e7bc      	b.n	8009e7c <_printf_i+0x148>
 8009f02:	6833      	ldr	r3, [r6, #0]
 8009f04:	2100      	movs	r1, #0
 8009f06:	1d1a      	adds	r2, r3, #4
 8009f08:	6032      	str	r2, [r6, #0]
 8009f0a:	681e      	ldr	r6, [r3, #0]
 8009f0c:	6862      	ldr	r2, [r4, #4]
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f9d5 	bl	800a2be <memchr>
 8009f14:	b108      	cbz	r0, 8009f1a <_printf_i+0x1e6>
 8009f16:	1b80      	subs	r0, r0, r6
 8009f18:	6060      	str	r0, [r4, #4]
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	6123      	str	r3, [r4, #16]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f24:	e7aa      	b.n	8009e7c <_printf_i+0x148>
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	4632      	mov	r2, r6
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	47d0      	blx	sl
 8009f30:	3001      	adds	r0, #1
 8009f32:	d0ad      	beq.n	8009e90 <_printf_i+0x15c>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	079b      	lsls	r3, r3, #30
 8009f38:	d413      	bmi.n	8009f62 <_printf_i+0x22e>
 8009f3a:	68e0      	ldr	r0, [r4, #12]
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	bfb8      	it	lt
 8009f42:	4618      	movlt	r0, r3
 8009f44:	e7a6      	b.n	8009e94 <_printf_i+0x160>
 8009f46:	2301      	movs	r3, #1
 8009f48:	4632      	mov	r2, r6
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	47d0      	blx	sl
 8009f50:	3001      	adds	r0, #1
 8009f52:	d09d      	beq.n	8009e90 <_printf_i+0x15c>
 8009f54:	3501      	adds	r5, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	9903      	ldr	r1, [sp, #12]
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	42ab      	cmp	r3, r5
 8009f5e:	dcf2      	bgt.n	8009f46 <_printf_i+0x212>
 8009f60:	e7eb      	b.n	8009f3a <_printf_i+0x206>
 8009f62:	2500      	movs	r5, #0
 8009f64:	f104 0619 	add.w	r6, r4, #25
 8009f68:	e7f5      	b.n	8009f56 <_printf_i+0x222>
 8009f6a:	bf00      	nop
 8009f6c:	0800c43a 	.word	0x0800c43a
 8009f70:	0800c44b 	.word	0x0800c44b

08009f74 <std>:
 8009f74:	2300      	movs	r3, #0
 8009f76:	b510      	push	{r4, lr}
 8009f78:	4604      	mov	r4, r0
 8009f7a:	6083      	str	r3, [r0, #8]
 8009f7c:	8181      	strh	r1, [r0, #12]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f82:	81c2      	strh	r2, [r0, #14]
 8009f84:	2208      	movs	r2, #8
 8009f86:	6183      	str	r3, [r0, #24]
 8009f88:	e9c0 3300 	strd	r3, r3, [r0]
 8009f8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f90:	305c      	adds	r0, #92	@ 0x5c
 8009f92:	f000 f914 	bl	800a1be <memset>
 8009f96:	4b0d      	ldr	r3, [pc, #52]	@ (8009fcc <std+0x58>)
 8009f98:	6224      	str	r4, [r4, #32]
 8009f9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd0 <std+0x5c>)
 8009f9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <std+0x60>)
 8009fa2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd8 <std+0x64>)
 8009fa6:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8009fdc <std+0x68>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d006      	beq.n	8009fbc <std+0x48>
 8009fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fb2:	4294      	cmp	r4, r2
 8009fb4:	d002      	beq.n	8009fbc <std+0x48>
 8009fb6:	33d0      	adds	r3, #208	@ 0xd0
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	d105      	bne.n	8009fc8 <std+0x54>
 8009fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fc4:	f000 b978 	b.w	800a2b8 <__retarget_lock_init_recursive>
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	bf00      	nop
 8009fcc:	0800a139 	.word	0x0800a139
 8009fd0:	0800a15b 	.word	0x0800a15b
 8009fd4:	0800a193 	.word	0x0800a193
 8009fd8:	0800a1b7 	.word	0x0800a1b7
 8009fdc:	2000031c 	.word	0x2000031c

08009fe0 <stdio_exit_handler>:
 8009fe0:	4a02      	ldr	r2, [pc, #8]	@ (8009fec <stdio_exit_handler+0xc>)
 8009fe2:	4903      	ldr	r1, [pc, #12]	@ (8009ff0 <stdio_exit_handler+0x10>)
 8009fe4:	4803      	ldr	r0, [pc, #12]	@ (8009ff4 <stdio_exit_handler+0x14>)
 8009fe6:	f000 b869 	b.w	800a0bc <_fwalk_sglue>
 8009fea:	bf00      	nop
 8009fec:	2000000c 	.word	0x2000000c
 8009ff0:	0800bc49 	.word	0x0800bc49
 8009ff4:	2000001c 	.word	0x2000001c

08009ff8 <cleanup_stdio>:
 8009ff8:	6841      	ldr	r1, [r0, #4]
 8009ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800a02c <cleanup_stdio+0x34>)
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	b510      	push	{r4, lr}
 800a000:	4604      	mov	r4, r0
 800a002:	d001      	beq.n	800a008 <cleanup_stdio+0x10>
 800a004:	f001 fe20 	bl	800bc48 <_fflush_r>
 800a008:	68a1      	ldr	r1, [r4, #8]
 800a00a:	4b09      	ldr	r3, [pc, #36]	@ (800a030 <cleanup_stdio+0x38>)
 800a00c:	4299      	cmp	r1, r3
 800a00e:	d002      	beq.n	800a016 <cleanup_stdio+0x1e>
 800a010:	4620      	mov	r0, r4
 800a012:	f001 fe19 	bl	800bc48 <_fflush_r>
 800a016:	68e1      	ldr	r1, [r4, #12]
 800a018:	4b06      	ldr	r3, [pc, #24]	@ (800a034 <cleanup_stdio+0x3c>)
 800a01a:	4299      	cmp	r1, r3
 800a01c:	d004      	beq.n	800a028 <cleanup_stdio+0x30>
 800a01e:	4620      	mov	r0, r4
 800a020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a024:	f001 be10 	b.w	800bc48 <_fflush_r>
 800a028:	bd10      	pop	{r4, pc}
 800a02a:	bf00      	nop
 800a02c:	2000031c 	.word	0x2000031c
 800a030:	20000384 	.word	0x20000384
 800a034:	200003ec 	.word	0x200003ec

0800a038 <global_stdio_init.part.0>:
 800a038:	b510      	push	{r4, lr}
 800a03a:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <global_stdio_init.part.0+0x30>)
 800a03c:	2104      	movs	r1, #4
 800a03e:	4c0b      	ldr	r4, [pc, #44]	@ (800a06c <global_stdio_init.part.0+0x34>)
 800a040:	4a0b      	ldr	r2, [pc, #44]	@ (800a070 <global_stdio_init.part.0+0x38>)
 800a042:	4620      	mov	r0, r4
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	2200      	movs	r2, #0
 800a048:	f7ff ff94 	bl	8009f74 <std>
 800a04c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a050:	2201      	movs	r2, #1
 800a052:	2109      	movs	r1, #9
 800a054:	f7ff ff8e 	bl	8009f74 <std>
 800a058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a05c:	2202      	movs	r2, #2
 800a05e:	2112      	movs	r1, #18
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f7ff bf86 	b.w	8009f74 <std>
 800a068:	20000454 	.word	0x20000454
 800a06c:	2000031c 	.word	0x2000031c
 800a070:	08009fe1 	.word	0x08009fe1

0800a074 <__sfp_lock_acquire>:
 800a074:	4801      	ldr	r0, [pc, #4]	@ (800a07c <__sfp_lock_acquire+0x8>)
 800a076:	f000 b920 	b.w	800a2ba <__retarget_lock_acquire_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000045d 	.word	0x2000045d

0800a080 <__sfp_lock_release>:
 800a080:	4801      	ldr	r0, [pc, #4]	@ (800a088 <__sfp_lock_release+0x8>)
 800a082:	f000 b91b 	b.w	800a2bc <__retarget_lock_release_recursive>
 800a086:	bf00      	nop
 800a088:	2000045d 	.word	0x2000045d

0800a08c <__sinit>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4604      	mov	r4, r0
 800a090:	f7ff fff0 	bl	800a074 <__sfp_lock_acquire>
 800a094:	6a23      	ldr	r3, [r4, #32]
 800a096:	b11b      	cbz	r3, 800a0a0 <__sinit+0x14>
 800a098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a09c:	f7ff bff0 	b.w	800a080 <__sfp_lock_release>
 800a0a0:	4b04      	ldr	r3, [pc, #16]	@ (800a0b4 <__sinit+0x28>)
 800a0a2:	6223      	str	r3, [r4, #32]
 800a0a4:	4b04      	ldr	r3, [pc, #16]	@ (800a0b8 <__sinit+0x2c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f5      	bne.n	800a098 <__sinit+0xc>
 800a0ac:	f7ff ffc4 	bl	800a038 <global_stdio_init.part.0>
 800a0b0:	e7f2      	b.n	800a098 <__sinit+0xc>
 800a0b2:	bf00      	nop
 800a0b4:	08009ff9 	.word	0x08009ff9
 800a0b8:	20000454 	.word	0x20000454

0800a0bc <_fwalk_sglue>:
 800a0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	4688      	mov	r8, r1
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a0d0:	d505      	bpl.n	800a0de <_fwalk_sglue+0x22>
 800a0d2:	6824      	ldr	r4, [r4, #0]
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d1f7      	bne.n	800a0c8 <_fwalk_sglue+0xc>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d907      	bls.n	800a0f4 <_fwalk_sglue+0x38>
 800a0e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	d003      	beq.n	800a0f4 <_fwalk_sglue+0x38>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	47c0      	blx	r8
 800a0f2:	4306      	orrs	r6, r0
 800a0f4:	3568      	adds	r5, #104	@ 0x68
 800a0f6:	e7e9      	b.n	800a0cc <_fwalk_sglue+0x10>

0800a0f8 <siprintf>:
 800a0f8:	b40e      	push	{r1, r2, r3}
 800a0fa:	b500      	push	{lr}
 800a0fc:	b09c      	sub	sp, #112	@ 0x70
 800a0fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a102:	ab1d      	add	r3, sp, #116	@ 0x74
 800a104:	9002      	str	r0, [sp, #8]
 800a106:	9006      	str	r0, [sp, #24]
 800a108:	9107      	str	r1, [sp, #28]
 800a10a:	9104      	str	r1, [sp, #16]
 800a10c:	4808      	ldr	r0, [pc, #32]	@ (800a130 <siprintf+0x38>)
 800a10e:	4909      	ldr	r1, [pc, #36]	@ (800a134 <siprintf+0x3c>)
 800a110:	f853 2b04 	ldr.w	r2, [r3], #4
 800a114:	9105      	str	r1, [sp, #20]
 800a116:	a902      	add	r1, sp, #8
 800a118:	6800      	ldr	r0, [r0, #0]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	f001 fc14 	bl	800b948 <_svfiprintf_r>
 800a120:	9b02      	ldr	r3, [sp, #8]
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	b01c      	add	sp, #112	@ 0x70
 800a128:	f85d eb04 	ldr.w	lr, [sp], #4
 800a12c:	b003      	add	sp, #12
 800a12e:	4770      	bx	lr
 800a130:	20000018 	.word	0x20000018
 800a134:	ffff0208 	.word	0xffff0208

0800a138 <__sread>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	f000 f86c 	bl	800a21c <_read_r>
 800a144:	2800      	cmp	r0, #0
 800a146:	bfab      	itete	ge
 800a148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a14a:	89a3      	ldrhlt	r3, [r4, #12]
 800a14c:	181b      	addge	r3, r3, r0
 800a14e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a152:	bfac      	ite	ge
 800a154:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a156:	81a3      	strhlt	r3, [r4, #12]
 800a158:	bd10      	pop	{r4, pc}

0800a15a <__swrite>:
 800a15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15e:	461f      	mov	r7, r3
 800a160:	898b      	ldrh	r3, [r1, #12]
 800a162:	4605      	mov	r5, r0
 800a164:	460c      	mov	r4, r1
 800a166:	05db      	lsls	r3, r3, #23
 800a168:	4616      	mov	r6, r2
 800a16a:	d505      	bpl.n	800a178 <__swrite+0x1e>
 800a16c:	2302      	movs	r3, #2
 800a16e:	2200      	movs	r2, #0
 800a170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a174:	f000 f840 	bl	800a1f8 <_lseek_r>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	4632      	mov	r2, r6
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4628      	mov	r0, r5
 800a182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	463b      	mov	r3, r7
 800a18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a18e:	f000 b857 	b.w	800a240 <_write_r>

0800a192 <__sseek>:
 800a192:	b510      	push	{r4, lr}
 800a194:	460c      	mov	r4, r1
 800a196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19a:	f000 f82d 	bl	800a1f8 <_lseek_r>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	bf15      	itete	ne
 800a1a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1ae:	81a3      	strheq	r3, [r4, #12]
 800a1b0:	bf18      	it	ne
 800a1b2:	81a3      	strhne	r3, [r4, #12]
 800a1b4:	bd10      	pop	{r4, pc}

0800a1b6 <__sclose>:
 800a1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ba:	f000 b80d 	b.w	800a1d8 <_close_r>

0800a1be <memset>:
 800a1be:	4402      	add	r2, r0
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d100      	bne.n	800a1c8 <memset+0xa>
 800a1c6:	4770      	bx	lr
 800a1c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a1cc:	e7f9      	b.n	800a1c2 <memset+0x4>
	...

0800a1d0 <_localeconv_r>:
 800a1d0:	4800      	ldr	r0, [pc, #0]	@ (800a1d4 <_localeconv_r+0x4>)
 800a1d2:	4770      	bx	lr
 800a1d4:	20000158 	.word	0x20000158

0800a1d8 <_close_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4d05      	ldr	r5, [pc, #20]	@ (800a1f4 <_close_r+0x1c>)
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f7 fc0b 	bl	80019fe <_close>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_close_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_close_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20000458 	.word	0x20000458

0800a1f8 <_lseek_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4d06      	ldr	r5, [pc, #24]	@ (800a218 <_lseek_r+0x20>)
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7f7 fc20 	bl	8001a4c <_lseek>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_lseek_r+0x1e>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_lseek_r+0x1e>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	20000458 	.word	0x20000458

0800a21c <_read_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	4d06      	ldr	r5, [pc, #24]	@ (800a23c <_read_r+0x20>)
 800a222:	4608      	mov	r0, r1
 800a224:	4611      	mov	r1, r2
 800a226:	2200      	movs	r2, #0
 800a228:	602a      	str	r2, [r5, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f7f7 fbae 	bl	800198c <_read>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_read_r+0x1e>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_read_r+0x1e>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	20000458 	.word	0x20000458

0800a240 <_write_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4604      	mov	r4, r0
 800a244:	4d06      	ldr	r5, [pc, #24]	@ (800a260 <_write_r+0x20>)
 800a246:	4608      	mov	r0, r1
 800a248:	4611      	mov	r1, r2
 800a24a:	2200      	movs	r2, #0
 800a24c:	602a      	str	r2, [r5, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	f7f7 fbb9 	bl	80019c6 <_write>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_write_r+0x1e>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_write_r+0x1e>
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20000458 	.word	0x20000458

0800a264 <__errno>:
 800a264:	4b01      	ldr	r3, [pc, #4]	@ (800a26c <__errno+0x8>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20000018 	.word	0x20000018

0800a270 <__libc_init_array>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	4d0d      	ldr	r5, [pc, #52]	@ (800a2a8 <__libc_init_array+0x38>)
 800a274:	2600      	movs	r6, #0
 800a276:	4c0d      	ldr	r4, [pc, #52]	@ (800a2ac <__libc_init_array+0x3c>)
 800a278:	1b64      	subs	r4, r4, r5
 800a27a:	10a4      	asrs	r4, r4, #2
 800a27c:	42a6      	cmp	r6, r4
 800a27e:	d109      	bne.n	800a294 <__libc_init_array+0x24>
 800a280:	4d0b      	ldr	r5, [pc, #44]	@ (800a2b0 <__libc_init_array+0x40>)
 800a282:	2600      	movs	r6, #0
 800a284:	4c0b      	ldr	r4, [pc, #44]	@ (800a2b4 <__libc_init_array+0x44>)
 800a286:	f002 f87d 	bl	800c384 <_init>
 800a28a:	1b64      	subs	r4, r4, r5
 800a28c:	10a4      	asrs	r4, r4, #2
 800a28e:	42a6      	cmp	r6, r4
 800a290:	d105      	bne.n	800a29e <__libc_init_array+0x2e>
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	f855 3b04 	ldr.w	r3, [r5], #4
 800a298:	3601      	adds	r6, #1
 800a29a:	4798      	blx	r3
 800a29c:	e7ee      	b.n	800a27c <__libc_init_array+0xc>
 800a29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2a2:	3601      	adds	r6, #1
 800a2a4:	4798      	blx	r3
 800a2a6:	e7f2      	b.n	800a28e <__libc_init_array+0x1e>
 800a2a8:	0800c7a0 	.word	0x0800c7a0
 800a2ac:	0800c7a0 	.word	0x0800c7a0
 800a2b0:	0800c7a0 	.word	0x0800c7a0
 800a2b4:	0800c7a4 	.word	0x0800c7a4

0800a2b8 <__retarget_lock_init_recursive>:
 800a2b8:	4770      	bx	lr

0800a2ba <__retarget_lock_acquire_recursive>:
 800a2ba:	4770      	bx	lr

0800a2bc <__retarget_lock_release_recursive>:
 800a2bc:	4770      	bx	lr

0800a2be <memchr>:
 800a2be:	b2c9      	uxtb	r1, r1
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4402      	add	r2, r0
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	d101      	bne.n	800a2d0 <memchr+0x12>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e003      	b.n	800a2d8 <memchr+0x1a>
 800a2d0:	7804      	ldrb	r4, [r0, #0]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	428c      	cmp	r4, r1
 800a2d6:	d1f6      	bne.n	800a2c6 <memchr+0x8>
 800a2d8:	bd10      	pop	{r4, pc}

0800a2da <quorem>:
 800a2da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2de:	6903      	ldr	r3, [r0, #16]
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	690c      	ldr	r4, [r1, #16]
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	f2c0 8083 	blt.w	800a3f0 <quorem+0x116>
 800a2ea:	3c01      	subs	r4, #1
 800a2ec:	f100 0514 	add.w	r5, r0, #20
 800a2f0:	f101 0814 	add.w	r8, r1, #20
 800a2f4:	00a3      	lsls	r3, r4, #2
 800a2f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a30a:	3301      	adds	r3, #1
 800a30c:	429a      	cmp	r2, r3
 800a30e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a312:	d331      	bcc.n	800a378 <quorem+0x9e>
 800a314:	f04f 0a00 	mov.w	sl, #0
 800a318:	46c4      	mov	ip, r8
 800a31a:	46ae      	mov	lr, r5
 800a31c:	46d3      	mov	fp, sl
 800a31e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a322:	b298      	uxth	r0, r3
 800a324:	45e1      	cmp	r9, ip
 800a326:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a32a:	fb06 a000 	mla	r0, r6, r0, sl
 800a32e:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a332:	b280      	uxth	r0, r0
 800a334:	fb06 2303 	mla	r3, r6, r3, r2
 800a338:	f8de 2000 	ldr.w	r2, [lr]
 800a33c:	b292      	uxth	r2, r2
 800a33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a342:	eba2 0200 	sub.w	r2, r2, r0
 800a346:	b29b      	uxth	r3, r3
 800a348:	f8de 0000 	ldr.w	r0, [lr]
 800a34c:	445a      	add	r2, fp
 800a34e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a352:	b292      	uxth	r2, r2
 800a354:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a358:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a35c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a360:	f84e 2b04 	str.w	r2, [lr], #4
 800a364:	d2db      	bcs.n	800a31e <quorem+0x44>
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	58eb      	ldr	r3, [r5, r3]
 800a36a:	b92b      	cbnz	r3, 800a378 <quorem+0x9e>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	3b04      	subs	r3, #4
 800a370:	429d      	cmp	r5, r3
 800a372:	461a      	mov	r2, r3
 800a374:	d330      	bcc.n	800a3d8 <quorem+0xfe>
 800a376:	613c      	str	r4, [r7, #16]
 800a378:	4638      	mov	r0, r7
 800a37a:	f001 f97d 	bl	800b678 <__mcmp>
 800a37e:	2800      	cmp	r0, #0
 800a380:	db26      	blt.n	800a3d0 <quorem+0xf6>
 800a382:	4629      	mov	r1, r5
 800a384:	2000      	movs	r0, #0
 800a386:	f858 2b04 	ldr.w	r2, [r8], #4
 800a38a:	f8d1 c000 	ldr.w	ip, [r1]
 800a38e:	fa1f fe82 	uxth.w	lr, r2
 800a392:	45c1      	cmp	r9, r8
 800a394:	fa1f f38c 	uxth.w	r3, ip
 800a398:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a39c:	eba3 030e 	sub.w	r3, r3, lr
 800a3a0:	4403      	add	r3, r0
 800a3a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a3ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3b4:	f841 3b04 	str.w	r3, [r1], #4
 800a3b8:	d2e5      	bcs.n	800a386 <quorem+0xac>
 800a3ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3c2:	b922      	cbnz	r2, 800a3ce <quorem+0xf4>
 800a3c4:	3b04      	subs	r3, #4
 800a3c6:	429d      	cmp	r5, r3
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	d30b      	bcc.n	800a3e4 <quorem+0x10a>
 800a3cc:	613c      	str	r4, [r7, #16]
 800a3ce:	3601      	adds	r6, #1
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	b003      	add	sp, #12
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	3b04      	subs	r3, #4
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	d1ca      	bne.n	800a376 <quorem+0x9c>
 800a3e0:	3c01      	subs	r4, #1
 800a3e2:	e7c5      	b.n	800a370 <quorem+0x96>
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	3b04      	subs	r3, #4
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1ef      	bne.n	800a3cc <quorem+0xf2>
 800a3ec:	3c01      	subs	r4, #1
 800a3ee:	e7ea      	b.n	800a3c6 <quorem+0xec>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7ee      	b.n	800a3d2 <quorem+0xf8>
 800a3f4:	0000      	movs	r0, r0
	...

0800a3f8 <_dtoa_r>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	69c7      	ldr	r7, [r0, #28]
 800a3fe:	b099      	sub	sp, #100	@ 0x64
 800a400:	4683      	mov	fp, r0
 800a402:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a404:	9109      	str	r1, [sp, #36]	@ 0x24
 800a406:	920e      	str	r2, [sp, #56]	@ 0x38
 800a408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a40a:	ec55 4b10 	vmov	r4, r5, d0
 800a40e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a412:	b97f      	cbnz	r7, 800a434 <_dtoa_r+0x3c>
 800a414:	2010      	movs	r0, #16
 800a416:	f000 fdfd 	bl	800b014 <malloc>
 800a41a:	4602      	mov	r2, r0
 800a41c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a420:	b920      	cbnz	r0, 800a42c <_dtoa_r+0x34>
 800a422:	4ba7      	ldr	r3, [pc, #668]	@ (800a6c0 <_dtoa_r+0x2c8>)
 800a424:	21ef      	movs	r1, #239	@ 0xef
 800a426:	48a7      	ldr	r0, [pc, #668]	@ (800a6c4 <_dtoa_r+0x2cc>)
 800a428:	f001 fc6e 	bl	800bd08 <__assert_func>
 800a42c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a430:	6007      	str	r7, [r0, #0]
 800a432:	60c7      	str	r7, [r0, #12]
 800a434:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	b159      	cbz	r1, 800a454 <_dtoa_r+0x5c>
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	2301      	movs	r3, #1
 800a440:	4658      	mov	r0, fp
 800a442:	4093      	lsls	r3, r2
 800a444:	604a      	str	r2, [r1, #4]
 800a446:	608b      	str	r3, [r1, #8]
 800a448:	f000 feda 	bl	800b200 <_Bfree>
 800a44c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	1e2b      	subs	r3, r5, #0
 800a456:	bfb7      	itett	lt
 800a458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	2300      	movge	r3, #0
 800a45e:	2201      	movlt	r2, #1
 800a460:	9303      	strlt	r3, [sp, #12]
 800a462:	bfa8      	it	ge
 800a464:	6033      	strge	r3, [r6, #0]
 800a466:	9f03      	ldr	r7, [sp, #12]
 800a468:	4b97      	ldr	r3, [pc, #604]	@ (800a6c8 <_dtoa_r+0x2d0>)
 800a46a:	bfb8      	it	lt
 800a46c:	6032      	strlt	r2, [r6, #0]
 800a46e:	43bb      	bics	r3, r7
 800a470:	d112      	bne.n	800a498 <_dtoa_r+0xa0>
 800a472:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a476:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a47e:	4323      	orrs	r3, r4
 800a480:	f000 854c 	beq.w	800af1c <_dtoa_r+0xb24>
 800a484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a486:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a6dc <_dtoa_r+0x2e4>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 854e 	beq.w	800af2c <_dtoa_r+0xb34>
 800a490:	f10a 0303 	add.w	r3, sl, #3
 800a494:	f000 bd48 	b.w	800af28 <_dtoa_r+0xb30>
 800a498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a49c:	2200      	movs	r2, #0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	ec51 0b17 	vmov	r0, r1, d7
 800a4a4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a4a8:	f7f6 fb1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	b158      	cbz	r0, 800a4c8 <_dtoa_r+0xd0>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4b8:	b113      	cbz	r3, 800a4c0 <_dtoa_r+0xc8>
 800a4ba:	4b84      	ldr	r3, [pc, #528]	@ (800a6cc <_dtoa_r+0x2d4>)
 800a4bc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800a6e0 <_dtoa_r+0x2e8>
 800a4c4:	f000 bd32 	b.w	800af2c <_dtoa_r+0xb34>
 800a4c8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a4cc:	aa16      	add	r2, sp, #88	@ 0x58
 800a4ce:	a917      	add	r1, sp, #92	@ 0x5c
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a4d6:	f001 f983 	bl	800b7e0 <__d2b>
 800a4da:	4681      	mov	r9, r0
 800a4dc:	2e00      	cmp	r6, #0
 800a4de:	d075      	beq.n	800a5cc <_dtoa_r+0x1d4>
 800a4e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4e2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a4e6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a4ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ee:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4f6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4b74      	ldr	r3, [pc, #464]	@ (800a6d0 <_dtoa_r+0x2d8>)
 800a500:	f7f5 fed2 	bl	80002a8 <__aeabi_dsub>
 800a504:	a368      	add	r3, pc, #416	@ (adr r3, 800a6a8 <_dtoa_r+0x2b0>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f6 f885 	bl	8000618 <__aeabi_dmul>
 800a50e:	a368      	add	r3, pc, #416	@ (adr r3, 800a6b0 <_dtoa_r+0x2b8>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f5 feca 	bl	80002ac <__adddf3>
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7f6 f811 	bl	8000544 <__aeabi_i2d>
 800a522:	a365      	add	r3, pc, #404	@ (adr r3, 800a6b8 <_dtoa_r+0x2c0>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f6 f876 	bl	8000618 <__aeabi_dmul>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f5 feba 	bl	80002ac <__adddf3>
 800a538:	4604      	mov	r4, r0
 800a53a:	460d      	mov	r5, r1
 800a53c:	f7f6 fb1c 	bl	8000b78 <__aeabi_d2iz>
 800a540:	2200      	movs	r2, #0
 800a542:	4607      	mov	r7, r0
 800a544:	2300      	movs	r3, #0
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f6 fad7 	bl	8000afc <__aeabi_dcmplt>
 800a54e:	b140      	cbz	r0, 800a562 <_dtoa_r+0x16a>
 800a550:	4638      	mov	r0, r7
 800a552:	f7f5 fff7 	bl	8000544 <__aeabi_i2d>
 800a556:	4622      	mov	r2, r4
 800a558:	462b      	mov	r3, r5
 800a55a:	f7f6 fac5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a55e:	b900      	cbnz	r0, 800a562 <_dtoa_r+0x16a>
 800a560:	3f01      	subs	r7, #1
 800a562:	2f16      	cmp	r7, #22
 800a564:	d851      	bhi.n	800a60a <_dtoa_r+0x212>
 800a566:	4b5b      	ldr	r3, [pc, #364]	@ (800a6d4 <_dtoa_r+0x2dc>)
 800a568:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f6 fac2 	bl	8000afc <__aeabi_dcmplt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d048      	beq.n	800a60e <_dtoa_r+0x216>
 800a57c:	3f01      	subs	r7, #1
 800a57e:	2300      	movs	r3, #0
 800a580:	9312      	str	r3, [sp, #72]	@ 0x48
 800a582:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a584:	1b9b      	subs	r3, r3, r6
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	bf46      	itte	mi
 800a58a:	f1c3 0801 	rsbmi	r8, r3, #1
 800a58e:	2300      	movmi	r3, #0
 800a590:	f04f 0800 	movpl.w	r8, #0
 800a594:	9208      	str	r2, [sp, #32]
 800a596:	bf48      	it	mi
 800a598:	9308      	strmi	r3, [sp, #32]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	db39      	blt.n	800a612 <_dtoa_r+0x21a>
 800a59e:	9b08      	ldr	r3, [sp, #32]
 800a5a0:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a5a2:	443b      	add	r3, r7
 800a5a4:	9308      	str	r3, [sp, #32]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	d864      	bhi.n	800a67a <_dtoa_r+0x282>
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	bfc5      	ittet	gt
 800a5b4:	3b04      	subgt	r3, #4
 800a5b6:	2400      	movgt	r4, #0
 800a5b8:	2401      	movle	r4, #1
 800a5ba:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5be:	3b02      	subs	r3, #2
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d865      	bhi.n	800a690 <_dtoa_r+0x298>
 800a5c4:	e8df f003 	tbb	[pc, r3]
 800a5c8:	5737392c 	.word	0x5737392c
 800a5cc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a5d0:	441e      	add	r6, r3
 800a5d2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	bfc9      	itett	gt
 800a5da:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a5de:	f1c3 0320 	rsble	r3, r3, #32
 800a5e2:	409f      	lslgt	r7, r3
 800a5e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a5e8:	bfd8      	it	le
 800a5ea:	fa04 f003 	lslle.w	r0, r4, r3
 800a5ee:	f106 36ff 	add.w	r6, r6, #4294967295
 800a5f2:	bfc4      	itt	gt
 800a5f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a5f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a5fc:	f7f5 ff92 	bl	8000524 <__aeabi_ui2d>
 800a600:	2201      	movs	r2, #1
 800a602:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a606:	9214      	str	r2, [sp, #80]	@ 0x50
 800a608:	e777      	b.n	800a4fa <_dtoa_r+0x102>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7b8      	b.n	800a580 <_dtoa_r+0x188>
 800a60e:	9012      	str	r0, [sp, #72]	@ 0x48
 800a610:	e7b7      	b.n	800a582 <_dtoa_r+0x18a>
 800a612:	427b      	negs	r3, r7
 800a614:	eba8 0807 	sub.w	r8, r8, r7
 800a618:	930a      	str	r3, [sp, #40]	@ 0x28
 800a61a:	2300      	movs	r3, #0
 800a61c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a61e:	e7c4      	b.n	800a5aa <_dtoa_r+0x1b2>
 800a620:	2300      	movs	r3, #0
 800a622:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a626:	2b00      	cmp	r3, #0
 800a628:	dc35      	bgt.n	800a696 <_dtoa_r+0x29e>
 800a62a:	2301      	movs	r3, #1
 800a62c:	461a      	mov	r2, r3
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	9307      	str	r3, [sp, #28]
 800a632:	920e      	str	r2, [sp, #56]	@ 0x38
 800a634:	e00b      	b.n	800a64e <_dtoa_r+0x256>
 800a636:	2301      	movs	r3, #1
 800a638:	e7f3      	b.n	800a622 <_dtoa_r+0x22a>
 800a63a:	2300      	movs	r3, #0
 800a63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a640:	18fb      	adds	r3, r7, r3
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	2b01      	cmp	r3, #1
 800a648:	9307      	str	r3, [sp, #28]
 800a64a:	bfb8      	it	lt
 800a64c:	2301      	movlt	r3, #1
 800a64e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a652:	2100      	movs	r1, #0
 800a654:	2204      	movs	r2, #4
 800a656:	f102 0514 	add.w	r5, r2, #20
 800a65a:	429d      	cmp	r5, r3
 800a65c:	d91f      	bls.n	800a69e <_dtoa_r+0x2a6>
 800a65e:	6041      	str	r1, [r0, #4]
 800a660:	4658      	mov	r0, fp
 800a662:	f000 fd8d 	bl	800b180 <_Balloc>
 800a666:	4682      	mov	sl, r0
 800a668:	2800      	cmp	r0, #0
 800a66a:	d13b      	bne.n	800a6e4 <_dtoa_r+0x2ec>
 800a66c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d8 <_dtoa_r+0x2e0>)
 800a66e:	4602      	mov	r2, r0
 800a670:	f240 11af 	movw	r1, #431	@ 0x1af
 800a674:	e6d7      	b.n	800a426 <_dtoa_r+0x2e>
 800a676:	2301      	movs	r3, #1
 800a678:	e7e0      	b.n	800a63c <_dtoa_r+0x244>
 800a67a:	2401      	movs	r4, #1
 800a67c:	2300      	movs	r3, #0
 800a67e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a680:	9309      	str	r3, [sp, #36]	@ 0x24
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	2200      	movs	r2, #0
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	2312      	movs	r3, #18
 800a68e:	e7d0      	b.n	800a632 <_dtoa_r+0x23a>
 800a690:	2301      	movs	r3, #1
 800a692:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a694:	e7f5      	b.n	800a682 <_dtoa_r+0x28a>
 800a696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	e7d7      	b.n	800a64e <_dtoa_r+0x256>
 800a69e:	3101      	adds	r1, #1
 800a6a0:	0052      	lsls	r2, r2, #1
 800a6a2:	e7d8      	b.n	800a656 <_dtoa_r+0x25e>
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	636f4361 	.word	0x636f4361
 800a6ac:	3fd287a7 	.word	0x3fd287a7
 800a6b0:	8b60c8b3 	.word	0x8b60c8b3
 800a6b4:	3fc68a28 	.word	0x3fc68a28
 800a6b8:	509f79fb 	.word	0x509f79fb
 800a6bc:	3fd34413 	.word	0x3fd34413
 800a6c0:	0800c469 	.word	0x0800c469
 800a6c4:	0800c480 	.word	0x0800c480
 800a6c8:	7ff00000 	.word	0x7ff00000
 800a6cc:	0800c439 	.word	0x0800c439
 800a6d0:	3ff80000 	.word	0x3ff80000
 800a6d4:	0800c578 	.word	0x0800c578
 800a6d8:	0800c4d8 	.word	0x0800c4d8
 800a6dc:	0800c465 	.word	0x0800c465
 800a6e0:	0800c438 	.word	0x0800c438
 800a6e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6e8:	6018      	str	r0, [r3, #0]
 800a6ea:	9b07      	ldr	r3, [sp, #28]
 800a6ec:	2b0e      	cmp	r3, #14
 800a6ee:	f200 80a4 	bhi.w	800a83a <_dtoa_r+0x442>
 800a6f2:	2c00      	cmp	r4, #0
 800a6f4:	f000 80a1 	beq.w	800a83a <_dtoa_r+0x442>
 800a6f8:	2f00      	cmp	r7, #0
 800a6fa:	dd33      	ble.n	800a764 <_dtoa_r+0x36c>
 800a6fc:	f007 020f 	and.w	r2, r7, #15
 800a700:	4bac      	ldr	r3, [pc, #688]	@ (800a9b4 <_dtoa_r+0x5bc>)
 800a702:	05f8      	lsls	r0, r7, #23
 800a704:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70c:	ed93 7b00 	vldr	d7, [r3]
 800a710:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a714:	d516      	bpl.n	800a744 <_dtoa_r+0x34c>
 800a716:	4ba8      	ldr	r3, [pc, #672]	@ (800a9b8 <_dtoa_r+0x5c0>)
 800a718:	f004 040f 	and.w	r4, r4, #15
 800a71c:	2603      	movs	r6, #3
 800a71e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a726:	f7f6 f8a1 	bl	800086c <__aeabi_ddiv>
 800a72a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a72e:	4da2      	ldr	r5, [pc, #648]	@ (800a9b8 <_dtoa_r+0x5c0>)
 800a730:	b954      	cbnz	r4, 800a748 <_dtoa_r+0x350>
 800a732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a73a:	f7f6 f897 	bl	800086c <__aeabi_ddiv>
 800a73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a742:	e028      	b.n	800a796 <_dtoa_r+0x39e>
 800a744:	2602      	movs	r6, #2
 800a746:	e7f2      	b.n	800a72e <_dtoa_r+0x336>
 800a748:	07e1      	lsls	r1, r4, #31
 800a74a:	d508      	bpl.n	800a75e <_dtoa_r+0x366>
 800a74c:	3601      	adds	r6, #1
 800a74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a756:	f7f5 ff5f 	bl	8000618 <__aeabi_dmul>
 800a75a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a75e:	1064      	asrs	r4, r4, #1
 800a760:	3508      	adds	r5, #8
 800a762:	e7e5      	b.n	800a730 <_dtoa_r+0x338>
 800a764:	f000 80d2 	beq.w	800a90c <_dtoa_r+0x514>
 800a768:	427c      	negs	r4, r7
 800a76a:	4b92      	ldr	r3, [pc, #584]	@ (800a9b4 <_dtoa_r+0x5bc>)
 800a76c:	4d92      	ldr	r5, [pc, #584]	@ (800a9b8 <_dtoa_r+0x5c0>)
 800a76e:	2602      	movs	r6, #2
 800a770:	f004 020f 	and.w	r2, r4, #15
 800a774:	1124      	asrs	r4, r4, #4
 800a776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a77a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f5 ff49 	bl	8000618 <__aeabi_dmul>
 800a786:	2300      	movs	r3, #0
 800a788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a78c:	2c00      	cmp	r4, #0
 800a78e:	f040 80b2 	bne.w	800a8f6 <_dtoa_r+0x4fe>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1d3      	bne.n	800a73e <_dtoa_r+0x346>
 800a796:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a798:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80b7 	beq.w	800a910 <_dtoa_r+0x518>
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4b85      	ldr	r3, [pc, #532]	@ (800a9bc <_dtoa_r+0x5c4>)
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f6 f9a7 	bl	8000afc <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f000 80ae 	beq.w	800a910 <_dtoa_r+0x518>
 800a7b4:	9b07      	ldr	r3, [sp, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 80aa 	beq.w	800a910 <_dtoa_r+0x518>
 800a7bc:	9b00      	ldr	r3, [sp, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dd37      	ble.n	800a832 <_dtoa_r+0x43a>
 800a7c2:	1e7b      	subs	r3, r7, #1
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	4b7c      	ldr	r3, [pc, #496]	@ (800a9c0 <_dtoa_r+0x5c8>)
 800a7d0:	f7f5 ff22 	bl	8000618 <__aeabi_dmul>
 800a7d4:	9c00      	ldr	r4, [sp, #0]
 800a7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7f5 feb2 	bl	8000544 <__aeabi_i2d>
 800a7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7e4:	f7f5 ff18 	bl	8000618 <__aeabi_dmul>
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4b76      	ldr	r3, [pc, #472]	@ (800a9c4 <_dtoa_r+0x5cc>)
 800a7ec:	f7f5 fd5e 	bl	80002ac <__adddf3>
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	f040 808d 	bne.w	800a916 <_dtoa_r+0x51e>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4b72      	ldr	r3, [pc, #456]	@ (800a9c8 <_dtoa_r+0x5d0>)
 800a800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a804:	f7f5 fd50 	bl	80002a8 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a810:	462a      	mov	r2, r5
 800a812:	4633      	mov	r3, r6
 800a814:	f7f6 f990 	bl	8000b38 <__aeabi_dcmpgt>
 800a818:	2800      	cmp	r0, #0
 800a81a:	f040 828b 	bne.w	800ad34 <_dtoa_r+0x93c>
 800a81e:	462a      	mov	r2, r5
 800a820:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a828:	f7f6 f968 	bl	8000afc <__aeabi_dcmplt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f040 8128 	bne.w	800aa82 <_dtoa_r+0x68a>
 800a832:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a836:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a83a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f2c0 815a 	blt.w	800aaf6 <_dtoa_r+0x6fe>
 800a842:	2f0e      	cmp	r7, #14
 800a844:	f300 8157 	bgt.w	800aaf6 <_dtoa_r+0x6fe>
 800a848:	4b5a      	ldr	r3, [pc, #360]	@ (800a9b4 <_dtoa_r+0x5bc>)
 800a84a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a84e:	ed93 7b00 	vldr	d7, [r3]
 800a852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	ed8d 7b00 	vstr	d7, [sp]
 800a85a:	da03      	bge.n	800a864 <_dtoa_r+0x46c>
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f340 8101 	ble.w	800aa66 <_dtoa_r+0x66e>
 800a864:	4656      	mov	r6, sl
 800a866:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a86a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fffb 	bl	800086c <__aeabi_ddiv>
 800a876:	f7f6 f97f 	bl	8000b78 <__aeabi_d2iz>
 800a87a:	4680      	mov	r8, r0
 800a87c:	f7f5 fe62 	bl	8000544 <__aeabi_i2d>
 800a880:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a884:	f7f5 fec8 	bl	8000618 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	4620      	mov	r0, r4
 800a88c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a890:	460b      	mov	r3, r1
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 fd08 	bl	80002a8 <__aeabi_dsub>
 800a898:	9d07      	ldr	r5, [sp, #28]
 800a89a:	f806 4b01 	strb.w	r4, [r6], #1
 800a89e:	eba6 040a 	sub.w	r4, r6, sl
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	42a5      	cmp	r5, r4
 800a8a8:	f040 8117 	bne.w	800aada <_dtoa_r+0x6e2>
 800a8ac:	f7f5 fcfe 	bl	80002ac <__adddf3>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8b8:	f7f6 f93e 	bl	8000b38 <__aeabi_dcmpgt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f040 80f9 	bne.w	800aab4 <_dtoa_r+0x6bc>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ca:	f7f6 f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8ce:	b118      	cbz	r0, 800a8d8 <_dtoa_r+0x4e0>
 800a8d0:	f018 0f01 	tst.w	r8, #1
 800a8d4:	f040 80ee 	bne.w	800aab4 <_dtoa_r+0x6bc>
 800a8d8:	4649      	mov	r1, r9
 800a8da:	4658      	mov	r0, fp
 800a8dc:	f000 fc90 	bl	800b200 <_Bfree>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	3701      	adds	r7, #1
 800a8e4:	7033      	strb	r3, [r6, #0]
 800a8e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8e8:	601f      	str	r7, [r3, #0]
 800a8ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 831d 	beq.w	800af2c <_dtoa_r+0xb34>
 800a8f2:	601e      	str	r6, [r3, #0]
 800a8f4:	e31a      	b.n	800af2c <_dtoa_r+0xb34>
 800a8f6:	07e2      	lsls	r2, r4, #31
 800a8f8:	d505      	bpl.n	800a906 <_dtoa_r+0x50e>
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a900:	f7f5 fe8a 	bl	8000618 <__aeabi_dmul>
 800a904:	2301      	movs	r3, #1
 800a906:	1064      	asrs	r4, r4, #1
 800a908:	3508      	adds	r5, #8
 800a90a:	e73f      	b.n	800a78c <_dtoa_r+0x394>
 800a90c:	2602      	movs	r6, #2
 800a90e:	e742      	b.n	800a796 <_dtoa_r+0x39e>
 800a910:	9c07      	ldr	r4, [sp, #28]
 800a912:	9704      	str	r7, [sp, #16]
 800a914:	e761      	b.n	800a7da <_dtoa_r+0x3e2>
 800a916:	4b27      	ldr	r3, [pc, #156]	@ (800a9b4 <_dtoa_r+0x5bc>)
 800a918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a91a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a91e:	4454      	add	r4, sl
 800a920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a924:	2900      	cmp	r1, #0
 800a926:	d053      	beq.n	800a9d0 <_dtoa_r+0x5d8>
 800a928:	2000      	movs	r0, #0
 800a92a:	4928      	ldr	r1, [pc, #160]	@ (800a9cc <_dtoa_r+0x5d4>)
 800a92c:	f7f5 ff9e 	bl	800086c <__aeabi_ddiv>
 800a930:	4633      	mov	r3, r6
 800a932:	4656      	mov	r6, sl
 800a934:	462a      	mov	r2, r5
 800a936:	f7f5 fcb7 	bl	80002a8 <__aeabi_dsub>
 800a93a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a942:	f7f6 f919 	bl	8000b78 <__aeabi_d2iz>
 800a946:	4605      	mov	r5, r0
 800a948:	f7f5 fdfc 	bl	8000544 <__aeabi_i2d>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	3530      	adds	r5, #48	@ 0x30
 800a952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a956:	f7f5 fca7 	bl	80002a8 <__aeabi_dsub>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	f806 5b01 	strb.w	r5, [r6], #1
 800a962:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a96a:	f7f6 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d171      	bne.n	800aa56 <_dtoa_r+0x65e>
 800a972:	2000      	movs	r0, #0
 800a974:	4911      	ldr	r1, [pc, #68]	@ (800a9bc <_dtoa_r+0x5c4>)
 800a976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a97a:	f7f5 fc95 	bl	80002a8 <__aeabi_dsub>
 800a97e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a982:	f7f6 f8bb 	bl	8000afc <__aeabi_dcmplt>
 800a986:	2800      	cmp	r0, #0
 800a988:	f040 8095 	bne.w	800aab6 <_dtoa_r+0x6be>
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	f43f af50 	beq.w	800a832 <_dtoa_r+0x43a>
 800a992:	2200      	movs	r2, #0
 800a994:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c0 <_dtoa_r+0x5c8>)
 800a996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a99a:	f7f5 fe3d 	bl	8000618 <__aeabi_dmul>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4b07      	ldr	r3, [pc, #28]	@ (800a9c0 <_dtoa_r+0x5c8>)
 800a9a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9aa:	f7f5 fe35 	bl	8000618 <__aeabi_dmul>
 800a9ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b2:	e7c4      	b.n	800a93e <_dtoa_r+0x546>
 800a9b4:	0800c578 	.word	0x0800c578
 800a9b8:	0800c550 	.word	0x0800c550
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	40240000 	.word	0x40240000
 800a9c4:	401c0000 	.word	0x401c0000
 800a9c8:	40140000 	.word	0x40140000
 800a9cc:	3fe00000 	.word	0x3fe00000
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4656      	mov	r6, sl
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f7f5 fe1f 	bl	8000618 <__aeabi_dmul>
 800a9da:	9415      	str	r4, [sp, #84]	@ 0x54
 800a9dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e4:	f7f6 f8c8 	bl	8000b78 <__aeabi_d2iz>
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	f7f5 fdab 	bl	8000544 <__aeabi_i2d>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	3530      	adds	r5, #48	@ 0x30
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f8:	f7f5 fc56 	bl	80002a8 <__aeabi_dsub>
 800a9fc:	f806 5b01 	strb.w	r5, [r6], #1
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	42a6      	cmp	r6, r4
 800aa06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa0a:	f04f 0200 	mov.w	r2, #0
 800aa0e:	d124      	bne.n	800aa5a <_dtoa_r+0x662>
 800aa10:	4bac      	ldr	r3, [pc, #688]	@ (800acc4 <_dtoa_r+0x8cc>)
 800aa12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa16:	f7f5 fc49 	bl	80002ac <__adddf3>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa22:	f7f6 f889 	bl	8000b38 <__aeabi_dcmpgt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d145      	bne.n	800aab6 <_dtoa_r+0x6be>
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	49a5      	ldr	r1, [pc, #660]	@ (800acc4 <_dtoa_r+0x8cc>)
 800aa2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa32:	f7f5 fc39 	bl	80002a8 <__aeabi_dsub>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa3e:	f7f6 f85d 	bl	8000afc <__aeabi_dcmplt>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f43f aef5 	beq.w	800a832 <_dtoa_r+0x43a>
 800aa48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aa4a:	1e73      	subs	r3, r6, #1
 800aa4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa52:	2b30      	cmp	r3, #48	@ 0x30
 800aa54:	d0f8      	beq.n	800aa48 <_dtoa_r+0x650>
 800aa56:	9f04      	ldr	r7, [sp, #16]
 800aa58:	e73e      	b.n	800a8d8 <_dtoa_r+0x4e0>
 800aa5a:	4b9b      	ldr	r3, [pc, #620]	@ (800acc8 <_dtoa_r+0x8d0>)
 800aa5c:	f7f5 fddc 	bl	8000618 <__aeabi_dmul>
 800aa60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa64:	e7bc      	b.n	800a9e0 <_dtoa_r+0x5e8>
 800aa66:	d10c      	bne.n	800aa82 <_dtoa_r+0x68a>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4b98      	ldr	r3, [pc, #608]	@ (800accc <_dtoa_r+0x8d4>)
 800aa6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa70:	f7f5 fdd2 	bl	8000618 <__aeabi_dmul>
 800aa74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa78:	f7f6 f854 	bl	8000b24 <__aeabi_dcmpge>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f000 8157 	beq.w	800ad30 <_dtoa_r+0x938>
 800aa82:	2400      	movs	r4, #0
 800aa84:	4625      	mov	r5, r4
 800aa86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa88:	4656      	mov	r6, sl
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	2700      	movs	r7, #0
 800aa90:	4621      	mov	r1, r4
 800aa92:	4658      	mov	r0, fp
 800aa94:	f000 fbb4 	bl	800b200 <_Bfree>
 800aa98:	2d00      	cmp	r5, #0
 800aa9a:	d0dc      	beq.n	800aa56 <_dtoa_r+0x65e>
 800aa9c:	b12f      	cbz	r7, 800aaaa <_dtoa_r+0x6b2>
 800aa9e:	42af      	cmp	r7, r5
 800aaa0:	d003      	beq.n	800aaaa <_dtoa_r+0x6b2>
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	4658      	mov	r0, fp
 800aaa6:	f000 fbab 	bl	800b200 <_Bfree>
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4658      	mov	r0, fp
 800aaae:	f000 fba7 	bl	800b200 <_Bfree>
 800aab2:	e7d0      	b.n	800aa56 <_dtoa_r+0x65e>
 800aab4:	9704      	str	r7, [sp, #16]
 800aab6:	4633      	mov	r3, r6
 800aab8:	461e      	mov	r6, r3
 800aaba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aabe:	2a39      	cmp	r2, #57	@ 0x39
 800aac0:	d107      	bne.n	800aad2 <_dtoa_r+0x6da>
 800aac2:	459a      	cmp	sl, r3
 800aac4:	d1f8      	bne.n	800aab8 <_dtoa_r+0x6c0>
 800aac6:	9a04      	ldr	r2, [sp, #16]
 800aac8:	3201      	adds	r2, #1
 800aaca:	9204      	str	r2, [sp, #16]
 800aacc:	2230      	movs	r2, #48	@ 0x30
 800aace:	f88a 2000 	strb.w	r2, [sl]
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	3201      	adds	r2, #1
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	e7bd      	b.n	800aa56 <_dtoa_r+0x65e>
 800aada:	2200      	movs	r2, #0
 800aadc:	4b7a      	ldr	r3, [pc, #488]	@ (800acc8 <_dtoa_r+0x8d0>)
 800aade:	f7f5 fd9b 	bl	8000618 <__aeabi_dmul>
 800aae2:	2200      	movs	r2, #0
 800aae4:	2300      	movs	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	f7f5 fffd 	bl	8000ae8 <__aeabi_dcmpeq>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f43f aebb 	beq.w	800a86a <_dtoa_r+0x472>
 800aaf4:	e6f0      	b.n	800a8d8 <_dtoa_r+0x4e0>
 800aaf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aaf8:	2a00      	cmp	r2, #0
 800aafa:	f000 80db 	beq.w	800acb4 <_dtoa_r+0x8bc>
 800aafe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab00:	2a01      	cmp	r2, #1
 800ab02:	f300 80bf 	bgt.w	800ac84 <_dtoa_r+0x88c>
 800ab06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	f000 80b7 	beq.w	800ac7c <_dtoa_r+0x884>
 800ab0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab14:	4646      	mov	r6, r8
 800ab16:	9a08      	ldr	r2, [sp, #32]
 800ab18:	2101      	movs	r1, #1
 800ab1a:	4658      	mov	r0, fp
 800ab1c:	4498      	add	r8, r3
 800ab1e:	441a      	add	r2, r3
 800ab20:	9208      	str	r2, [sp, #32]
 800ab22:	f000 fc23 	bl	800b36c <__i2b>
 800ab26:	4605      	mov	r5, r0
 800ab28:	b15e      	cbz	r6, 800ab42 <_dtoa_r+0x74a>
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dd08      	ble.n	800ab42 <_dtoa_r+0x74a>
 800ab30:	42b3      	cmp	r3, r6
 800ab32:	9a08      	ldr	r2, [sp, #32]
 800ab34:	bfa8      	it	ge
 800ab36:	4633      	movge	r3, r6
 800ab38:	eba8 0803 	sub.w	r8, r8, r3
 800ab3c:	1af6      	subs	r6, r6, r3
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	9308      	str	r3, [sp, #32]
 800ab42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab44:	b1f3      	cbz	r3, 800ab84 <_dtoa_r+0x78c>
 800ab46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 80b7 	beq.w	800acbc <_dtoa_r+0x8c4>
 800ab4e:	b18c      	cbz	r4, 800ab74 <_dtoa_r+0x77c>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4622      	mov	r2, r4
 800ab54:	4658      	mov	r0, fp
 800ab56:	f000 fcc9 	bl	800b4ec <__pow5mult>
 800ab5a:	464a      	mov	r2, r9
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4605      	mov	r5, r0
 800ab60:	4658      	mov	r0, fp
 800ab62:	f000 fc19 	bl	800b398 <__multiply>
 800ab66:	4649      	mov	r1, r9
 800ab68:	9004      	str	r0, [sp, #16]
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 fb48 	bl	800b200 <_Bfree>
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	4699      	mov	r9, r3
 800ab74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab76:	1b1a      	subs	r2, r3, r4
 800ab78:	d004      	beq.n	800ab84 <_dtoa_r+0x78c>
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4658      	mov	r0, fp
 800ab7e:	f000 fcb5 	bl	800b4ec <__pow5mult>
 800ab82:	4681      	mov	r9, r0
 800ab84:	2101      	movs	r1, #1
 800ab86:	4658      	mov	r0, fp
 800ab88:	f000 fbf0 	bl	800b36c <__i2b>
 800ab8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab8e:	4604      	mov	r4, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 81cf 	beq.w	800af34 <_dtoa_r+0xb3c>
 800ab96:	461a      	mov	r2, r3
 800ab98:	4601      	mov	r1, r0
 800ab9a:	4658      	mov	r0, fp
 800ab9c:	f000 fca6 	bl	800b4ec <__pow5mult>
 800aba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba2:	4604      	mov	r4, r0
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	f300 8095 	bgt.w	800acd4 <_dtoa_r+0x8dc>
 800abaa:	9b02      	ldr	r3, [sp, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 8087 	bne.w	800acc0 <_dtoa_r+0x8c8>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f040 8089 	bne.w	800acd0 <_dtoa_r+0x8d8>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abc4:	0d1b      	lsrs	r3, r3, #20
 800abc6:	051b      	lsls	r3, r3, #20
 800abc8:	b12b      	cbz	r3, 800abd6 <_dtoa_r+0x7de>
 800abca:	9b08      	ldr	r3, [sp, #32]
 800abcc:	f108 0801 	add.w	r8, r8, #1
 800abd0:	3301      	adds	r3, #1
 800abd2:	9308      	str	r3, [sp, #32]
 800abd4:	2301      	movs	r3, #1
 800abd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 81b0 	beq.w	800af40 <_dtoa_r+0xb48>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abe6:	6918      	ldr	r0, [r3, #16]
 800abe8:	f000 fb74 	bl	800b2d4 <__hi0bits>
 800abec:	f1c0 0020 	rsb	r0, r0, #32
 800abf0:	9b08      	ldr	r3, [sp, #32]
 800abf2:	4418      	add	r0, r3
 800abf4:	f010 001f 	ands.w	r0, r0, #31
 800abf8:	d077      	beq.n	800acea <_dtoa_r+0x8f2>
 800abfa:	f1c0 0320 	rsb	r3, r0, #32
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	dd6b      	ble.n	800acda <_dtoa_r+0x8e2>
 800ac02:	f1c0 001c 	rsb	r0, r0, #28
 800ac06:	9b08      	ldr	r3, [sp, #32]
 800ac08:	4480      	add	r8, r0
 800ac0a:	4403      	add	r3, r0
 800ac0c:	4406      	add	r6, r0
 800ac0e:	9308      	str	r3, [sp, #32]
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	dd05      	ble.n	800ac22 <_dtoa_r+0x82a>
 800ac16:	4649      	mov	r1, r9
 800ac18:	4642      	mov	r2, r8
 800ac1a:	4658      	mov	r0, fp
 800ac1c:	f000 fcc0 	bl	800b5a0 <__lshift>
 800ac20:	4681      	mov	r9, r0
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd05      	ble.n	800ac34 <_dtoa_r+0x83c>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	4658      	mov	r0, fp
 800ac2e:	f000 fcb7 	bl	800b5a0 <__lshift>
 800ac32:	4604      	mov	r4, r0
 800ac34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d059      	beq.n	800acee <_dtoa_r+0x8f6>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	f000 fd1b 	bl	800b678 <__mcmp>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	da53      	bge.n	800acee <_dtoa_r+0x8f6>
 800ac46:	1e7b      	subs	r3, r7, #1
 800ac48:	4649      	mov	r1, r9
 800ac4a:	220a      	movs	r2, #10
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	2300      	movs	r3, #0
 800ac52:	f000 faf7 	bl	800b244 <__multadd>
 800ac56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac58:	4681      	mov	r9, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8172 	beq.w	800af44 <_dtoa_r+0xb4c>
 800ac60:	2300      	movs	r3, #0
 800ac62:	4629      	mov	r1, r5
 800ac64:	220a      	movs	r2, #10
 800ac66:	4658      	mov	r0, fp
 800ac68:	f000 faec 	bl	800b244 <__multadd>
 800ac6c:	9b00      	ldr	r3, [sp, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc67      	bgt.n	800ad44 <_dtoa_r+0x94c>
 800ac74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	dc41      	bgt.n	800acfe <_dtoa_r+0x906>
 800ac7a:	e063      	b.n	800ad44 <_dtoa_r+0x94c>
 800ac7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac82:	e746      	b.n	800ab12 <_dtoa_r+0x71a>
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	1e5c      	subs	r4, r3, #1
 800ac88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	bfb7      	itett	lt
 800ac8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac90:	1b1c      	subge	r4, r3, r4
 800ac92:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ac94:	1ae3      	sublt	r3, r4, r3
 800ac96:	bfbe      	ittt	lt
 800ac98:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac9a:	2400      	movlt	r4, #0
 800ac9c:	18d2      	addlt	r2, r2, r3
 800ac9e:	9b07      	ldr	r3, [sp, #28]
 800aca0:	bfb8      	it	lt
 800aca2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bfb5      	itete	lt
 800aca8:	eba8 0603 	sublt.w	r6, r8, r3
 800acac:	4646      	movge	r6, r8
 800acae:	2300      	movlt	r3, #0
 800acb0:	9b07      	ldrge	r3, [sp, #28]
 800acb2:	e730      	b.n	800ab16 <_dtoa_r+0x71e>
 800acb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800acb6:	4646      	mov	r6, r8
 800acb8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800acba:	e735      	b.n	800ab28 <_dtoa_r+0x730>
 800acbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acbe:	e75c      	b.n	800ab7a <_dtoa_r+0x782>
 800acc0:	2300      	movs	r3, #0
 800acc2:	e788      	b.n	800abd6 <_dtoa_r+0x7de>
 800acc4:	3fe00000 	.word	0x3fe00000
 800acc8:	40240000 	.word	0x40240000
 800accc:	40140000 	.word	0x40140000
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	e780      	b.n	800abd6 <_dtoa_r+0x7de>
 800acd4:	2300      	movs	r3, #0
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	e782      	b.n	800abe0 <_dtoa_r+0x7e8>
 800acda:	d099      	beq.n	800ac10 <_dtoa_r+0x818>
 800acdc:	331c      	adds	r3, #28
 800acde:	9a08      	ldr	r2, [sp, #32]
 800ace0:	441a      	add	r2, r3
 800ace2:	4498      	add	r8, r3
 800ace4:	441e      	add	r6, r3
 800ace6:	9208      	str	r2, [sp, #32]
 800ace8:	e792      	b.n	800ac10 <_dtoa_r+0x818>
 800acea:	4603      	mov	r3, r0
 800acec:	e7f6      	b.n	800acdc <_dtoa_r+0x8e4>
 800acee:	9b07      	ldr	r3, [sp, #28]
 800acf0:	9704      	str	r7, [sp, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dc20      	bgt.n	800ad38 <_dtoa_r+0x940>
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	dd1e      	ble.n	800ad3c <_dtoa_r+0x944>
 800acfe:	9b00      	ldr	r3, [sp, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f47f aec0 	bne.w	800aa86 <_dtoa_r+0x68e>
 800ad06:	4621      	mov	r1, r4
 800ad08:	2205      	movs	r2, #5
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	f000 fa9a 	bl	800b244 <__multadd>
 800ad10:	4601      	mov	r1, r0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4648      	mov	r0, r9
 800ad16:	f000 fcaf 	bl	800b678 <__mcmp>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f77f aeb3 	ble.w	800aa86 <_dtoa_r+0x68e>
 800ad20:	2331      	movs	r3, #49	@ 0x31
 800ad22:	4656      	mov	r6, sl
 800ad24:	f806 3b01 	strb.w	r3, [r6], #1
 800ad28:	9b04      	ldr	r3, [sp, #16]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	e6ae      	b.n	800aa8e <_dtoa_r+0x696>
 800ad30:	9c07      	ldr	r4, [sp, #28]
 800ad32:	9704      	str	r7, [sp, #16]
 800ad34:	4625      	mov	r5, r4
 800ad36:	e7f3      	b.n	800ad20 <_dtoa_r+0x928>
 800ad38:	9b07      	ldr	r3, [sp, #28]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 8104 	beq.w	800af4c <_dtoa_r+0xb54>
 800ad44:	2e00      	cmp	r6, #0
 800ad46:	dd05      	ble.n	800ad54 <_dtoa_r+0x95c>
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	4658      	mov	r0, fp
 800ad4e:	f000 fc27 	bl	800b5a0 <__lshift>
 800ad52:	4605      	mov	r5, r0
 800ad54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d05a      	beq.n	800ae10 <_dtoa_r+0xa18>
 800ad5a:	6869      	ldr	r1, [r5, #4]
 800ad5c:	4658      	mov	r0, fp
 800ad5e:	f000 fa0f 	bl	800b180 <_Balloc>
 800ad62:	4606      	mov	r6, r0
 800ad64:	b928      	cbnz	r0, 800ad72 <_dtoa_r+0x97a>
 800ad66:	4b84      	ldr	r3, [pc, #528]	@ (800af78 <_dtoa_r+0xb80>)
 800ad68:	4602      	mov	r2, r0
 800ad6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad6e:	f7ff bb5a 	b.w	800a426 <_dtoa_r+0x2e>
 800ad72:	692a      	ldr	r2, [r5, #16]
 800ad74:	f105 010c 	add.w	r1, r5, #12
 800ad78:	300c      	adds	r0, #12
 800ad7a:	3202      	adds	r2, #2
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	f000 ffb5 	bl	800bcec <memcpy>
 800ad82:	2201      	movs	r2, #1
 800ad84:	4631      	mov	r1, r6
 800ad86:	4658      	mov	r0, fp
 800ad88:	f000 fc0a 	bl	800b5a0 <__lshift>
 800ad8c:	f10a 0301 	add.w	r3, sl, #1
 800ad90:	462f      	mov	r7, r5
 800ad92:	4605      	mov	r5, r0
 800ad94:	9307      	str	r3, [sp, #28]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	4453      	add	r3, sl
 800ad9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada4:	9b07      	ldr	r3, [sp, #28]
 800ada6:	4621      	mov	r1, r4
 800ada8:	4648      	mov	r0, r9
 800adaa:	3b01      	subs	r3, #1
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	f7ff fa94 	bl	800a2da <quorem>
 800adb2:	4639      	mov	r1, r7
 800adb4:	9002      	str	r0, [sp, #8]
 800adb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adba:	4648      	mov	r0, r9
 800adbc:	f000 fc5c 	bl	800b678 <__mcmp>
 800adc0:	462a      	mov	r2, r5
 800adc2:	9008      	str	r0, [sp, #32]
 800adc4:	4621      	mov	r1, r4
 800adc6:	4658      	mov	r0, fp
 800adc8:	f000 fc72 	bl	800b6b0 <__mdiff>
 800adcc:	68c2      	ldr	r2, [r0, #12]
 800adce:	4606      	mov	r6, r0
 800add0:	bb02      	cbnz	r2, 800ae14 <_dtoa_r+0xa1c>
 800add2:	4601      	mov	r1, r0
 800add4:	4648      	mov	r0, r9
 800add6:	f000 fc4f 	bl	800b678 <__mcmp>
 800adda:	4602      	mov	r2, r0
 800addc:	4631      	mov	r1, r6
 800adde:	4658      	mov	r0, fp
 800ade0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ade2:	f000 fa0d 	bl	800b200 <_Bfree>
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adea:	9e07      	ldr	r6, [sp, #28]
 800adec:	ea43 0102 	orr.w	r1, r3, r2
 800adf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf2:	4319      	orrs	r1, r3
 800adf4:	d110      	bne.n	800ae18 <_dtoa_r+0xa20>
 800adf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800adfa:	d029      	beq.n	800ae50 <_dtoa_r+0xa58>
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	dd02      	ble.n	800ae08 <_dtoa_r+0xa10>
 800ae02:	9b02      	ldr	r3, [sp, #8]
 800ae04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ae08:	9b00      	ldr	r3, [sp, #0]
 800ae0a:	f883 8000 	strb.w	r8, [r3]
 800ae0e:	e63f      	b.n	800aa90 <_dtoa_r+0x698>
 800ae10:	4628      	mov	r0, r5
 800ae12:	e7bb      	b.n	800ad8c <_dtoa_r+0x994>
 800ae14:	2201      	movs	r2, #1
 800ae16:	e7e1      	b.n	800addc <_dtoa_r+0x9e4>
 800ae18:	9b08      	ldr	r3, [sp, #32]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	db04      	blt.n	800ae28 <_dtoa_r+0xa30>
 800ae1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae20:	430b      	orrs	r3, r1
 800ae22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae24:	430b      	orrs	r3, r1
 800ae26:	d120      	bne.n	800ae6a <_dtoa_r+0xa72>
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	dded      	ble.n	800ae08 <_dtoa_r+0xa10>
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	2201      	movs	r2, #1
 800ae30:	4658      	mov	r0, fp
 800ae32:	f000 fbb5 	bl	800b5a0 <__lshift>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4681      	mov	r9, r0
 800ae3a:	f000 fc1d 	bl	800b678 <__mcmp>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	dc03      	bgt.n	800ae4a <_dtoa_r+0xa52>
 800ae42:	d1e1      	bne.n	800ae08 <_dtoa_r+0xa10>
 800ae44:	f018 0f01 	tst.w	r8, #1
 800ae48:	d0de      	beq.n	800ae08 <_dtoa_r+0xa10>
 800ae4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae4e:	d1d8      	bne.n	800ae02 <_dtoa_r+0xa0a>
 800ae50:	2339      	movs	r3, #57	@ 0x39
 800ae52:	9a00      	ldr	r2, [sp, #0]
 800ae54:	7013      	strb	r3, [r2, #0]
 800ae56:	4633      	mov	r3, r6
 800ae58:	461e      	mov	r6, r3
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae60:	2a39      	cmp	r2, #57	@ 0x39
 800ae62:	d052      	beq.n	800af0a <_dtoa_r+0xb12>
 800ae64:	3201      	adds	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	e612      	b.n	800aa90 <_dtoa_r+0x698>
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	dd07      	ble.n	800ae7e <_dtoa_r+0xa86>
 800ae6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae72:	d0ed      	beq.n	800ae50 <_dtoa_r+0xa58>
 800ae74:	f108 0301 	add.w	r3, r8, #1
 800ae78:	9a00      	ldr	r2, [sp, #0]
 800ae7a:	7013      	strb	r3, [r2, #0]
 800ae7c:	e608      	b.n	800aa90 <_dtoa_r+0x698>
 800ae7e:	9b07      	ldr	r3, [sp, #28]
 800ae80:	9a07      	ldr	r2, [sp, #28]
 800ae82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ae86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d028      	beq.n	800aede <_dtoa_r+0xae6>
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	2300      	movs	r3, #0
 800ae90:	220a      	movs	r2, #10
 800ae92:	4658      	mov	r0, fp
 800ae94:	f000 f9d6 	bl	800b244 <__multadd>
 800ae98:	42af      	cmp	r7, r5
 800ae9a:	4681      	mov	r9, r0
 800ae9c:	f04f 0300 	mov.w	r3, #0
 800aea0:	f04f 020a 	mov.w	r2, #10
 800aea4:	4639      	mov	r1, r7
 800aea6:	4658      	mov	r0, fp
 800aea8:	d107      	bne.n	800aeba <_dtoa_r+0xac2>
 800aeaa:	f000 f9cb 	bl	800b244 <__multadd>
 800aeae:	4607      	mov	r7, r0
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	9b07      	ldr	r3, [sp, #28]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	e774      	b.n	800ada4 <_dtoa_r+0x9ac>
 800aeba:	f000 f9c3 	bl	800b244 <__multadd>
 800aebe:	4629      	mov	r1, r5
 800aec0:	4607      	mov	r7, r0
 800aec2:	2300      	movs	r3, #0
 800aec4:	220a      	movs	r2, #10
 800aec6:	4658      	mov	r0, fp
 800aec8:	f000 f9bc 	bl	800b244 <__multadd>
 800aecc:	4605      	mov	r5, r0
 800aece:	e7f0      	b.n	800aeb2 <_dtoa_r+0xaba>
 800aed0:	9b00      	ldr	r3, [sp, #0]
 800aed2:	2700      	movs	r7, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bfcc      	ite	gt
 800aed8:	461e      	movgt	r6, r3
 800aeda:	2601      	movle	r6, #1
 800aedc:	4456      	add	r6, sl
 800aede:	4649      	mov	r1, r9
 800aee0:	2201      	movs	r2, #1
 800aee2:	4658      	mov	r0, fp
 800aee4:	f000 fb5c 	bl	800b5a0 <__lshift>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4681      	mov	r9, r0
 800aeec:	f000 fbc4 	bl	800b678 <__mcmp>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	dcb0      	bgt.n	800ae56 <_dtoa_r+0xa5e>
 800aef4:	d102      	bne.n	800aefc <_dtoa_r+0xb04>
 800aef6:	f018 0f01 	tst.w	r8, #1
 800aefa:	d1ac      	bne.n	800ae56 <_dtoa_r+0xa5e>
 800aefc:	4633      	mov	r3, r6
 800aefe:	461e      	mov	r6, r3
 800af00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af04:	2a30      	cmp	r2, #48	@ 0x30
 800af06:	d0fa      	beq.n	800aefe <_dtoa_r+0xb06>
 800af08:	e5c2      	b.n	800aa90 <_dtoa_r+0x698>
 800af0a:	459a      	cmp	sl, r3
 800af0c:	d1a4      	bne.n	800ae58 <_dtoa_r+0xa60>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	3301      	adds	r3, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	2331      	movs	r3, #49	@ 0x31
 800af16:	f88a 3000 	strb.w	r3, [sl]
 800af1a:	e5b9      	b.n	800aa90 <_dtoa_r+0x698>
 800af1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af7c <_dtoa_r+0xb84>
 800af22:	b11b      	cbz	r3, 800af2c <_dtoa_r+0xb34>
 800af24:	f10a 0308 	add.w	r3, sl, #8
 800af28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	4650      	mov	r0, sl
 800af2e:	b019      	add	sp, #100	@ 0x64
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af36:	2b01      	cmp	r3, #1
 800af38:	f77f ae37 	ble.w	800abaa <_dtoa_r+0x7b2>
 800af3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af40:	2001      	movs	r0, #1
 800af42:	e655      	b.n	800abf0 <_dtoa_r+0x7f8>
 800af44:	9b00      	ldr	r3, [sp, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f77f aed6 	ble.w	800acf8 <_dtoa_r+0x900>
 800af4c:	4656      	mov	r6, sl
 800af4e:	4621      	mov	r1, r4
 800af50:	4648      	mov	r0, r9
 800af52:	f7ff f9c2 	bl	800a2da <quorem>
 800af56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	f806 8b01 	strb.w	r8, [r6], #1
 800af60:	eba6 020a 	sub.w	r2, r6, sl
 800af64:	4293      	cmp	r3, r2
 800af66:	ddb3      	ble.n	800aed0 <_dtoa_r+0xad8>
 800af68:	4649      	mov	r1, r9
 800af6a:	2300      	movs	r3, #0
 800af6c:	220a      	movs	r2, #10
 800af6e:	4658      	mov	r0, fp
 800af70:	f000 f968 	bl	800b244 <__multadd>
 800af74:	4681      	mov	r9, r0
 800af76:	e7ea      	b.n	800af4e <_dtoa_r+0xb56>
 800af78:	0800c4d8 	.word	0x0800c4d8
 800af7c:	0800c45c 	.word	0x0800c45c

0800af80 <_free_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4605      	mov	r5, r0
 800af84:	2900      	cmp	r1, #0
 800af86:	d041      	beq.n	800b00c <_free_r+0x8c>
 800af88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8c:	1f0c      	subs	r4, r1, #4
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfb8      	it	lt
 800af92:	18e4      	addlt	r4, r4, r3
 800af94:	f000 f8e8 	bl	800b168 <__malloc_lock>
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <_free_r+0x90>)
 800af9a:	6813      	ldr	r3, [r2, #0]
 800af9c:	b933      	cbnz	r3, 800afac <_free_r+0x2c>
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	6014      	str	r4, [r2, #0]
 800afa2:	4628      	mov	r0, r5
 800afa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa8:	f000 b8e4 	b.w	800b174 <__malloc_unlock>
 800afac:	42a3      	cmp	r3, r4
 800afae:	d908      	bls.n	800afc2 <_free_r+0x42>
 800afb0:	6820      	ldr	r0, [r4, #0]
 800afb2:	1821      	adds	r1, r4, r0
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf01      	itttt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	1809      	addeq	r1, r1, r0
 800afbe:	6021      	streq	r1, [r4, #0]
 800afc0:	e7ed      	b.n	800af9e <_free_r+0x1e>
 800afc2:	461a      	mov	r2, r3
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	b10b      	cbz	r3, 800afcc <_free_r+0x4c>
 800afc8:	42a3      	cmp	r3, r4
 800afca:	d9fa      	bls.n	800afc2 <_free_r+0x42>
 800afcc:	6811      	ldr	r1, [r2, #0]
 800afce:	1850      	adds	r0, r2, r1
 800afd0:	42a0      	cmp	r0, r4
 800afd2:	d10b      	bne.n	800afec <_free_r+0x6c>
 800afd4:	6820      	ldr	r0, [r4, #0]
 800afd6:	4401      	add	r1, r0
 800afd8:	1850      	adds	r0, r2, r1
 800afda:	6011      	str	r1, [r2, #0]
 800afdc:	4283      	cmp	r3, r0
 800afde:	d1e0      	bne.n	800afa2 <_free_r+0x22>
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	4408      	add	r0, r1
 800afe6:	6053      	str	r3, [r2, #4]
 800afe8:	6010      	str	r0, [r2, #0]
 800afea:	e7da      	b.n	800afa2 <_free_r+0x22>
 800afec:	d902      	bls.n	800aff4 <_free_r+0x74>
 800afee:	230c      	movs	r3, #12
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	e7d6      	b.n	800afa2 <_free_r+0x22>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	1821      	adds	r1, r4, r0
 800aff8:	428b      	cmp	r3, r1
 800affa:	bf02      	ittt	eq
 800affc:	6819      	ldreq	r1, [r3, #0]
 800affe:	685b      	ldreq	r3, [r3, #4]
 800b000:	1809      	addeq	r1, r1, r0
 800b002:	6063      	str	r3, [r4, #4]
 800b004:	bf08      	it	eq
 800b006:	6021      	streq	r1, [r4, #0]
 800b008:	6054      	str	r4, [r2, #4]
 800b00a:	e7ca      	b.n	800afa2 <_free_r+0x22>
 800b00c:	bd38      	pop	{r3, r4, r5, pc}
 800b00e:	bf00      	nop
 800b010:	20000464 	.word	0x20000464

0800b014 <malloc>:
 800b014:	4b02      	ldr	r3, [pc, #8]	@ (800b020 <malloc+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f000 b825 	b.w	800b068 <_malloc_r>
 800b01e:	bf00      	nop
 800b020:	20000018 	.word	0x20000018

0800b024 <sbrk_aligned>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	4e0f      	ldr	r6, [pc, #60]	@ (800b064 <sbrk_aligned+0x40>)
 800b028:	460c      	mov	r4, r1
 800b02a:	4605      	mov	r5, r0
 800b02c:	6831      	ldr	r1, [r6, #0]
 800b02e:	b911      	cbnz	r1, 800b036 <sbrk_aligned+0x12>
 800b030:	f000 fe4c 	bl	800bccc <_sbrk_r>
 800b034:	6030      	str	r0, [r6, #0]
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 fe47 	bl	800bccc <_sbrk_r>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d103      	bne.n	800b04a <sbrk_aligned+0x26>
 800b042:	f04f 34ff 	mov.w	r4, #4294967295
 800b046:	4620      	mov	r0, r4
 800b048:	bd70      	pop	{r4, r5, r6, pc}
 800b04a:	1cc4      	adds	r4, r0, #3
 800b04c:	f024 0403 	bic.w	r4, r4, #3
 800b050:	42a0      	cmp	r0, r4
 800b052:	d0f8      	beq.n	800b046 <sbrk_aligned+0x22>
 800b054:	1a21      	subs	r1, r4, r0
 800b056:	4628      	mov	r0, r5
 800b058:	f000 fe38 	bl	800bccc <_sbrk_r>
 800b05c:	3001      	adds	r0, #1
 800b05e:	d1f2      	bne.n	800b046 <sbrk_aligned+0x22>
 800b060:	e7ef      	b.n	800b042 <sbrk_aligned+0x1e>
 800b062:	bf00      	nop
 800b064:	20000460 	.word	0x20000460

0800b068 <_malloc_r>:
 800b068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06c:	1ccd      	adds	r5, r1, #3
 800b06e:	4606      	mov	r6, r0
 800b070:	f025 0503 	bic.w	r5, r5, #3
 800b074:	3508      	adds	r5, #8
 800b076:	2d0c      	cmp	r5, #12
 800b078:	bf38      	it	cc
 800b07a:	250c      	movcc	r5, #12
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	db01      	blt.n	800b084 <_malloc_r+0x1c>
 800b080:	42a9      	cmp	r1, r5
 800b082:	d904      	bls.n	800b08e <_malloc_r+0x26>
 800b084:	230c      	movs	r3, #12
 800b086:	6033      	str	r3, [r6, #0]
 800b088:	2000      	movs	r0, #0
 800b08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b164 <_malloc_r+0xfc>
 800b092:	f000 f869 	bl	800b168 <__malloc_lock>
 800b096:	f8d8 3000 	ldr.w	r3, [r8]
 800b09a:	461c      	mov	r4, r3
 800b09c:	bb44      	cbnz	r4, 800b0f0 <_malloc_r+0x88>
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7ff ffbf 	bl	800b024 <sbrk_aligned>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	d158      	bne.n	800b15e <_malloc_r+0xf6>
 800b0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b0b0:	4627      	mov	r7, r4
 800b0b2:	2f00      	cmp	r7, #0
 800b0b4:	d143      	bne.n	800b13e <_malloc_r+0xd6>
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d04b      	beq.n	800b152 <_malloc_r+0xea>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	4639      	mov	r1, r7
 800b0be:	4630      	mov	r0, r6
 800b0c0:	eb04 0903 	add.w	r9, r4, r3
 800b0c4:	f000 fe02 	bl	800bccc <_sbrk_r>
 800b0c8:	4581      	cmp	r9, r0
 800b0ca:	d142      	bne.n	800b152 <_malloc_r+0xea>
 800b0cc:	6821      	ldr	r1, [r4, #0]
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	1a6d      	subs	r5, r5, r1
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f7ff ffa6 	bl	800b024 <sbrk_aligned>
 800b0d8:	3001      	adds	r0, #1
 800b0da:	d03a      	beq.n	800b152 <_malloc_r+0xea>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	442b      	add	r3, r5
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	bb62      	cbnz	r2, 800b144 <_malloc_r+0xdc>
 800b0ea:	f8c8 7000 	str.w	r7, [r8]
 800b0ee:	e00f      	b.n	800b110 <_malloc_r+0xa8>
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	1b52      	subs	r2, r2, r5
 800b0f4:	d420      	bmi.n	800b138 <_malloc_r+0xd0>
 800b0f6:	2a0b      	cmp	r2, #11
 800b0f8:	d917      	bls.n	800b12a <_malloc_r+0xc2>
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	6025      	str	r5, [r4, #0]
 800b100:	bf18      	it	ne
 800b102:	6059      	strne	r1, [r3, #4]
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	bf08      	it	eq
 800b108:	f8c8 1000 	streq.w	r1, [r8]
 800b10c:	5162      	str	r2, [r4, r5]
 800b10e:	604b      	str	r3, [r1, #4]
 800b110:	4630      	mov	r0, r6
 800b112:	f000 f82f 	bl	800b174 <__malloc_unlock>
 800b116:	f104 000b 	add.w	r0, r4, #11
 800b11a:	1d23      	adds	r3, r4, #4
 800b11c:	f020 0007 	bic.w	r0, r0, #7
 800b120:	1ac2      	subs	r2, r0, r3
 800b122:	bf1c      	itt	ne
 800b124:	1a1b      	subne	r3, r3, r0
 800b126:	50a3      	strne	r3, [r4, r2]
 800b128:	e7af      	b.n	800b08a <_malloc_r+0x22>
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	bf0c      	ite	eq
 800b130:	f8c8 2000 	streq.w	r2, [r8]
 800b134:	605a      	strne	r2, [r3, #4]
 800b136:	e7eb      	b.n	800b110 <_malloc_r+0xa8>
 800b138:	4623      	mov	r3, r4
 800b13a:	6864      	ldr	r4, [r4, #4]
 800b13c:	e7ae      	b.n	800b09c <_malloc_r+0x34>
 800b13e:	463c      	mov	r4, r7
 800b140:	687f      	ldr	r7, [r7, #4]
 800b142:	e7b6      	b.n	800b0b2 <_malloc_r+0x4a>
 800b144:	461a      	mov	r2, r3
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	42a3      	cmp	r3, r4
 800b14a:	d1fb      	bne.n	800b144 <_malloc_r+0xdc>
 800b14c:	2300      	movs	r3, #0
 800b14e:	6053      	str	r3, [r2, #4]
 800b150:	e7de      	b.n	800b110 <_malloc_r+0xa8>
 800b152:	230c      	movs	r3, #12
 800b154:	4630      	mov	r0, r6
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	f000 f80c 	bl	800b174 <__malloc_unlock>
 800b15c:	e794      	b.n	800b088 <_malloc_r+0x20>
 800b15e:	6005      	str	r5, [r0, #0]
 800b160:	e7d6      	b.n	800b110 <_malloc_r+0xa8>
 800b162:	bf00      	nop
 800b164:	20000464 	.word	0x20000464

0800b168 <__malloc_lock>:
 800b168:	4801      	ldr	r0, [pc, #4]	@ (800b170 <__malloc_lock+0x8>)
 800b16a:	f7ff b8a6 	b.w	800a2ba <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	2000045c 	.word	0x2000045c

0800b174 <__malloc_unlock>:
 800b174:	4801      	ldr	r0, [pc, #4]	@ (800b17c <__malloc_unlock+0x8>)
 800b176:	f7ff b8a1 	b.w	800a2bc <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	2000045c 	.word	0x2000045c

0800b180 <_Balloc>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	69c6      	ldr	r6, [r0, #28]
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	b976      	cbnz	r6, 800b1a8 <_Balloc+0x28>
 800b18a:	2010      	movs	r0, #16
 800b18c:	f7ff ff42 	bl	800b014 <malloc>
 800b190:	4602      	mov	r2, r0
 800b192:	61e0      	str	r0, [r4, #28]
 800b194:	b920      	cbnz	r0, 800b1a0 <_Balloc+0x20>
 800b196:	4b18      	ldr	r3, [pc, #96]	@ (800b1f8 <_Balloc+0x78>)
 800b198:	216b      	movs	r1, #107	@ 0x6b
 800b19a:	4818      	ldr	r0, [pc, #96]	@ (800b1fc <_Balloc+0x7c>)
 800b19c:	f000 fdb4 	bl	800bd08 <__assert_func>
 800b1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1a4:	6006      	str	r6, [r0, #0]
 800b1a6:	60c6      	str	r6, [r0, #12]
 800b1a8:	69e6      	ldr	r6, [r4, #28]
 800b1aa:	68f3      	ldr	r3, [r6, #12]
 800b1ac:	b183      	cbz	r3, 800b1d0 <_Balloc+0x50>
 800b1ae:	69e3      	ldr	r3, [r4, #28]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1b6:	b9b8      	cbnz	r0, 800b1e8 <_Balloc+0x68>
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	fa01 f605 	lsl.w	r6, r1, r5
 800b1c0:	1d72      	adds	r2, r6, #5
 800b1c2:	0092      	lsls	r2, r2, #2
 800b1c4:	f000 fdbe 	bl	800bd44 <_calloc_r>
 800b1c8:	b160      	cbz	r0, 800b1e4 <_Balloc+0x64>
 800b1ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ce:	e00e      	b.n	800b1ee <_Balloc+0x6e>
 800b1d0:	2221      	movs	r2, #33	@ 0x21
 800b1d2:	2104      	movs	r1, #4
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fdb5 	bl	800bd44 <_calloc_r>
 800b1da:	69e3      	ldr	r3, [r4, #28]
 800b1dc:	60f0      	str	r0, [r6, #12]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e4      	bne.n	800b1ae <_Balloc+0x2e>
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}
 800b1e8:	6802      	ldr	r2, [r0, #0]
 800b1ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1f4:	e7f7      	b.n	800b1e6 <_Balloc+0x66>
 800b1f6:	bf00      	nop
 800b1f8:	0800c469 	.word	0x0800c469
 800b1fc:	0800c4e9 	.word	0x0800c4e9

0800b200 <_Bfree>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	69c6      	ldr	r6, [r0, #28]
 800b204:	4605      	mov	r5, r0
 800b206:	460c      	mov	r4, r1
 800b208:	b976      	cbnz	r6, 800b228 <_Bfree+0x28>
 800b20a:	2010      	movs	r0, #16
 800b20c:	f7ff ff02 	bl	800b014 <malloc>
 800b210:	4602      	mov	r2, r0
 800b212:	61e8      	str	r0, [r5, #28]
 800b214:	b920      	cbnz	r0, 800b220 <_Bfree+0x20>
 800b216:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <_Bfree+0x3c>)
 800b218:	218f      	movs	r1, #143	@ 0x8f
 800b21a:	4809      	ldr	r0, [pc, #36]	@ (800b240 <_Bfree+0x40>)
 800b21c:	f000 fd74 	bl	800bd08 <__assert_func>
 800b220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b224:	6006      	str	r6, [r0, #0]
 800b226:	60c6      	str	r6, [r0, #12]
 800b228:	b13c      	cbz	r4, 800b23a <_Bfree+0x3a>
 800b22a:	69eb      	ldr	r3, [r5, #28]
 800b22c:	6862      	ldr	r2, [r4, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b234:	6021      	str	r1, [r4, #0]
 800b236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	0800c469 	.word	0x0800c469
 800b240:	0800c4e9 	.word	0x0800c4e9

0800b244 <__multadd>:
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	f101 0c14 	add.w	ip, r1, #20
 800b24c:	4607      	mov	r7, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	461e      	mov	r6, r3
 800b252:	690d      	ldr	r5, [r1, #16]
 800b254:	2000      	movs	r0, #0
 800b256:	f8dc 3000 	ldr.w	r3, [ip]
 800b25a:	3001      	adds	r0, #1
 800b25c:	b299      	uxth	r1, r3
 800b25e:	4285      	cmp	r5, r0
 800b260:	fb02 6101 	mla	r1, r2, r1, r6
 800b264:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b268:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b26c:	b289      	uxth	r1, r1
 800b26e:	fb02 3306 	mla	r3, r2, r6, r3
 800b272:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b276:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b27a:	f84c 1b04 	str.w	r1, [ip], #4
 800b27e:	dcea      	bgt.n	800b256 <__multadd+0x12>
 800b280:	b30e      	cbz	r6, 800b2c6 <__multadd+0x82>
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	42ab      	cmp	r3, r5
 800b286:	dc19      	bgt.n	800b2bc <__multadd+0x78>
 800b288:	6861      	ldr	r1, [r4, #4]
 800b28a:	4638      	mov	r0, r7
 800b28c:	3101      	adds	r1, #1
 800b28e:	f7ff ff77 	bl	800b180 <_Balloc>
 800b292:	4680      	mov	r8, r0
 800b294:	b928      	cbnz	r0, 800b2a2 <__multadd+0x5e>
 800b296:	4602      	mov	r2, r0
 800b298:	4b0c      	ldr	r3, [pc, #48]	@ (800b2cc <__multadd+0x88>)
 800b29a:	21ba      	movs	r1, #186	@ 0xba
 800b29c:	480c      	ldr	r0, [pc, #48]	@ (800b2d0 <__multadd+0x8c>)
 800b29e:	f000 fd33 	bl	800bd08 <__assert_func>
 800b2a2:	6922      	ldr	r2, [r4, #16]
 800b2a4:	f104 010c 	add.w	r1, r4, #12
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	3202      	adds	r2, #2
 800b2ac:	0092      	lsls	r2, r2, #2
 800b2ae:	f000 fd1d 	bl	800bcec <memcpy>
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4644      	mov	r4, r8
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f7ff ffa2 	bl	800b200 <_Bfree>
 800b2bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	615e      	str	r6, [r3, #20]
 800b2c4:	6125      	str	r5, [r4, #16]
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	0800c4d8 	.word	0x0800c4d8
 800b2d0:	0800c4e9 	.word	0x0800c4e9

0800b2d4 <__hi0bits>:
 800b2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2d8:	4603      	mov	r3, r0
 800b2da:	bf36      	itet	cc
 800b2dc:	0403      	lslcc	r3, r0, #16
 800b2de:	2000      	movcs	r0, #0
 800b2e0:	2010      	movcc	r0, #16
 800b2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2e6:	bf3c      	itt	cc
 800b2e8:	021b      	lslcc	r3, r3, #8
 800b2ea:	3008      	addcc	r0, #8
 800b2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f0:	bf3c      	itt	cc
 800b2f2:	011b      	lslcc	r3, r3, #4
 800b2f4:	3004      	addcc	r0, #4
 800b2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fa:	bf3c      	itt	cc
 800b2fc:	009b      	lslcc	r3, r3, #2
 800b2fe:	3002      	addcc	r0, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	db05      	blt.n	800b310 <__hi0bits+0x3c>
 800b304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b308:	f100 0001 	add.w	r0, r0, #1
 800b30c:	bf08      	it	eq
 800b30e:	2020      	moveq	r0, #32
 800b310:	4770      	bx	lr

0800b312 <__lo0bits>:
 800b312:	6803      	ldr	r3, [r0, #0]
 800b314:	4602      	mov	r2, r0
 800b316:	f013 0007 	ands.w	r0, r3, #7
 800b31a:	d00b      	beq.n	800b334 <__lo0bits+0x22>
 800b31c:	07d9      	lsls	r1, r3, #31
 800b31e:	d421      	bmi.n	800b364 <__lo0bits+0x52>
 800b320:	0798      	lsls	r0, r3, #30
 800b322:	bf47      	ittee	mi
 800b324:	085b      	lsrmi	r3, r3, #1
 800b326:	2001      	movmi	r0, #1
 800b328:	089b      	lsrpl	r3, r3, #2
 800b32a:	2002      	movpl	r0, #2
 800b32c:	bf4c      	ite	mi
 800b32e:	6013      	strmi	r3, [r2, #0]
 800b330:	6013      	strpl	r3, [r2, #0]
 800b332:	4770      	bx	lr
 800b334:	b299      	uxth	r1, r3
 800b336:	b909      	cbnz	r1, 800b33c <__lo0bits+0x2a>
 800b338:	0c1b      	lsrs	r3, r3, #16
 800b33a:	2010      	movs	r0, #16
 800b33c:	b2d9      	uxtb	r1, r3
 800b33e:	b909      	cbnz	r1, 800b344 <__lo0bits+0x32>
 800b340:	3008      	adds	r0, #8
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	0719      	lsls	r1, r3, #28
 800b346:	bf04      	itt	eq
 800b348:	091b      	lsreq	r3, r3, #4
 800b34a:	3004      	addeq	r0, #4
 800b34c:	0799      	lsls	r1, r3, #30
 800b34e:	bf04      	itt	eq
 800b350:	089b      	lsreq	r3, r3, #2
 800b352:	3002      	addeq	r0, #2
 800b354:	07d9      	lsls	r1, r3, #31
 800b356:	d403      	bmi.n	800b360 <__lo0bits+0x4e>
 800b358:	085b      	lsrs	r3, r3, #1
 800b35a:	f100 0001 	add.w	r0, r0, #1
 800b35e:	d003      	beq.n	800b368 <__lo0bits+0x56>
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	4770      	bx	lr
 800b364:	2000      	movs	r0, #0
 800b366:	4770      	bx	lr
 800b368:	2020      	movs	r0, #32
 800b36a:	4770      	bx	lr

0800b36c <__i2b>:
 800b36c:	b510      	push	{r4, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	2101      	movs	r1, #1
 800b372:	f7ff ff05 	bl	800b180 <_Balloc>
 800b376:	4602      	mov	r2, r0
 800b378:	b928      	cbnz	r0, 800b386 <__i2b+0x1a>
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <__i2b+0x24>)
 800b37c:	f240 1145 	movw	r1, #325	@ 0x145
 800b380:	4804      	ldr	r0, [pc, #16]	@ (800b394 <__i2b+0x28>)
 800b382:	f000 fcc1 	bl	800bd08 <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	6144      	str	r4, [r0, #20]
 800b38a:	6103      	str	r3, [r0, #16]
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	0800c4d8 	.word	0x0800c4d8
 800b394:	0800c4e9 	.word	0x0800c4e9

0800b398 <__multiply>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4614      	mov	r4, r2
 800b39e:	690a      	ldr	r2, [r1, #16]
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	bfa2      	ittt	ge
 800b3aa:	4623      	movge	r3, r4
 800b3ac:	460c      	movge	r4, r1
 800b3ae:	461f      	movge	r7, r3
 800b3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3b4:	68a3      	ldr	r3, [r4, #8]
 800b3b6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3ba:	6861      	ldr	r1, [r4, #4]
 800b3bc:	eb0a 0609 	add.w	r6, sl, r9
 800b3c0:	42b3      	cmp	r3, r6
 800b3c2:	bfb8      	it	lt
 800b3c4:	3101      	addlt	r1, #1
 800b3c6:	f7ff fedb 	bl	800b180 <_Balloc>
 800b3ca:	b930      	cbnz	r0, 800b3da <__multiply+0x42>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	4b45      	ldr	r3, [pc, #276]	@ (800b4e4 <__multiply+0x14c>)
 800b3d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3d4:	4844      	ldr	r0, [pc, #272]	@ (800b4e8 <__multiply+0x150>)
 800b3d6:	f000 fc97 	bl	800bd08 <__assert_func>
 800b3da:	f100 0514 	add.w	r5, r0, #20
 800b3de:	2200      	movs	r2, #0
 800b3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	4543      	cmp	r3, r8
 800b3e8:	d321      	bcc.n	800b42e <__multiply+0x96>
 800b3ea:	f107 0114 	add.w	r1, r7, #20
 800b3ee:	f104 0214 	add.w	r2, r4, #20
 800b3f2:	f104 0715 	add.w	r7, r4, #21
 800b3f6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b3fa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b3fe:	9302      	str	r3, [sp, #8]
 800b400:	1b13      	subs	r3, r2, r4
 800b402:	3b15      	subs	r3, #21
 800b404:	f023 0303 	bic.w	r3, r3, #3
 800b408:	3304      	adds	r3, #4
 800b40a:	42ba      	cmp	r2, r7
 800b40c:	bf38      	it	cc
 800b40e:	2304      	movcc	r3, #4
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	9103      	str	r1, [sp, #12]
 800b416:	428b      	cmp	r3, r1
 800b418:	d80c      	bhi.n	800b434 <__multiply+0x9c>
 800b41a:	2e00      	cmp	r6, #0
 800b41c:	dd03      	ble.n	800b426 <__multiply+0x8e>
 800b41e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b422:	2b00      	cmp	r3, #0
 800b424:	d05b      	beq.n	800b4de <__multiply+0x146>
 800b426:	6106      	str	r6, [r0, #16]
 800b428:	b005      	add	sp, #20
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	f843 2b04 	str.w	r2, [r3], #4
 800b432:	e7d8      	b.n	800b3e6 <__multiply+0x4e>
 800b434:	f8b1 a000 	ldrh.w	sl, [r1]
 800b438:	f1ba 0f00 	cmp.w	sl, #0
 800b43c:	d024      	beq.n	800b488 <__multiply+0xf0>
 800b43e:	f104 0e14 	add.w	lr, r4, #20
 800b442:	46a9      	mov	r9, r5
 800b444:	f04f 0c00 	mov.w	ip, #0
 800b448:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b44c:	f8d9 3000 	ldr.w	r3, [r9]
 800b450:	fa1f fb87 	uxth.w	fp, r7
 800b454:	4572      	cmp	r2, lr
 800b456:	b29b      	uxth	r3, r3
 800b458:	fb0a 330b 	mla	r3, sl, fp, r3
 800b45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b460:	f8d9 7000 	ldr.w	r7, [r9]
 800b464:	4463      	add	r3, ip
 800b466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b46a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b472:	b29b      	uxth	r3, r3
 800b474:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b47c:	f849 3b04 	str.w	r3, [r9], #4
 800b480:	d8e2      	bhi.n	800b448 <__multiply+0xb0>
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	f845 c003 	str.w	ip, [r5, r3]
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	3104      	adds	r1, #4
 800b48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b490:	f1b9 0f00 	cmp.w	r9, #0
 800b494:	d021      	beq.n	800b4da <__multiply+0x142>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	f104 0c14 	add.w	ip, r4, #20
 800b49c:	46ae      	mov	lr, r5
 800b49e:	f04f 0a00 	mov.w	sl, #0
 800b4a2:	f8bc b000 	ldrh.w	fp, [ip]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4ac:	fb09 770b 	mla	r7, r9, fp, r7
 800b4b0:	4457      	add	r7, sl
 800b4b2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4b6:	f84e 3b04 	str.w	r3, [lr], #4
 800b4ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4c2:	f8be 3000 	ldrh.w	r3, [lr]
 800b4c6:	4562      	cmp	r2, ip
 800b4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800b4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b4d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4d4:	d8e5      	bhi.n	800b4a2 <__multiply+0x10a>
 800b4d6:	9f01      	ldr	r7, [sp, #4]
 800b4d8:	51eb      	str	r3, [r5, r7]
 800b4da:	3504      	adds	r5, #4
 800b4dc:	e799      	b.n	800b412 <__multiply+0x7a>
 800b4de:	3e01      	subs	r6, #1
 800b4e0:	e79b      	b.n	800b41a <__multiply+0x82>
 800b4e2:	bf00      	nop
 800b4e4:	0800c4d8 	.word	0x0800c4d8
 800b4e8:	0800c4e9 	.word	0x0800c4e9

0800b4ec <__pow5mult>:
 800b4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	f012 0203 	ands.w	r2, r2, #3
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	d007      	beq.n	800b50c <__pow5mult+0x20>
 800b4fc:	3a01      	subs	r2, #1
 800b4fe:	4c25      	ldr	r4, [pc, #148]	@ (800b594 <__pow5mult+0xa8>)
 800b500:	2300      	movs	r3, #0
 800b502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b506:	f7ff fe9d 	bl	800b244 <__multadd>
 800b50a:	4606      	mov	r6, r0
 800b50c:	10ad      	asrs	r5, r5, #2
 800b50e:	d03d      	beq.n	800b58c <__pow5mult+0xa0>
 800b510:	69fc      	ldr	r4, [r7, #28]
 800b512:	b97c      	cbnz	r4, 800b534 <__pow5mult+0x48>
 800b514:	2010      	movs	r0, #16
 800b516:	f7ff fd7d 	bl	800b014 <malloc>
 800b51a:	4602      	mov	r2, r0
 800b51c:	61f8      	str	r0, [r7, #28]
 800b51e:	b928      	cbnz	r0, 800b52c <__pow5mult+0x40>
 800b520:	4b1d      	ldr	r3, [pc, #116]	@ (800b598 <__pow5mult+0xac>)
 800b522:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b526:	481d      	ldr	r0, [pc, #116]	@ (800b59c <__pow5mult+0xb0>)
 800b528:	f000 fbee 	bl	800bd08 <__assert_func>
 800b52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b530:	6004      	str	r4, [r0, #0]
 800b532:	60c4      	str	r4, [r0, #12]
 800b534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b53c:	b94c      	cbnz	r4, 800b552 <__pow5mult+0x66>
 800b53e:	f240 2171 	movw	r1, #625	@ 0x271
 800b542:	4638      	mov	r0, r7
 800b544:	f7ff ff12 	bl	800b36c <__i2b>
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	f04f 0900 	mov.w	r9, #0
 800b556:	07eb      	lsls	r3, r5, #31
 800b558:	d50a      	bpl.n	800b570 <__pow5mult+0x84>
 800b55a:	4631      	mov	r1, r6
 800b55c:	4622      	mov	r2, r4
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ff1a 	bl	800b398 <__multiply>
 800b564:	4680      	mov	r8, r0
 800b566:	4631      	mov	r1, r6
 800b568:	4638      	mov	r0, r7
 800b56a:	4646      	mov	r6, r8
 800b56c:	f7ff fe48 	bl	800b200 <_Bfree>
 800b570:	106d      	asrs	r5, r5, #1
 800b572:	d00b      	beq.n	800b58c <__pow5mult+0xa0>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	b938      	cbnz	r0, 800b588 <__pow5mult+0x9c>
 800b578:	4622      	mov	r2, r4
 800b57a:	4621      	mov	r1, r4
 800b57c:	4638      	mov	r0, r7
 800b57e:	f7ff ff0b 	bl	800b398 <__multiply>
 800b582:	6020      	str	r0, [r4, #0]
 800b584:	f8c0 9000 	str.w	r9, [r0]
 800b588:	4604      	mov	r4, r0
 800b58a:	e7e4      	b.n	800b556 <__pow5mult+0x6a>
 800b58c:	4630      	mov	r0, r6
 800b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b592:	bf00      	nop
 800b594:	0800c544 	.word	0x0800c544
 800b598:	0800c469 	.word	0x0800c469
 800b59c:	0800c4e9 	.word	0x0800c4e9

0800b5a0 <__lshift>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	4607      	mov	r7, r0
 800b5a8:	4691      	mov	r9, r2
 800b5aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	6849      	ldr	r1, [r1, #4]
 800b5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	f108 0601 	add.w	r6, r8, #1
 800b5bc:	42b3      	cmp	r3, r6
 800b5be:	db0b      	blt.n	800b5d8 <__lshift+0x38>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff fddd 	bl	800b180 <_Balloc>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b948      	cbnz	r0, 800b5de <__lshift+0x3e>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b28      	ldr	r3, [pc, #160]	@ (800b670 <__lshift+0xd0>)
 800b5ce:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5d2:	4828      	ldr	r0, [pc, #160]	@ (800b674 <__lshift+0xd4>)
 800b5d4:	f000 fb98 	bl	800bd08 <__assert_func>
 800b5d8:	3101      	adds	r1, #1
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	e7ee      	b.n	800b5bc <__lshift+0x1c>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f100 0114 	add.w	r1, r0, #20
 800b5e4:	f100 0210 	add.w	r2, r0, #16
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	4553      	cmp	r3, sl
 800b5ec:	db33      	blt.n	800b656 <__lshift+0xb6>
 800b5ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5f2:	f104 0314 	add.w	r3, r4, #20
 800b5f6:	6920      	ldr	r0, [r4, #16]
 800b5f8:	f019 091f 	ands.w	r9, r9, #31
 800b5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b604:	d02b      	beq.n	800b65e <__lshift+0xbe>
 800b606:	f1c9 0e20 	rsb	lr, r9, #32
 800b60a:	468a      	mov	sl, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	fa00 f009 	lsl.w	r0, r0, r9
 800b614:	4310      	orrs	r0, r2
 800b616:	f84a 0b04 	str.w	r0, [sl], #4
 800b61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61e:	459c      	cmp	ip, r3
 800b620:	fa22 f20e 	lsr.w	r2, r2, lr
 800b624:	d8f3      	bhi.n	800b60e <__lshift+0x6e>
 800b626:	ebac 0304 	sub.w	r3, ip, r4
 800b62a:	f104 0015 	add.w	r0, r4, #21
 800b62e:	3b15      	subs	r3, #21
 800b630:	f023 0303 	bic.w	r3, r3, #3
 800b634:	3304      	adds	r3, #4
 800b636:	4584      	cmp	ip, r0
 800b638:	bf38      	it	cc
 800b63a:	2304      	movcc	r3, #4
 800b63c:	50ca      	str	r2, [r1, r3]
 800b63e:	b10a      	cbz	r2, 800b644 <__lshift+0xa4>
 800b640:	f108 0602 	add.w	r6, r8, #2
 800b644:	3e01      	subs	r6, #1
 800b646:	4638      	mov	r0, r7
 800b648:	4621      	mov	r1, r4
 800b64a:	612e      	str	r6, [r5, #16]
 800b64c:	f7ff fdd8 	bl	800b200 <_Bfree>
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b656:	3301      	adds	r3, #1
 800b658:	f842 0f04 	str.w	r0, [r2, #4]!
 800b65c:	e7c5      	b.n	800b5ea <__lshift+0x4a>
 800b65e:	3904      	subs	r1, #4
 800b660:	f853 2b04 	ldr.w	r2, [r3], #4
 800b664:	459c      	cmp	ip, r3
 800b666:	f841 2f04 	str.w	r2, [r1, #4]!
 800b66a:	d8f9      	bhi.n	800b660 <__lshift+0xc0>
 800b66c:	e7ea      	b.n	800b644 <__lshift+0xa4>
 800b66e:	bf00      	nop
 800b670:	0800c4d8 	.word	0x0800c4d8
 800b674:	0800c4e9 	.word	0x0800c4e9

0800b678 <__mcmp>:
 800b678:	4603      	mov	r3, r0
 800b67a:	690a      	ldr	r2, [r1, #16]
 800b67c:	6900      	ldr	r0, [r0, #16]
 800b67e:	1a80      	subs	r0, r0, r2
 800b680:	b530      	push	{r4, r5, lr}
 800b682:	d10e      	bne.n	800b6a2 <__mcmp+0x2a>
 800b684:	3314      	adds	r3, #20
 800b686:	3114      	adds	r1, #20
 800b688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b698:	4295      	cmp	r5, r2
 800b69a:	d003      	beq.n	800b6a4 <__mcmp+0x2c>
 800b69c:	d205      	bcs.n	800b6aa <__mcmp+0x32>
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	bd30      	pop	{r4, r5, pc}
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d3f3      	bcc.n	800b690 <__mcmp+0x18>
 800b6a8:	e7fb      	b.n	800b6a2 <__mcmp+0x2a>
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	e7f9      	b.n	800b6a2 <__mcmp+0x2a>
	...

0800b6b0 <__mdiff>:
 800b6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4689      	mov	r9, r1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4614      	mov	r4, r2
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f7ff ffdb 	bl	800b678 <__mcmp>
 800b6c2:	1e05      	subs	r5, r0, #0
 800b6c4:	d112      	bne.n	800b6ec <__mdiff+0x3c>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fd59 	bl	800b180 <_Balloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	b928      	cbnz	r0, 800b6de <__mdiff+0x2e>
 800b6d2:	4b41      	ldr	r3, [pc, #260]	@ (800b7d8 <__mdiff+0x128>)
 800b6d4:	f240 2137 	movw	r1, #567	@ 0x237
 800b6d8:	4840      	ldr	r0, [pc, #256]	@ (800b7dc <__mdiff+0x12c>)
 800b6da:	f000 fb15 	bl	800bd08 <__assert_func>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	b003      	add	sp, #12
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	bfbc      	itt	lt
 800b6ee:	464b      	movlt	r3, r9
 800b6f0:	46a1      	movlt	r9, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	bfb8      	it	lt
 800b6f6:	2501      	movlt	r5, #1
 800b6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6fc:	bfb4      	ite	lt
 800b6fe:	461c      	movlt	r4, r3
 800b700:	2500      	movge	r5, #0
 800b702:	f7ff fd3d 	bl	800b180 <_Balloc>
 800b706:	4602      	mov	r2, r0
 800b708:	b918      	cbnz	r0, 800b712 <__mdiff+0x62>
 800b70a:	4b33      	ldr	r3, [pc, #204]	@ (800b7d8 <__mdiff+0x128>)
 800b70c:	f240 2145 	movw	r1, #581	@ 0x245
 800b710:	e7e2      	b.n	800b6d8 <__mdiff+0x28>
 800b712:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b716:	f104 0e14 	add.w	lr, r4, #20
 800b71a:	6926      	ldr	r6, [r4, #16]
 800b71c:	f100 0b14 	add.w	fp, r0, #20
 800b720:	60c5      	str	r5, [r0, #12]
 800b722:	f109 0514 	add.w	r5, r9, #20
 800b726:	f109 0310 	add.w	r3, r9, #16
 800b72a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b72e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b732:	46d9      	mov	r9, fp
 800b734:	f04f 0c00 	mov.w	ip, #0
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	9b01      	ldr	r3, [sp, #4]
 800b73c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b740:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b744:	4576      	cmp	r6, lr
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	fa1f f38a 	uxth.w	r3, sl
 800b74c:	4619      	mov	r1, r3
 800b74e:	b283      	uxth	r3, r0
 800b750:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b754:	eba1 0303 	sub.w	r3, r1, r3
 800b758:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b75c:	4463      	add	r3, ip
 800b75e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b76c:	f849 3b04 	str.w	r3, [r9], #4
 800b770:	d8e3      	bhi.n	800b73a <__mdiff+0x8a>
 800b772:	1b33      	subs	r3, r6, r4
 800b774:	3415      	adds	r4, #21
 800b776:	3b15      	subs	r3, #21
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	3304      	adds	r3, #4
 800b77e:	42a6      	cmp	r6, r4
 800b780:	bf38      	it	cc
 800b782:	2304      	movcc	r3, #4
 800b784:	441d      	add	r5, r3
 800b786:	445b      	add	r3, fp
 800b788:	462c      	mov	r4, r5
 800b78a:	461e      	mov	r6, r3
 800b78c:	4544      	cmp	r4, r8
 800b78e:	d30e      	bcc.n	800b7ae <__mdiff+0xfe>
 800b790:	f108 0103 	add.w	r1, r8, #3
 800b794:	1b49      	subs	r1, r1, r5
 800b796:	3d03      	subs	r5, #3
 800b798:	f021 0103 	bic.w	r1, r1, #3
 800b79c:	45a8      	cmp	r8, r5
 800b79e:	bf38      	it	cc
 800b7a0:	2100      	movcc	r1, #0
 800b7a2:	440b      	add	r3, r1
 800b7a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7a8:	b199      	cbz	r1, 800b7d2 <__mdiff+0x122>
 800b7aa:	6117      	str	r7, [r2, #16]
 800b7ac:	e79a      	b.n	800b6e4 <__mdiff+0x34>
 800b7ae:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7b2:	46e6      	mov	lr, ip
 800b7b4:	fa1f fc81 	uxth.w	ip, r1
 800b7b8:	0c08      	lsrs	r0, r1, #16
 800b7ba:	4471      	add	r1, lr
 800b7bc:	44f4      	add	ip, lr
 800b7be:	b289      	uxth	r1, r1
 800b7c0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7cc:	f846 1b04 	str.w	r1, [r6], #4
 800b7d0:	e7dc      	b.n	800b78c <__mdiff+0xdc>
 800b7d2:	3f01      	subs	r7, #1
 800b7d4:	e7e6      	b.n	800b7a4 <__mdiff+0xf4>
 800b7d6:	bf00      	nop
 800b7d8:	0800c4d8 	.word	0x0800c4d8
 800b7dc:	0800c4e9 	.word	0x0800c4e9

0800b7e0 <__d2b>:
 800b7e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	ec59 8b10 	vmov	r8, r9, d0
 800b7ee:	f7ff fcc7 	bl	800b180 <_Balloc>
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	b930      	cbnz	r0, 800b804 <__d2b+0x24>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b23      	ldr	r3, [pc, #140]	@ (800b888 <__d2b+0xa8>)
 800b7fa:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7fe:	4823      	ldr	r0, [pc, #140]	@ (800b88c <__d2b+0xac>)
 800b800:	f000 fa82 	bl	800bd08 <__assert_func>
 800b804:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b80c:	b10d      	cbz	r5, 800b812 <__d2b+0x32>
 800b80e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	f1b8 0300 	subs.w	r3, r8, #0
 800b818:	d023      	beq.n	800b862 <__d2b+0x82>
 800b81a:	4668      	mov	r0, sp
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	f7ff fd78 	bl	800b312 <__lo0bits>
 800b822:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b826:	b1d0      	cbz	r0, 800b85e <__d2b+0x7e>
 800b828:	f1c0 0320 	rsb	r3, r0, #32
 800b82c:	fa02 f303 	lsl.w	r3, r2, r3
 800b830:	40c2      	lsrs	r2, r0
 800b832:	430b      	orrs	r3, r1
 800b834:	9201      	str	r2, [sp, #4]
 800b836:	6163      	str	r3, [r4, #20]
 800b838:	9b01      	ldr	r3, [sp, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	61a3      	str	r3, [r4, #24]
 800b83e:	bf0c      	ite	eq
 800b840:	2201      	moveq	r2, #1
 800b842:	2202      	movne	r2, #2
 800b844:	6122      	str	r2, [r4, #16]
 800b846:	b1a5      	cbz	r5, 800b872 <__d2b+0x92>
 800b848:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b84c:	4405      	add	r5, r0
 800b84e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b852:	603d      	str	r5, [r7, #0]
 800b854:	6030      	str	r0, [r6, #0]
 800b856:	4620      	mov	r0, r4
 800b858:	b003      	add	sp, #12
 800b85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b85e:	6161      	str	r1, [r4, #20]
 800b860:	e7ea      	b.n	800b838 <__d2b+0x58>
 800b862:	a801      	add	r0, sp, #4
 800b864:	f7ff fd55 	bl	800b312 <__lo0bits>
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	3020      	adds	r0, #32
 800b86c:	2201      	movs	r2, #1
 800b86e:	6163      	str	r3, [r4, #20]
 800b870:	e7e8      	b.n	800b844 <__d2b+0x64>
 800b872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b87a:	6038      	str	r0, [r7, #0]
 800b87c:	6918      	ldr	r0, [r3, #16]
 800b87e:	f7ff fd29 	bl	800b2d4 <__hi0bits>
 800b882:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b886:	e7e5      	b.n	800b854 <__d2b+0x74>
 800b888:	0800c4d8 	.word	0x0800c4d8
 800b88c:	0800c4e9 	.word	0x0800c4e9

0800b890 <__ssputs_r>:
 800b890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	461f      	mov	r7, r3
 800b896:	688e      	ldr	r6, [r1, #8]
 800b898:	4682      	mov	sl, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	42be      	cmp	r6, r7
 800b89e:	4690      	mov	r8, r2
 800b8a0:	680b      	ldr	r3, [r1, #0]
 800b8a2:	d82d      	bhi.n	800b900 <__ssputs_r+0x70>
 800b8a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8ac:	d026      	beq.n	800b8fc <__ssputs_r+0x6c>
 800b8ae:	6965      	ldr	r5, [r4, #20]
 800b8b0:	6909      	ldr	r1, [r1, #16]
 800b8b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8b6:	eba3 0901 	sub.w	r9, r3, r1
 800b8ba:	1c7b      	adds	r3, r7, #1
 800b8bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8c0:	444b      	add	r3, r9
 800b8c2:	106d      	asrs	r5, r5, #1
 800b8c4:	429d      	cmp	r5, r3
 800b8c6:	bf38      	it	cc
 800b8c8:	461d      	movcc	r5, r3
 800b8ca:	0553      	lsls	r3, r2, #21
 800b8cc:	d527      	bpl.n	800b91e <__ssputs_r+0x8e>
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	f7ff fbca 	bl	800b068 <_malloc_r>
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	b360      	cbz	r0, 800b932 <__ssputs_r+0xa2>
 800b8d8:	464a      	mov	r2, r9
 800b8da:	6921      	ldr	r1, [r4, #16]
 800b8dc:	f000 fa06 	bl	800bcec <memcpy>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	6126      	str	r6, [r4, #16]
 800b8ee:	444e      	add	r6, r9
 800b8f0:	6165      	str	r5, [r4, #20]
 800b8f2:	eba5 0509 	sub.w	r5, r5, r9
 800b8f6:	6026      	str	r6, [r4, #0]
 800b8f8:	463e      	mov	r6, r7
 800b8fa:	60a5      	str	r5, [r4, #8]
 800b8fc:	42be      	cmp	r6, r7
 800b8fe:	d900      	bls.n	800b902 <__ssputs_r+0x72>
 800b900:	463e      	mov	r6, r7
 800b902:	4632      	mov	r2, r6
 800b904:	4641      	mov	r1, r8
 800b906:	6820      	ldr	r0, [r4, #0]
 800b908:	f000 f9c6 	bl	800bc98 <memmove>
 800b90c:	68a3      	ldr	r3, [r4, #8]
 800b90e:	2000      	movs	r0, #0
 800b910:	1b9b      	subs	r3, r3, r6
 800b912:	60a3      	str	r3, [r4, #8]
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	4433      	add	r3, r6
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91e:	462a      	mov	r2, r5
 800b920:	f000 fa36 	bl	800bd90 <_realloc_r>
 800b924:	4606      	mov	r6, r0
 800b926:	2800      	cmp	r0, #0
 800b928:	d1e0      	bne.n	800b8ec <__ssputs_r+0x5c>
 800b92a:	6921      	ldr	r1, [r4, #16]
 800b92c:	4650      	mov	r0, sl
 800b92e:	f7ff fb27 	bl	800af80 <_free_r>
 800b932:	230c      	movs	r3, #12
 800b934:	f04f 30ff 	mov.w	r0, #4294967295
 800b938:	f8ca 3000 	str.w	r3, [sl]
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	e7e9      	b.n	800b91a <__ssputs_r+0x8a>
	...

0800b948 <_svfiprintf_r>:
 800b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94c:	4698      	mov	r8, r3
 800b94e:	898b      	ldrh	r3, [r1, #12]
 800b950:	b09d      	sub	sp, #116	@ 0x74
 800b952:	4607      	mov	r7, r0
 800b954:	061b      	lsls	r3, r3, #24
 800b956:	460d      	mov	r5, r1
 800b958:	4614      	mov	r4, r2
 800b95a:	d510      	bpl.n	800b97e <_svfiprintf_r+0x36>
 800b95c:	690b      	ldr	r3, [r1, #16]
 800b95e:	b973      	cbnz	r3, 800b97e <_svfiprintf_r+0x36>
 800b960:	2140      	movs	r1, #64	@ 0x40
 800b962:	f7ff fb81 	bl	800b068 <_malloc_r>
 800b966:	6028      	str	r0, [r5, #0]
 800b968:	6128      	str	r0, [r5, #16]
 800b96a:	b930      	cbnz	r0, 800b97a <_svfiprintf_r+0x32>
 800b96c:	230c      	movs	r3, #12
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	b01d      	add	sp, #116	@ 0x74
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	2340      	movs	r3, #64	@ 0x40
 800b97c:	616b      	str	r3, [r5, #20]
 800b97e:	2300      	movs	r3, #0
 800b980:	f8cd 800c 	str.w	r8, [sp, #12]
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800bb2c <_svfiprintf_r+0x1e4>
 800b98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98e:	2320      	movs	r3, #32
 800b990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b994:	2330      	movs	r3, #48	@ 0x30
 800b996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b99a:	4623      	mov	r3, r4
 800b99c:	469a      	mov	sl, r3
 800b99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a2:	b10a      	cbz	r2, 800b9a8 <_svfiprintf_r+0x60>
 800b9a4:	2a25      	cmp	r2, #37	@ 0x25
 800b9a6:	d1f9      	bne.n	800b99c <_svfiprintf_r+0x54>
 800b9a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ac:	d00b      	beq.n	800b9c6 <_svfiprintf_r+0x7e>
 800b9ae:	465b      	mov	r3, fp
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	f7ff ff6b 	bl	800b890 <__ssputs_r>
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	f000 80a7 	beq.w	800bb0e <_svfiprintf_r+0x1c6>
 800b9c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c2:	445a      	add	r2, fp
 800b9c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 809f 	beq.w	800bb0e <_svfiprintf_r+0x1c6>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d6:	f10a 0a01 	add.w	sl, sl, #1
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	9307      	str	r3, [sp, #28]
 800b9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e8:	4654      	mov	r4, sl
 800b9ea:	2205      	movs	r2, #5
 800b9ec:	484f      	ldr	r0, [pc, #316]	@ (800bb2c <_svfiprintf_r+0x1e4>)
 800b9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f2:	f7fe fc64 	bl	800a2be <memchr>
 800b9f6:	9a04      	ldr	r2, [sp, #16]
 800b9f8:	b9d8      	cbnz	r0, 800ba32 <_svfiprintf_r+0xea>
 800b9fa:	06d0      	lsls	r0, r2, #27
 800b9fc:	bf44      	itt	mi
 800b9fe:	2320      	movmi	r3, #32
 800ba00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba04:	0711      	lsls	r1, r2, #28
 800ba06:	bf44      	itt	mi
 800ba08:	232b      	movmi	r3, #43	@ 0x2b
 800ba0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba14:	d015      	beq.n	800ba42 <_svfiprintf_r+0xfa>
 800ba16:	9a07      	ldr	r2, [sp, #28]
 800ba18:	4654      	mov	r4, sl
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	f04f 0c0a 	mov.w	ip, #10
 800ba20:	4621      	mov	r1, r4
 800ba22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba26:	3b30      	subs	r3, #48	@ 0x30
 800ba28:	2b09      	cmp	r3, #9
 800ba2a:	d94b      	bls.n	800bac4 <_svfiprintf_r+0x17c>
 800ba2c:	b1b0      	cbz	r0, 800ba5c <_svfiprintf_r+0x114>
 800ba2e:	9207      	str	r2, [sp, #28]
 800ba30:	e014      	b.n	800ba5c <_svfiprintf_r+0x114>
 800ba32:	eba0 0308 	sub.w	r3, r0, r8
 800ba36:	46a2      	mov	sl, r4
 800ba38:	fa09 f303 	lsl.w	r3, r9, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	e7d2      	b.n	800b9e8 <_svfiprintf_r+0xa0>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	1d19      	adds	r1, r3, #4
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	9103      	str	r1, [sp, #12]
 800ba4c:	bfbb      	ittet	lt
 800ba4e:	425b      	neglt	r3, r3
 800ba50:	f042 0202 	orrlt.w	r2, r2, #2
 800ba54:	9307      	strge	r3, [sp, #28]
 800ba56:	9307      	strlt	r3, [sp, #28]
 800ba58:	bfb8      	it	lt
 800ba5a:	9204      	strlt	r2, [sp, #16]
 800ba5c:	7823      	ldrb	r3, [r4, #0]
 800ba5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba60:	d10a      	bne.n	800ba78 <_svfiprintf_r+0x130>
 800ba62:	7863      	ldrb	r3, [r4, #1]
 800ba64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba66:	d132      	bne.n	800bace <_svfiprintf_r+0x186>
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	3402      	adds	r4, #2
 800ba6c:	1d1a      	adds	r2, r3, #4
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba74:	9203      	str	r2, [sp, #12]
 800ba76:	9305      	str	r3, [sp, #20]
 800ba78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb3c <_svfiprintf_r+0x1f4>
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	7821      	ldrb	r1, [r4, #0]
 800ba80:	4650      	mov	r0, sl
 800ba82:	f7fe fc1c 	bl	800a2be <memchr>
 800ba86:	b138      	cbz	r0, 800ba98 <_svfiprintf_r+0x150>
 800ba88:	eba0 000a 	sub.w	r0, r0, sl
 800ba8c:	2240      	movs	r2, #64	@ 0x40
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	3401      	adds	r4, #1
 800ba92:	4082      	lsls	r2, r0
 800ba94:	4313      	orrs	r3, r2
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9c:	2206      	movs	r2, #6
 800ba9e:	4824      	ldr	r0, [pc, #144]	@ (800bb30 <_svfiprintf_r+0x1e8>)
 800baa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800baa4:	f7fe fc0b 	bl	800a2be <memchr>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d036      	beq.n	800bb1a <_svfiprintf_r+0x1d2>
 800baac:	4b21      	ldr	r3, [pc, #132]	@ (800bb34 <_svfiprintf_r+0x1ec>)
 800baae:	bb1b      	cbnz	r3, 800baf8 <_svfiprintf_r+0x1b0>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	3307      	adds	r3, #7
 800bab4:	f023 0307 	bic.w	r3, r3, #7
 800bab8:	3308      	adds	r3, #8
 800baba:	9303      	str	r3, [sp, #12]
 800babc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babe:	4433      	add	r3, r6
 800bac0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac2:	e76a      	b.n	800b99a <_svfiprintf_r+0x52>
 800bac4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bac8:	460c      	mov	r4, r1
 800baca:	2001      	movs	r0, #1
 800bacc:	e7a8      	b.n	800ba20 <_svfiprintf_r+0xd8>
 800bace:	2300      	movs	r3, #0
 800bad0:	3401      	adds	r4, #1
 800bad2:	f04f 0c0a 	mov.w	ip, #10
 800bad6:	4619      	mov	r1, r3
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	4620      	mov	r0, r4
 800badc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae0:	3a30      	subs	r2, #48	@ 0x30
 800bae2:	2a09      	cmp	r2, #9
 800bae4:	d903      	bls.n	800baee <_svfiprintf_r+0x1a6>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0c6      	beq.n	800ba78 <_svfiprintf_r+0x130>
 800baea:	9105      	str	r1, [sp, #20]
 800baec:	e7c4      	b.n	800ba78 <_svfiprintf_r+0x130>
 800baee:	fb0c 2101 	mla	r1, ip, r1, r2
 800baf2:	4604      	mov	r4, r0
 800baf4:	2301      	movs	r3, #1
 800baf6:	e7f0      	b.n	800bada <_svfiprintf_r+0x192>
 800baf8:	ab03      	add	r3, sp, #12
 800bafa:	462a      	mov	r2, r5
 800bafc:	a904      	add	r1, sp, #16
 800bafe:	4638      	mov	r0, r7
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <_svfiprintf_r+0x1f0>)
 800bb04:	f7fd fe7a 	bl	80097fc <_printf_float>
 800bb08:	1c42      	adds	r2, r0, #1
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	d1d6      	bne.n	800babc <_svfiprintf_r+0x174>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	065b      	lsls	r3, r3, #25
 800bb12:	f53f af2d 	bmi.w	800b970 <_svfiprintf_r+0x28>
 800bb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb18:	e72c      	b.n	800b974 <_svfiprintf_r+0x2c>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	4638      	mov	r0, r7
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	4b04      	ldr	r3, [pc, #16]	@ (800bb38 <_svfiprintf_r+0x1f0>)
 800bb26:	f7fe f905 	bl	8009d34 <_printf_i>
 800bb2a:	e7ed      	b.n	800bb08 <_svfiprintf_r+0x1c0>
 800bb2c:	0800c640 	.word	0x0800c640
 800bb30:	0800c64a 	.word	0x0800c64a
 800bb34:	080097fd 	.word	0x080097fd
 800bb38:	0800b891 	.word	0x0800b891
 800bb3c:	0800c646 	.word	0x0800c646

0800bb40 <__sflush_r>:
 800bb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	0716      	lsls	r6, r2, #28
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	d454      	bmi.n	800bbfa <__sflush_r+0xba>
 800bb50:	684b      	ldr	r3, [r1, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dc02      	bgt.n	800bb5c <__sflush_r+0x1c>
 800bb56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dd48      	ble.n	800bbee <__sflush_r+0xae>
 800bb5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb5e:	2e00      	cmp	r6, #0
 800bb60:	d045      	beq.n	800bbee <__sflush_r+0xae>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb68:	682f      	ldr	r7, [r5, #0]
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	d030      	beq.n	800bbd2 <__sflush_r+0x92>
 800bb70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	0759      	lsls	r1, r3, #29
 800bb76:	d505      	bpl.n	800bb84 <__sflush_r+0x44>
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb7e:	b10b      	cbz	r3, 800bb84 <__sflush_r+0x44>
 800bb80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb88:	6a21      	ldr	r1, [r4, #32]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	47b0      	blx	r6
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	d106      	bne.n	800bba2 <__sflush_r+0x62>
 800bb94:	6829      	ldr	r1, [r5, #0]
 800bb96:	291d      	cmp	r1, #29
 800bb98:	d82b      	bhi.n	800bbf2 <__sflush_r+0xb2>
 800bb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <__sflush_r+0x104>)
 800bb9c:	410a      	asrs	r2, r1
 800bb9e:	07d6      	lsls	r6, r2, #31
 800bba0:	d427      	bmi.n	800bbf2 <__sflush_r+0xb2>
 800bba2:	2200      	movs	r2, #0
 800bba4:	04d9      	lsls	r1, r3, #19
 800bba6:	6062      	str	r2, [r4, #4]
 800bba8:	6922      	ldr	r2, [r4, #16]
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	d504      	bpl.n	800bbb8 <__sflush_r+0x78>
 800bbae:	1c42      	adds	r2, r0, #1
 800bbb0:	d101      	bne.n	800bbb6 <__sflush_r+0x76>
 800bbb2:	682b      	ldr	r3, [r5, #0]
 800bbb4:	b903      	cbnz	r3, 800bbb8 <__sflush_r+0x78>
 800bbb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbba:	602f      	str	r7, [r5, #0]
 800bbbc:	b1b9      	cbz	r1, 800bbee <__sflush_r+0xae>
 800bbbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d002      	beq.n	800bbcc <__sflush_r+0x8c>
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7ff f9da 	bl	800af80 <_free_r>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbd0:	e00d      	b.n	800bbee <__sflush_r+0xae>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b0      	blx	r6
 800bbd8:	4602      	mov	r2, r0
 800bbda:	1c50      	adds	r0, r2, #1
 800bbdc:	d1c9      	bne.n	800bb72 <__sflush_r+0x32>
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <__sflush_r+0x32>
 800bbe4:	2b1d      	cmp	r3, #29
 800bbe6:	d001      	beq.n	800bbec <__sflush_r+0xac>
 800bbe8:	2b16      	cmp	r3, #22
 800bbea:	d11d      	bne.n	800bc28 <__sflush_r+0xe8>
 800bbec:	602f      	str	r7, [r5, #0]
 800bbee:	2000      	movs	r0, #0
 800bbf0:	e021      	b.n	800bc36 <__sflush_r+0xf6>
 800bbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf6:	b21b      	sxth	r3, r3
 800bbf8:	e01a      	b.n	800bc30 <__sflush_r+0xf0>
 800bbfa:	690f      	ldr	r7, [r1, #16]
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	d0f6      	beq.n	800bbee <__sflush_r+0xae>
 800bc00:	0793      	lsls	r3, r2, #30
 800bc02:	680e      	ldr	r6, [r1, #0]
 800bc04:	600f      	str	r7, [r1, #0]
 800bc06:	bf0c      	ite	eq
 800bc08:	694b      	ldreq	r3, [r1, #20]
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	eba6 0807 	sub.w	r8, r6, r7
 800bc10:	608b      	str	r3, [r1, #8]
 800bc12:	f1b8 0f00 	cmp.w	r8, #0
 800bc16:	ddea      	ble.n	800bbee <__sflush_r+0xae>
 800bc18:	4643      	mov	r3, r8
 800bc1a:	463a      	mov	r2, r7
 800bc1c:	6a21      	ldr	r1, [r4, #32]
 800bc1e:	4628      	mov	r0, r5
 800bc20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc22:	47b0      	blx	r6
 800bc24:	2800      	cmp	r0, #0
 800bc26:	dc08      	bgt.n	800bc3a <__sflush_r+0xfa>
 800bc28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3a:	4407      	add	r7, r0
 800bc3c:	eba8 0800 	sub.w	r8, r8, r0
 800bc40:	e7e7      	b.n	800bc12 <__sflush_r+0xd2>
 800bc42:	bf00      	nop
 800bc44:	dfbffffe 	.word	0xdfbffffe

0800bc48 <_fflush_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	690b      	ldr	r3, [r1, #16]
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	b913      	cbnz	r3, 800bc58 <_fflush_r+0x10>
 800bc52:	2500      	movs	r5, #0
 800bc54:	4628      	mov	r0, r5
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	b118      	cbz	r0, 800bc62 <_fflush_r+0x1a>
 800bc5a:	6a03      	ldr	r3, [r0, #32]
 800bc5c:	b90b      	cbnz	r3, 800bc62 <_fflush_r+0x1a>
 800bc5e:	f7fe fa15 	bl	800a08c <__sinit>
 800bc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f3      	beq.n	800bc52 <_fflush_r+0xa>
 800bc6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc6c:	07d0      	lsls	r0, r2, #31
 800bc6e:	d404      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc70:	0599      	lsls	r1, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc76:	f7fe fb20 	bl	800a2ba <__retarget_lock_acquire_recursive>
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	f7ff ff5f 	bl	800bb40 <__sflush_r>
 800bc82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc84:	4605      	mov	r5, r0
 800bc86:	07da      	lsls	r2, r3, #31
 800bc88:	d4e4      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	059b      	lsls	r3, r3, #22
 800bc8e:	d4e1      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc92:	f7fe fb13 	bl	800a2bc <__retarget_lock_release_recursive>
 800bc96:	e7dd      	b.n	800bc54 <_fflush_r+0xc>

0800bc98 <memmove>:
 800bc98:	4288      	cmp	r0, r1
 800bc9a:	b510      	push	{r4, lr}
 800bc9c:	eb01 0402 	add.w	r4, r1, r2
 800bca0:	d902      	bls.n	800bca8 <memmove+0x10>
 800bca2:	4284      	cmp	r4, r0
 800bca4:	4623      	mov	r3, r4
 800bca6:	d807      	bhi.n	800bcb8 <memmove+0x20>
 800bca8:	1e43      	subs	r3, r0, #1
 800bcaa:	42a1      	cmp	r1, r4
 800bcac:	d008      	beq.n	800bcc0 <memmove+0x28>
 800bcae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcb6:	e7f8      	b.n	800bcaa <memmove+0x12>
 800bcb8:	4402      	add	r2, r0
 800bcba:	4601      	mov	r1, r0
 800bcbc:	428a      	cmp	r2, r1
 800bcbe:	d100      	bne.n	800bcc2 <memmove+0x2a>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcca:	e7f7      	b.n	800bcbc <memmove+0x24>

0800bccc <_sbrk_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4d05      	ldr	r5, [pc, #20]	@ (800bce8 <_sbrk_r+0x1c>)
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f5 fec6 	bl	8001a68 <_sbrk>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_sbrk_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_sbrk_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	20000458 	.word	0x20000458

0800bcec <memcpy>:
 800bcec:	440a      	add	r2, r1
 800bcee:	1e43      	subs	r3, r0, #1
 800bcf0:	4291      	cmp	r1, r2
 800bcf2:	d100      	bne.n	800bcf6 <memcpy+0xa>
 800bcf4:	4770      	bx	lr
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcfc:	4291      	cmp	r1, r2
 800bcfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd02:	d1f9      	bne.n	800bcf8 <memcpy+0xc>
 800bd04:	bd10      	pop	{r4, pc}
	...

0800bd08 <__assert_func>:
 800bd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd0a:	4614      	mov	r4, r2
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4b09      	ldr	r3, [pc, #36]	@ (800bd34 <__assert_func+0x2c>)
 800bd10:	4605      	mov	r5, r0
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68d8      	ldr	r0, [r3, #12]
 800bd16:	b954      	cbnz	r4, 800bd2e <__assert_func+0x26>
 800bd18:	4b07      	ldr	r3, [pc, #28]	@ (800bd38 <__assert_func+0x30>)
 800bd1a:	461c      	mov	r4, r3
 800bd1c:	9100      	str	r1, [sp, #0]
 800bd1e:	4907      	ldr	r1, [pc, #28]	@ (800bd3c <__assert_func+0x34>)
 800bd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd24:	462b      	mov	r3, r5
 800bd26:	f000 f86f 	bl	800be08 <fiprintf>
 800bd2a:	f000 f87f 	bl	800be2c <abort>
 800bd2e:	4b04      	ldr	r3, [pc, #16]	@ (800bd40 <__assert_func+0x38>)
 800bd30:	e7f4      	b.n	800bd1c <__assert_func+0x14>
 800bd32:	bf00      	nop
 800bd34:	20000018 	.word	0x20000018
 800bd38:	0800c696 	.word	0x0800c696
 800bd3c:	0800c668 	.word	0x0800c668
 800bd40:	0800c65b 	.word	0x0800c65b

0800bd44 <_calloc_r>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	fba1 5402 	umull	r5, r4, r1, r2
 800bd4a:	b93c      	cbnz	r4, 800bd5c <_calloc_r+0x18>
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f7ff f98b 	bl	800b068 <_malloc_r>
 800bd52:	4606      	mov	r6, r0
 800bd54:	b928      	cbnz	r0, 800bd62 <_calloc_r+0x1e>
 800bd56:	2600      	movs	r6, #0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	bd70      	pop	{r4, r5, r6, pc}
 800bd5c:	220c      	movs	r2, #12
 800bd5e:	6002      	str	r2, [r0, #0]
 800bd60:	e7f9      	b.n	800bd56 <_calloc_r+0x12>
 800bd62:	462a      	mov	r2, r5
 800bd64:	4621      	mov	r1, r4
 800bd66:	f7fe fa2a 	bl	800a1be <memset>
 800bd6a:	e7f5      	b.n	800bd58 <_calloc_r+0x14>

0800bd6c <__ascii_mbtowc>:
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	b901      	cbnz	r1, 800bd72 <__ascii_mbtowc+0x6>
 800bd70:	a901      	add	r1, sp, #4
 800bd72:	b142      	cbz	r2, 800bd86 <__ascii_mbtowc+0x1a>
 800bd74:	b14b      	cbz	r3, 800bd8a <__ascii_mbtowc+0x1e>
 800bd76:	7813      	ldrb	r3, [r2, #0]
 800bd78:	600b      	str	r3, [r1, #0]
 800bd7a:	7812      	ldrb	r2, [r2, #0]
 800bd7c:	1e10      	subs	r0, r2, #0
 800bd7e:	bf18      	it	ne
 800bd80:	2001      	movne	r0, #1
 800bd82:	b002      	add	sp, #8
 800bd84:	4770      	bx	lr
 800bd86:	4610      	mov	r0, r2
 800bd88:	e7fb      	b.n	800bd82 <__ascii_mbtowc+0x16>
 800bd8a:	f06f 0001 	mvn.w	r0, #1
 800bd8e:	e7f8      	b.n	800bd82 <__ascii_mbtowc+0x16>

0800bd90 <_realloc_r>:
 800bd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd94:	4680      	mov	r8, r0
 800bd96:	4615      	mov	r5, r2
 800bd98:	460c      	mov	r4, r1
 800bd9a:	b921      	cbnz	r1, 800bda6 <_realloc_r+0x16>
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda2:	f7ff b961 	b.w	800b068 <_malloc_r>
 800bda6:	b92a      	cbnz	r2, 800bdb4 <_realloc_r+0x24>
 800bda8:	f7ff f8ea 	bl	800af80 <_free_r>
 800bdac:	2400      	movs	r4, #0
 800bdae:	4620      	mov	r0, r4
 800bdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb4:	f000 f841 	bl	800be3a <_malloc_usable_size_r>
 800bdb8:	4285      	cmp	r5, r0
 800bdba:	4606      	mov	r6, r0
 800bdbc:	d802      	bhi.n	800bdc4 <_realloc_r+0x34>
 800bdbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdc2:	d8f4      	bhi.n	800bdae <_realloc_r+0x1e>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f7ff f94e 	bl	800b068 <_malloc_r>
 800bdcc:	4607      	mov	r7, r0
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0ec      	beq.n	800bdac <_realloc_r+0x1c>
 800bdd2:	42b5      	cmp	r5, r6
 800bdd4:	462a      	mov	r2, r5
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	bf28      	it	cs
 800bdda:	4632      	movcs	r2, r6
 800bddc:	f7ff ff86 	bl	800bcec <memcpy>
 800bde0:	4621      	mov	r1, r4
 800bde2:	4640      	mov	r0, r8
 800bde4:	463c      	mov	r4, r7
 800bde6:	f7ff f8cb 	bl	800af80 <_free_r>
 800bdea:	e7e0      	b.n	800bdae <_realloc_r+0x1e>

0800bdec <__ascii_wctomb>:
 800bdec:	4603      	mov	r3, r0
 800bdee:	4608      	mov	r0, r1
 800bdf0:	b141      	cbz	r1, 800be04 <__ascii_wctomb+0x18>
 800bdf2:	2aff      	cmp	r2, #255	@ 0xff
 800bdf4:	d904      	bls.n	800be00 <__ascii_wctomb+0x14>
 800bdf6:	228a      	movs	r2, #138	@ 0x8a
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	4770      	bx	lr
 800be00:	2001      	movs	r0, #1
 800be02:	700a      	strb	r2, [r1, #0]
 800be04:	4770      	bx	lr
	...

0800be08 <fiprintf>:
 800be08:	b40e      	push	{r1, r2, r3}
 800be0a:	b503      	push	{r0, r1, lr}
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	4601      	mov	r1, r0
 800be10:	4805      	ldr	r0, [pc, #20]	@ (800be28 <fiprintf+0x20>)
 800be12:	f853 2b04 	ldr.w	r2, [r3], #4
 800be16:	6800      	ldr	r0, [r0, #0]
 800be18:	9301      	str	r3, [sp, #4]
 800be1a:	f000 f83f 	bl	800be9c <_vfiprintf_r>
 800be1e:	b002      	add	sp, #8
 800be20:	f85d eb04 	ldr.w	lr, [sp], #4
 800be24:	b003      	add	sp, #12
 800be26:	4770      	bx	lr
 800be28:	20000018 	.word	0x20000018

0800be2c <abort>:
 800be2c:	2006      	movs	r0, #6
 800be2e:	b508      	push	{r3, lr}
 800be30:	f000 fa08 	bl	800c244 <raise>
 800be34:	2001      	movs	r0, #1
 800be36:	f7f5 fd9e 	bl	8001976 <_exit>

0800be3a <_malloc_usable_size_r>:
 800be3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be3e:	1f18      	subs	r0, r3, #4
 800be40:	2b00      	cmp	r3, #0
 800be42:	bfbc      	itt	lt
 800be44:	580b      	ldrlt	r3, [r1, r0]
 800be46:	18c0      	addlt	r0, r0, r3
 800be48:	4770      	bx	lr

0800be4a <__sfputc_r>:
 800be4a:	6893      	ldr	r3, [r2, #8]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	6093      	str	r3, [r2, #8]
 800be52:	b410      	push	{r4}
 800be54:	da08      	bge.n	800be68 <__sfputc_r+0x1e>
 800be56:	6994      	ldr	r4, [r2, #24]
 800be58:	42a3      	cmp	r3, r4
 800be5a:	db01      	blt.n	800be60 <__sfputc_r+0x16>
 800be5c:	290a      	cmp	r1, #10
 800be5e:	d103      	bne.n	800be68 <__sfputc_r+0x1e>
 800be60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be64:	f000 b932 	b.w	800c0cc <__swbuf_r>
 800be68:	6813      	ldr	r3, [r2, #0]
 800be6a:	1c58      	adds	r0, r3, #1
 800be6c:	6010      	str	r0, [r2, #0]
 800be6e:	4608      	mov	r0, r1
 800be70:	7019      	strb	r1, [r3, #0]
 800be72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <__sfputs_r>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	4614      	mov	r4, r2
 800be80:	18d5      	adds	r5, r2, r3
 800be82:	42ac      	cmp	r4, r5
 800be84:	d101      	bne.n	800be8a <__sfputs_r+0x12>
 800be86:	2000      	movs	r0, #0
 800be88:	e007      	b.n	800be9a <__sfputs_r+0x22>
 800be8a:	463a      	mov	r2, r7
 800be8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be90:	4630      	mov	r0, r6
 800be92:	f7ff ffda 	bl	800be4a <__sfputc_r>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d1f3      	bne.n	800be82 <__sfputs_r+0xa>
 800be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be9c <_vfiprintf_r>:
 800be9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea0:	460d      	mov	r5, r1
 800bea2:	b09d      	sub	sp, #116	@ 0x74
 800bea4:	4614      	mov	r4, r2
 800bea6:	4698      	mov	r8, r3
 800bea8:	4606      	mov	r6, r0
 800beaa:	b118      	cbz	r0, 800beb4 <_vfiprintf_r+0x18>
 800beac:	6a03      	ldr	r3, [r0, #32]
 800beae:	b90b      	cbnz	r3, 800beb4 <_vfiprintf_r+0x18>
 800beb0:	f7fe f8ec 	bl	800a08c <__sinit>
 800beb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beb6:	07d9      	lsls	r1, r3, #31
 800beb8:	d405      	bmi.n	800bec6 <_vfiprintf_r+0x2a>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	059a      	lsls	r2, r3, #22
 800bebe:	d402      	bmi.n	800bec6 <_vfiprintf_r+0x2a>
 800bec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bec2:	f7fe f9fa 	bl	800a2ba <__retarget_lock_acquire_recursive>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	071b      	lsls	r3, r3, #28
 800beca:	d501      	bpl.n	800bed0 <_vfiprintf_r+0x34>
 800becc:	692b      	ldr	r3, [r5, #16]
 800bece:	b99b      	cbnz	r3, 800bef8 <_vfiprintf_r+0x5c>
 800bed0:	4629      	mov	r1, r5
 800bed2:	4630      	mov	r0, r6
 800bed4:	f000 f938 	bl	800c148 <__swsetup_r>
 800bed8:	b170      	cbz	r0, 800bef8 <_vfiprintf_r+0x5c>
 800beda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bedc:	07dc      	lsls	r4, r3, #31
 800bede:	d504      	bpl.n	800beea <_vfiprintf_r+0x4e>
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295
 800bee4:	b01d      	add	sp, #116	@ 0x74
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beea:	89ab      	ldrh	r3, [r5, #12]
 800beec:	0598      	lsls	r0, r3, #22
 800beee:	d4f7      	bmi.n	800bee0 <_vfiprintf_r+0x44>
 800bef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bef2:	f7fe f9e3 	bl	800a2bc <__retarget_lock_release_recursive>
 800bef6:	e7f3      	b.n	800bee0 <_vfiprintf_r+0x44>
 800bef8:	2300      	movs	r3, #0
 800befa:	f8cd 800c 	str.w	r8, [sp, #12]
 800befe:	f04f 0901 	mov.w	r9, #1
 800bf02:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c0b8 <_vfiprintf_r+0x21c>
 800bf06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf08:	2320      	movs	r3, #32
 800bf0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf0e:	2330      	movs	r3, #48	@ 0x30
 800bf10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf14:	4623      	mov	r3, r4
 800bf16:	469a      	mov	sl, r3
 800bf18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf1c:	b10a      	cbz	r2, 800bf22 <_vfiprintf_r+0x86>
 800bf1e:	2a25      	cmp	r2, #37	@ 0x25
 800bf20:	d1f9      	bne.n	800bf16 <_vfiprintf_r+0x7a>
 800bf22:	ebba 0b04 	subs.w	fp, sl, r4
 800bf26:	d00b      	beq.n	800bf40 <_vfiprintf_r+0xa4>
 800bf28:	465b      	mov	r3, fp
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ffa2 	bl	800be78 <__sfputs_r>
 800bf34:	3001      	adds	r0, #1
 800bf36:	f000 80a7 	beq.w	800c088 <_vfiprintf_r+0x1ec>
 800bf3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf3c:	445a      	add	r2, fp
 800bf3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf40:	f89a 3000 	ldrb.w	r3, [sl]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 809f 	beq.w	800c088 <_vfiprintf_r+0x1ec>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf50:	f10a 0a01 	add.w	sl, sl, #1
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf62:	4654      	mov	r4, sl
 800bf64:	2205      	movs	r2, #5
 800bf66:	4854      	ldr	r0, [pc, #336]	@ (800c0b8 <_vfiprintf_r+0x21c>)
 800bf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6c:	f7fe f9a7 	bl	800a2be <memchr>
 800bf70:	9a04      	ldr	r2, [sp, #16]
 800bf72:	b9d8      	cbnz	r0, 800bfac <_vfiprintf_r+0x110>
 800bf74:	06d1      	lsls	r1, r2, #27
 800bf76:	bf44      	itt	mi
 800bf78:	2320      	movmi	r3, #32
 800bf7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf7e:	0713      	lsls	r3, r2, #28
 800bf80:	bf44      	itt	mi
 800bf82:	232b      	movmi	r3, #43	@ 0x2b
 800bf84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf88:	f89a 3000 	ldrb.w	r3, [sl]
 800bf8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf8e:	d015      	beq.n	800bfbc <_vfiprintf_r+0x120>
 800bf90:	9a07      	ldr	r2, [sp, #28]
 800bf92:	4654      	mov	r4, sl
 800bf94:	2000      	movs	r0, #0
 800bf96:	f04f 0c0a 	mov.w	ip, #10
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfa0:	3b30      	subs	r3, #48	@ 0x30
 800bfa2:	2b09      	cmp	r3, #9
 800bfa4:	d94b      	bls.n	800c03e <_vfiprintf_r+0x1a2>
 800bfa6:	b1b0      	cbz	r0, 800bfd6 <_vfiprintf_r+0x13a>
 800bfa8:	9207      	str	r2, [sp, #28]
 800bfaa:	e014      	b.n	800bfd6 <_vfiprintf_r+0x13a>
 800bfac:	eba0 0308 	sub.w	r3, r0, r8
 800bfb0:	46a2      	mov	sl, r4
 800bfb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	e7d2      	b.n	800bf62 <_vfiprintf_r+0xc6>
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	1d19      	adds	r1, r3, #4
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	9103      	str	r1, [sp, #12]
 800bfc6:	bfbb      	ittet	lt
 800bfc8:	425b      	neglt	r3, r3
 800bfca:	f042 0202 	orrlt.w	r2, r2, #2
 800bfce:	9307      	strge	r3, [sp, #28]
 800bfd0:	9307      	strlt	r3, [sp, #28]
 800bfd2:	bfb8      	it	lt
 800bfd4:	9204      	strlt	r2, [sp, #16]
 800bfd6:	7823      	ldrb	r3, [r4, #0]
 800bfd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfda:	d10a      	bne.n	800bff2 <_vfiprintf_r+0x156>
 800bfdc:	7863      	ldrb	r3, [r4, #1]
 800bfde:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfe0:	d132      	bne.n	800c048 <_vfiprintf_r+0x1ac>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	3402      	adds	r4, #2
 800bfe6:	1d1a      	adds	r2, r3, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfee:	9203      	str	r2, [sp, #12]
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0c8 <_vfiprintf_r+0x22c>
 800bff6:	2203      	movs	r2, #3
 800bff8:	7821      	ldrb	r1, [r4, #0]
 800bffa:	4650      	mov	r0, sl
 800bffc:	f7fe f95f 	bl	800a2be <memchr>
 800c000:	b138      	cbz	r0, 800c012 <_vfiprintf_r+0x176>
 800c002:	eba0 000a 	sub.w	r0, r0, sl
 800c006:	2240      	movs	r2, #64	@ 0x40
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	3401      	adds	r4, #1
 800c00c:	4082      	lsls	r2, r0
 800c00e:	4313      	orrs	r3, r2
 800c010:	9304      	str	r3, [sp, #16]
 800c012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c016:	2206      	movs	r2, #6
 800c018:	4828      	ldr	r0, [pc, #160]	@ (800c0bc <_vfiprintf_r+0x220>)
 800c01a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c01e:	f7fe f94e 	bl	800a2be <memchr>
 800c022:	2800      	cmp	r0, #0
 800c024:	d03f      	beq.n	800c0a6 <_vfiprintf_r+0x20a>
 800c026:	4b26      	ldr	r3, [pc, #152]	@ (800c0c0 <_vfiprintf_r+0x224>)
 800c028:	bb1b      	cbnz	r3, 800c072 <_vfiprintf_r+0x1d6>
 800c02a:	9b03      	ldr	r3, [sp, #12]
 800c02c:	3307      	adds	r3, #7
 800c02e:	f023 0307 	bic.w	r3, r3, #7
 800c032:	3308      	adds	r3, #8
 800c034:	9303      	str	r3, [sp, #12]
 800c036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c038:	443b      	add	r3, r7
 800c03a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c03c:	e76a      	b.n	800bf14 <_vfiprintf_r+0x78>
 800c03e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c042:	460c      	mov	r4, r1
 800c044:	2001      	movs	r0, #1
 800c046:	e7a8      	b.n	800bf9a <_vfiprintf_r+0xfe>
 800c048:	2300      	movs	r3, #0
 800c04a:	3401      	adds	r4, #1
 800c04c:	f04f 0c0a 	mov.w	ip, #10
 800c050:	4619      	mov	r1, r3
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	4620      	mov	r0, r4
 800c056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c05a:	3a30      	subs	r2, #48	@ 0x30
 800c05c:	2a09      	cmp	r2, #9
 800c05e:	d903      	bls.n	800c068 <_vfiprintf_r+0x1cc>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0c6      	beq.n	800bff2 <_vfiprintf_r+0x156>
 800c064:	9105      	str	r1, [sp, #20]
 800c066:	e7c4      	b.n	800bff2 <_vfiprintf_r+0x156>
 800c068:	fb0c 2101 	mla	r1, ip, r1, r2
 800c06c:	4604      	mov	r4, r0
 800c06e:	2301      	movs	r3, #1
 800c070:	e7f0      	b.n	800c054 <_vfiprintf_r+0x1b8>
 800c072:	ab03      	add	r3, sp, #12
 800c074:	462a      	mov	r2, r5
 800c076:	a904      	add	r1, sp, #16
 800c078:	4630      	mov	r0, r6
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	4b11      	ldr	r3, [pc, #68]	@ (800c0c4 <_vfiprintf_r+0x228>)
 800c07e:	f7fd fbbd 	bl	80097fc <_printf_float>
 800c082:	4607      	mov	r7, r0
 800c084:	1c78      	adds	r0, r7, #1
 800c086:	d1d6      	bne.n	800c036 <_vfiprintf_r+0x19a>
 800c088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c08a:	07d9      	lsls	r1, r3, #31
 800c08c:	d405      	bmi.n	800c09a <_vfiprintf_r+0x1fe>
 800c08e:	89ab      	ldrh	r3, [r5, #12]
 800c090:	059a      	lsls	r2, r3, #22
 800c092:	d402      	bmi.n	800c09a <_vfiprintf_r+0x1fe>
 800c094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c096:	f7fe f911 	bl	800a2bc <__retarget_lock_release_recursive>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	065b      	lsls	r3, r3, #25
 800c09e:	f53f af1f 	bmi.w	800bee0 <_vfiprintf_r+0x44>
 800c0a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0a4:	e71e      	b.n	800bee4 <_vfiprintf_r+0x48>
 800c0a6:	ab03      	add	r3, sp, #12
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	a904      	add	r1, sp, #16
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4b04      	ldr	r3, [pc, #16]	@ (800c0c4 <_vfiprintf_r+0x228>)
 800c0b2:	f7fd fe3f 	bl	8009d34 <_printf_i>
 800c0b6:	e7e4      	b.n	800c082 <_vfiprintf_r+0x1e6>
 800c0b8:	0800c640 	.word	0x0800c640
 800c0bc:	0800c64a 	.word	0x0800c64a
 800c0c0:	080097fd 	.word	0x080097fd
 800c0c4:	0800be79 	.word	0x0800be79
 800c0c8:	0800c646 	.word	0x0800c646

0800c0cc <__swbuf_r>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	460e      	mov	r6, r1
 800c0d0:	4614      	mov	r4, r2
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	b118      	cbz	r0, 800c0de <__swbuf_r+0x12>
 800c0d6:	6a03      	ldr	r3, [r0, #32]
 800c0d8:	b90b      	cbnz	r3, 800c0de <__swbuf_r+0x12>
 800c0da:	f7fd ffd7 	bl	800a08c <__sinit>
 800c0de:	69a3      	ldr	r3, [r4, #24]
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	071a      	lsls	r2, r3, #28
 800c0e6:	d501      	bpl.n	800c0ec <__swbuf_r+0x20>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	b943      	cbnz	r3, 800c0fe <__swbuf_r+0x32>
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f82a 	bl	800c148 <__swsetup_r>
 800c0f4:	b118      	cbz	r0, 800c0fe <__swbuf_r+0x32>
 800c0f6:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	b2f6      	uxtb	r6, r6
 800c102:	6922      	ldr	r2, [r4, #16]
 800c104:	4637      	mov	r7, r6
 800c106:	1a98      	subs	r0, r3, r2
 800c108:	6963      	ldr	r3, [r4, #20]
 800c10a:	4283      	cmp	r3, r0
 800c10c:	dc05      	bgt.n	800c11a <__swbuf_r+0x4e>
 800c10e:	4621      	mov	r1, r4
 800c110:	4628      	mov	r0, r5
 800c112:	f7ff fd99 	bl	800bc48 <_fflush_r>
 800c116:	2800      	cmp	r0, #0
 800c118:	d1ed      	bne.n	800c0f6 <__swbuf_r+0x2a>
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	60a3      	str	r3, [r4, #8]
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	6022      	str	r2, [r4, #0]
 800c126:	701e      	strb	r6, [r3, #0]
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	6962      	ldr	r2, [r4, #20]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d004      	beq.n	800c13a <__swbuf_r+0x6e>
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	07db      	lsls	r3, r3, #31
 800c134:	d5e1      	bpl.n	800c0fa <__swbuf_r+0x2e>
 800c136:	2e0a      	cmp	r6, #10
 800c138:	d1df      	bne.n	800c0fa <__swbuf_r+0x2e>
 800c13a:	4621      	mov	r1, r4
 800c13c:	4628      	mov	r0, r5
 800c13e:	f7ff fd83 	bl	800bc48 <_fflush_r>
 800c142:	2800      	cmp	r0, #0
 800c144:	d0d9      	beq.n	800c0fa <__swbuf_r+0x2e>
 800c146:	e7d6      	b.n	800c0f6 <__swbuf_r+0x2a>

0800c148 <__swsetup_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4b29      	ldr	r3, [pc, #164]	@ (800c1f0 <__swsetup_r+0xa8>)
 800c14c:	4605      	mov	r5, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	b118      	cbz	r0, 800c15c <__swsetup_r+0x14>
 800c154:	6a03      	ldr	r3, [r0, #32]
 800c156:	b90b      	cbnz	r3, 800c15c <__swsetup_r+0x14>
 800c158:	f7fd ff98 	bl	800a08c <__sinit>
 800c15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c160:	0719      	lsls	r1, r3, #28
 800c162:	d422      	bmi.n	800c1aa <__swsetup_r+0x62>
 800c164:	06da      	lsls	r2, r3, #27
 800c166:	d407      	bmi.n	800c178 <__swsetup_r+0x30>
 800c168:	2209      	movs	r2, #9
 800c16a:	602a      	str	r2, [r5, #0]
 800c16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	e033      	b.n	800c1e0 <__swsetup_r+0x98>
 800c178:	0758      	lsls	r0, r3, #29
 800c17a:	d512      	bpl.n	800c1a2 <__swsetup_r+0x5a>
 800c17c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c17e:	b141      	cbz	r1, 800c192 <__swsetup_r+0x4a>
 800c180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c184:	4299      	cmp	r1, r3
 800c186:	d002      	beq.n	800c18e <__swsetup_r+0x46>
 800c188:	4628      	mov	r0, r5
 800c18a:	f7fe fef9 	bl	800af80 <_free_r>
 800c18e:	2300      	movs	r3, #0
 800c190:	6363      	str	r3, [r4, #52]	@ 0x34
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	2300      	movs	r3, #0
 800c19c:	6063      	str	r3, [r4, #4]
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f043 0308 	orr.w	r3, r3, #8
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	b94b      	cbnz	r3, 800c1c2 <__swsetup_r+0x7a>
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1b8:	d003      	beq.n	800c1c2 <__swsetup_r+0x7a>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f882 	bl	800c2c6 <__smakebuf_r>
 800c1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c6:	f013 0201 	ands.w	r2, r3, #1
 800c1ca:	d00a      	beq.n	800c1e2 <__swsetup_r+0x9a>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	60a2      	str	r2, [r4, #8]
 800c1d0:	6962      	ldr	r2, [r4, #20]
 800c1d2:	4252      	negs	r2, r2
 800c1d4:	61a2      	str	r2, [r4, #24]
 800c1d6:	6922      	ldr	r2, [r4, #16]
 800c1d8:	b942      	cbnz	r2, 800c1ec <__swsetup_r+0xa4>
 800c1da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1de:	d1c5      	bne.n	800c16c <__swsetup_r+0x24>
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
 800c1e2:	0799      	lsls	r1, r3, #30
 800c1e4:	bf58      	it	pl
 800c1e6:	6962      	ldrpl	r2, [r4, #20]
 800c1e8:	60a2      	str	r2, [r4, #8]
 800c1ea:	e7f4      	b.n	800c1d6 <__swsetup_r+0x8e>
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	e7f7      	b.n	800c1e0 <__swsetup_r+0x98>
 800c1f0:	20000018 	.word	0x20000018

0800c1f4 <_raise_r>:
 800c1f4:	291f      	cmp	r1, #31
 800c1f6:	b538      	push	{r3, r4, r5, lr}
 800c1f8:	4605      	mov	r5, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	d904      	bls.n	800c208 <_raise_r+0x14>
 800c1fe:	2316      	movs	r3, #22
 800c200:	6003      	str	r3, [r0, #0]
 800c202:	f04f 30ff 	mov.w	r0, #4294967295
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c20a:	b112      	cbz	r2, 800c212 <_raise_r+0x1e>
 800c20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c210:	b94b      	cbnz	r3, 800c226 <_raise_r+0x32>
 800c212:	4628      	mov	r0, r5
 800c214:	f000 f830 	bl	800c278 <_getpid_r>
 800c218:	4622      	mov	r2, r4
 800c21a:	4601      	mov	r1, r0
 800c21c:	4628      	mov	r0, r5
 800c21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c222:	f000 b817 	b.w	800c254 <_kill_r>
 800c226:	2b01      	cmp	r3, #1
 800c228:	d00a      	beq.n	800c240 <_raise_r+0x4c>
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	d103      	bne.n	800c236 <_raise_r+0x42>
 800c22e:	2316      	movs	r3, #22
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	2001      	movs	r0, #1
 800c234:	e7e7      	b.n	800c206 <_raise_r+0x12>
 800c236:	2100      	movs	r1, #0
 800c238:	4620      	mov	r0, r4
 800c23a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c23e:	4798      	blx	r3
 800c240:	2000      	movs	r0, #0
 800c242:	e7e0      	b.n	800c206 <_raise_r+0x12>

0800c244 <raise>:
 800c244:	4b02      	ldr	r3, [pc, #8]	@ (800c250 <raise+0xc>)
 800c246:	4601      	mov	r1, r0
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	f7ff bfd3 	b.w	800c1f4 <_raise_r>
 800c24e:	bf00      	nop
 800c250:	20000018 	.word	0x20000018

0800c254 <_kill_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	2300      	movs	r3, #0
 800c258:	4d06      	ldr	r5, [pc, #24]	@ (800c274 <_kill_r+0x20>)
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	602b      	str	r3, [r5, #0]
 800c262:	f7f5 fb78 	bl	8001956 <_kill>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d102      	bne.n	800c270 <_kill_r+0x1c>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b103      	cbz	r3, 800c270 <_kill_r+0x1c>
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	bd38      	pop	{r3, r4, r5, pc}
 800c272:	bf00      	nop
 800c274:	20000458 	.word	0x20000458

0800c278 <_getpid_r>:
 800c278:	f7f5 bb65 	b.w	8001946 <_getpid>

0800c27c <__swhatbuf_r>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	460c      	mov	r4, r1
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	b096      	sub	sp, #88	@ 0x58
 800c286:	4615      	mov	r5, r2
 800c288:	2900      	cmp	r1, #0
 800c28a:	461e      	mov	r6, r3
 800c28c:	da0c      	bge.n	800c2a8 <__swhatbuf_r+0x2c>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	2100      	movs	r1, #0
 800c292:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c296:	bf14      	ite	ne
 800c298:	2340      	movne	r3, #64	@ 0x40
 800c29a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c29e:	2000      	movs	r0, #0
 800c2a0:	6031      	str	r1, [r6, #0]
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	b016      	add	sp, #88	@ 0x58
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
 800c2a8:	466a      	mov	r2, sp
 800c2aa:	f000 f849 	bl	800c340 <_fstat_r>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	dbed      	blt.n	800c28e <__swhatbuf_r+0x12>
 800c2b2:	9901      	ldr	r1, [sp, #4]
 800c2b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2bc:	4259      	negs	r1, r3
 800c2be:	4159      	adcs	r1, r3
 800c2c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2c4:	e7eb      	b.n	800c29e <__swhatbuf_r+0x22>

0800c2c6 <__smakebuf_r>:
 800c2c6:	898b      	ldrh	r3, [r1, #12]
 800c2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ca:	079d      	lsls	r5, r3, #30
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	d507      	bpl.n	800c2e2 <__smakebuf_r+0x1c>
 800c2d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	2301      	movs	r3, #1
 800c2dc:	6163      	str	r3, [r4, #20]
 800c2de:	b003      	add	sp, #12
 800c2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e2:	ab01      	add	r3, sp, #4
 800c2e4:	466a      	mov	r2, sp
 800c2e6:	f7ff ffc9 	bl	800c27c <__swhatbuf_r>
 800c2ea:	9f00      	ldr	r7, [sp, #0]
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f7fe feb9 	bl	800b068 <_malloc_r>
 800c2f6:	b948      	cbnz	r0, 800c30c <__smakebuf_r+0x46>
 800c2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fc:	059a      	lsls	r2, r3, #22
 800c2fe:	d4ee      	bmi.n	800c2de <__smakebuf_r+0x18>
 800c300:	f023 0303 	bic.w	r3, r3, #3
 800c304:	f043 0302 	orr.w	r3, r3, #2
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	e7e2      	b.n	800c2d2 <__smakebuf_r+0xc>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	6020      	str	r0, [r4, #0]
 800c310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c31c:	b15b      	cbz	r3, 800c336 <__smakebuf_r+0x70>
 800c31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c322:	4630      	mov	r0, r6
 800c324:	f000 f81e 	bl	800c364 <_isatty_r>
 800c328:	b128      	cbz	r0, 800c336 <__smakebuf_r+0x70>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	f023 0303 	bic.w	r3, r3, #3
 800c330:	f043 0301 	orr.w	r3, r3, #1
 800c334:	81a3      	strh	r3, [r4, #12]
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	431d      	orrs	r5, r3
 800c33a:	81a5      	strh	r5, [r4, #12]
 800c33c:	e7cf      	b.n	800c2de <__smakebuf_r+0x18>
	...

0800c340 <_fstat_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	2300      	movs	r3, #0
 800c344:	4d06      	ldr	r5, [pc, #24]	@ (800c360 <_fstat_r+0x20>)
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	f7f5 fb62 	bl	8001a16 <_fstat>
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	d102      	bne.n	800c35c <_fstat_r+0x1c>
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	b103      	cbz	r3, 800c35c <_fstat_r+0x1c>
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	bf00      	nop
 800c360:	20000458 	.word	0x20000458

0800c364 <_isatty_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	2300      	movs	r3, #0
 800c368:	4d05      	ldr	r5, [pc, #20]	@ (800c380 <_isatty_r+0x1c>)
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	f7f5 fb61 	bl	8001a36 <_isatty>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_isatty_r+0x1a>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_isatty_r+0x1a>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20000458 	.word	0x20000458

0800c384 <_init>:
 800c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c386:	bf00      	nop
 800c388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38a:	bc08      	pop	{r3}
 800c38c:	469e      	mov	lr, r3
 800c38e:	4770      	bx	lr

0800c390 <_fini>:
 800c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c392:	bf00      	nop
 800c394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c396:	bc08      	pop	{r3}
 800c398:	469e      	mov	lr, r3
 800c39a:	4770      	bx	lr
